"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudformationProviderFacade = void 0;
const PROVIDER_NAME = 'awscloudformation';
class CloudformationProviderFacade {
    static async isAmplifyAdminApp(context, appId) {
        const providerPlugin = await Promise.resolve().then(() => __importStar(require(context.amplify.getProviderPlugins(context)[PROVIDER_NAME])));
        return providerPlugin.isAmplifyAdminApp(appId);
    }
    static async hashDirectory(context, directory) {
        const providerPlugin = await Promise.resolve().then(() => __importStar(require(context.amplify.getProviderPlugins(context)[PROVIDER_NAME])));
        return providerPlugin.hashDirectory(directory);
    }
    static async prePushCfnTemplateModifier(context, template) {
        const providerPlugin = await Promise.resolve().then(() => __importStar(require(context.amplify.getProviderPlugins(context)[PROVIDER_NAME])));
        return providerPlugin.prePushCfnTemplateModifier(template);
    }
    static async getApiKeyConfig(context) {
        const providerPlugin = await Promise.resolve().then(() => __importStar(require(context.amplify.getProviderPlugins(context)[PROVIDER_NAME])));
        return providerPlugin.getApiKeyConfig();
    }
}
exports.CloudformationProviderFacade = CloudformationProviderFacade;
//# sourceMappingURL=cloudformation-provider-facade.js.map