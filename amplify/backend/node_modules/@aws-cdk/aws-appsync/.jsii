{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-certificatemanager": "1.172.0",
    "@aws-cdk/aws-cognito": "1.172.0",
    "@aws-cdk/aws-dynamodb": "1.172.0",
    "@aws-cdk/aws-ec2": "1.172.0",
    "@aws-cdk/aws-elasticsearch": "1.172.0",
    "@aws-cdk/aws-iam": "1.172.0",
    "@aws-cdk/aws-lambda": "1.172.0",
    "@aws-cdk/aws-opensearchservice": "1.172.0",
    "@aws-cdk/aws-rds": "1.172.0",
    "@aws-cdk/aws-s3-assets": "1.172.0",
    "@aws-cdk/aws-secretsmanager": "1.172.0",
    "@aws-cdk/core": "1.172.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-acmpca": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ACMPCA",
          "packageId": "Amazon.CDK.AWS.ACMPCA"
        },
        "java": {
          "maven": {
            "artifactId": "acmpca",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.acmpca"
        },
        "js": {
          "npm": "@aws-cdk/aws-acmpca"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-acmpca",
          "module": "aws_cdk.aws_acmpca"
        }
      }
    },
    "@aws-cdk/aws-applicationautoscaling": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ApplicationAutoScaling",
          "packageId": "Amazon.CDK.AWS.ApplicationAutoScaling"
        },
        "java": {
          "maven": {
            "artifactId": "applicationautoscaling",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.applicationautoscaling"
        },
        "js": {
          "npm": "@aws-cdk/aws-applicationautoscaling"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-applicationautoscaling",
          "module": "aws_cdk.aws_applicationautoscaling"
        }
      }
    },
    "@aws-cdk/aws-autoscaling-common": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling.Common",
          "packageId": "Amazon.CDK.AWS.AutoScaling.Common"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling-common",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling.common"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling-common"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling-common",
          "module": "aws_cdk.aws_autoscaling_common"
        }
      }
    },
    "@aws-cdk/aws-certificatemanager": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CertificateManager",
          "packageId": "Amazon.CDK.AWS.CertificateManager"
        },
        "java": {
          "maven": {
            "artifactId": "certificatemanager",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.certificatemanager"
        },
        "js": {
          "npm": "@aws-cdk/aws-certificatemanager"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-certificatemanager",
          "module": "aws_cdk.aws_certificatemanager"
        }
      }
    },
    "@aws-cdk/aws-cloudformation": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudFormation",
          "packageId": "Amazon.CDK.AWS.CloudFormation"
        },
        "java": {
          "maven": {
            "artifactId": "cloudformation",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudformation"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudformation"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudformation",
          "module": "aws_cdk.aws_cloudformation"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-codeguruprofiler": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeGuruProfiler",
          "packageId": "Amazon.CDK.AWS.CodeGuruProfiler"
        },
        "java": {
          "maven": {
            "artifactId": "codeguruprofiler",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codeguruprofiler"
        },
        "js": {
          "npm": "@aws-cdk/aws-codeguruprofiler"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codeguruprofiler",
          "module": "aws_cdk.aws_codeguruprofiler"
        }
      }
    },
    "@aws-cdk/aws-codestarnotifications": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeStarNotifications",
          "packageId": "Amazon.CDK.AWS.CodeStarNotifications"
        },
        "java": {
          "maven": {
            "artifactId": "codestarnotifications",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codestarnotifications"
        },
        "js": {
          "npm": "@aws-cdk/aws-codestarnotifications"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codestarnotifications",
          "module": "aws_cdk.aws_codestarnotifications"
        }
      }
    },
    "@aws-cdk/aws-cognito": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Cognito",
          "packageId": "Amazon.CDK.AWS.Cognito"
        },
        "java": {
          "maven": {
            "artifactId": "cognito",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cognito"
        },
        "js": {
          "npm": "@aws-cdk/aws-cognito"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cognito",
          "module": "aws_cdk.aws_cognito"
        }
      }
    },
    "@aws-cdk/aws-dynamodb": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.DynamoDB",
          "packageId": "Amazon.CDK.AWS.DynamoDB"
        },
        "java": {
          "maven": {
            "artifactId": "dynamodb",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.dynamodb"
        },
        "js": {
          "npm": "@aws-cdk/aws-dynamodb"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-dynamodb",
          "module": "aws_cdk.aws_dynamodb"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-ecr": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ECR",
          "packageId": "Amazon.CDK.AWS.ECR"
        },
        "java": {
          "maven": {
            "artifactId": "ecr",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr",
          "module": "aws_cdk.aws_ecr"
        }
      }
    },
    "@aws-cdk/aws-ecr-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Ecr.Assets",
          "packageId": "Amazon.CDK.ECR.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "ecr-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr-assets",
          "module": "aws_cdk.aws_ecr_assets"
        }
      }
    },
    "@aws-cdk/aws-efs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EFS",
          "packageId": "Amazon.CDK.AWS.EFS"
        },
        "java": {
          "maven": {
            "artifactId": "efs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.efs"
        },
        "js": {
          "npm": "@aws-cdk/aws-efs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-efs",
          "module": "aws_cdk.aws_efs"
        }
      }
    },
    "@aws-cdk/aws-elasticsearch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Elasticsearch",
          "packageId": "Amazon.CDK.AWS.Elasticsearch"
        },
        "java": {
          "maven": {
            "artifactId": "elasticsearch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.elasticsearch"
        },
        "js": {
          "npm": "@aws-cdk/aws-elasticsearch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-elasticsearch",
          "module": "aws_cdk.aws_elasticsearch"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kinesis": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Kinesis",
          "packageId": "Amazon.CDK.AWS.Kinesis"
        },
        "java": {
          "maven": {
            "artifactId": "kinesis",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kinesis"
        },
        "js": {
          "npm": "@aws-cdk/aws-kinesis"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kinesis",
          "module": "aws_cdk.aws_kinesis"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-lambda": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Lambda",
          "packageId": "Amazon.CDK.AWS.Lambda"
        },
        "java": {
          "maven": {
            "artifactId": "lambda",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.lambda"
        },
        "js": {
          "npm": "@aws-cdk/aws-lambda"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-lambda",
          "module": "aws_cdk.aws_lambda"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-opensearchservice": {
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.OpenSearchService",
          "packageId": "Amazon.CDK.AWS.OpenSearchService",
          "signAssembly": true
        },
        "java": {
          "maven": {
            "artifactId": "opensearchservice",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.opensearchservice"
        },
        "js": {
          "npm": "@aws-cdk/aws-opensearchservice"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-opensearchservice",
          "module": "aws_cdk.aws_opensearchservice"
        }
      }
    },
    "@aws-cdk/aws-rds": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.RDS",
          "packageId": "Amazon.CDK.AWS.RDS"
        },
        "java": {
          "maven": {
            "artifactId": "rds",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.rds"
        },
        "js": {
          "npm": "@aws-cdk/aws-rds"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-rds",
          "module": "aws_cdk.aws_rds"
        }
      }
    },
    "@aws-cdk/aws-route53": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Route53",
          "packageId": "Amazon.CDK.AWS.Route53"
        },
        "java": {
          "maven": {
            "artifactId": "route53",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.route53"
        },
        "js": {
          "npm": "@aws-cdk/aws-route53"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-route53",
          "module": "aws_cdk.aws_route53"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-sam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SAM",
          "packageId": "Amazon.CDK.AWS.SAM"
        },
        "java": {
          "maven": {
            "artifactId": "sam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sam"
        },
        "js": {
          "npm": "@aws-cdk/aws-sam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sam",
          "module": "aws_cdk.aws_sam"
        }
      }
    },
    "@aws-cdk/aws-secretsmanager": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SecretsManager",
          "packageId": "Amazon.CDK.AWS.SecretsManager"
        },
        "java": {
          "maven": {
            "artifactId": "secretsmanager",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.secretsmanager"
        },
        "js": {
          "npm": "@aws-cdk/aws-secretsmanager"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-secretsmanager",
          "module": "aws_cdk.aws_secretsmanager"
        }
      }
    },
    "@aws-cdk/aws-signer": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Signer",
          "packageId": "Amazon.CDK.AWS.Signer"
        },
        "java": {
          "maven": {
            "artifactId": "signer",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.signer"
        },
        "js": {
          "npm": "@aws-cdk/aws-signer"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-signer",
          "module": "aws_cdk.aws_signer"
        }
      }
    },
    "@aws-cdk/aws-sns": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SNS",
          "packageId": "Amazon.CDK.AWS.SNS"
        },
        "java": {
          "maven": {
            "artifactId": "sns",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sns"
        },
        "js": {
          "npm": "@aws-cdk/aws-sns"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sns",
          "module": "aws_cdk.aws_sns"
        }
      }
    },
    "@aws-cdk/aws-sqs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SQS",
          "packageId": "Amazon.CDK.AWS.SQS"
        },
        "java": {
          "maven": {
            "artifactId": "sqs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sqs"
        },
        "js": {
          "npm": "@aws-cdk/aws-sqs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sqs",
          "module": "aws_cdk.aws_sqs"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/custom-resources": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CustomResources",
          "packageId": "Amazon.CDK.AWS.CustomResources"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-customresources",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.customresources"
        },
        "js": {
          "npm": "@aws-cdk/custom-resources"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.custom-resources",
          "module": "aws_cdk.custom_resources"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::AppSync",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.67.0 (build 2c027f5)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "appsync"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-appsync",
  "readme": {
    "markdown": "# AWS AppSync Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cfn-resources: Stable](https://img.shields.io/badge/cfn--resources-stable-success.svg?style=for-the-badge)\n\n> All classes with the `Cfn` prefix in this module ([CFN Resources]) are always stable and safe to use.\n>\n> [CFN Resources]: https://docs.aws.amazon.com/cdk/latest/guide/constructs.html#constructs_lib\n\n![cdk-constructs: Experimental](https://img.shields.io/badge/cdk--constructs-experimental-important.svg?style=for-the-badge)\n\n> The APIs of higher level constructs in this module are experimental and under active development.\n> They are subject to non-backward compatible changes or removal in any future version. These are\n> not subject to the [Semantic Versioning](https://semver.org/) model and breaking changes will be\n> announced in the release notes. This means that while you may use them, you may need to update\n> your source code when upgrading to a newer version of this package.\n\n---\n\n<!--END STABILITY BANNER-->\n\nThe `@aws-cdk/aws-appsync` package contains constructs for building flexible\nAPIs that use GraphQL.\n\n```ts nofixture\nimport * as appsync from '@aws-cdk/aws-appsync';\n```\n\n## Example\n\n### DynamoDB\n\nExample of a GraphQL API with `AWS_IAM` [authorization](#authorization) resolving into a DynamoDb\nbackend data source.\n\nGraphQL schema file `schema.graphql`:\n\n```gql\ntype demo {\n  id: String!\n  version: String!\n}\ntype Query {\n  getDemos: [ demo! ]\n}\ninput DemoInput {\n  version: String!\n}\ntype Mutation {\n  addDemo(input: DemoInput!): demo\n}\n```\n\nCDK stack file `app-stack.ts`:\n\n```ts\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n```\n\n### Aurora Serverless\n\nAppSync provides a data source for executing SQL commands against Amazon Aurora\nServerless clusters. You can use AppSync resolvers to execute SQL statements\nagainst the Data API with GraphQL queries, mutations, and subscriptions.\n\n```ts\n// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});\n```\n\n### HTTP Endpoints\n\nGraphQL schema file `schema.graphql`:\n\n```gql\ntype job {\n  id: String!\n  version: String!\n}\n\ninput DemoInput {\n  version: String!\n}\n\ntype Mutation {\n  callStepFunction(input: DemoInput!): job\n}\n```\n\nGraphQL request mapping template `request.vtl`:\n\n```json\n{\n  \"version\": \"2018-05-29\",\n  \"method\": \"POST\",\n  \"resourcePath\": \"/\",\n  \"params\": {\n    \"headers\": {\n      \"content-type\": \"application/x-amz-json-1.0\",\n      \"x-amz-target\":\"AWSStepFunctions.StartExecution\"\n    },\n    \"body\": {\n      \"stateMachineArn\": \"<your step functions arn>\",\n      \"input\": \"{ \\\"id\\\": \\\"$context.arguments.id\\\" }\"\n    }\n  }\n}\n```\n\nGraphQL response mapping template `response.vtl`:\n\n```json\n{\n  \"id\": \"${context.result.id}\"\n}\n```\n\nCDK stack file `app-stack.ts`:\n\n```ts\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n```\n\n### Amazon OpenSearch Service\n\nAppSync has builtin support for Amazon OpenSearch Service (successor to Amazon\nElasticsearch Service) from domains that are provisioned through your AWS account. You can\nuse AppSync resolvers to perform GraphQL operations such as queries, mutations, and\nsubscriptions.\n\n```ts\nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\n\nconst user = new iam.User(this, 'User');\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_2,\n  removalPolicy: RemovalPolicy.DESTROY,\n  fineGrainedAccessControl: { masterUserArn: user.userArn },\n  encryptionAtRest: { enabled: true },\n  nodeToNodeEncryption: true,\n  enforceHttps: true,\n});\n\ndeclare const api: appsync.GraphqlApi;\nconst ds = api.addOpenSearchDataSource('ds', domain);\n\nds.createResolver({\n  typeName: 'Query',\n  fieldName: 'getTests',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(JSON.stringify({\n    version: '2017-02-28',\n    operation: 'GET',\n    path: '/id/post/_search',\n    params: {\n      headers: {},\n      queryString: {},\n      body: { from: 0, size: 50 },\n    },\n  })),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`[\n    #foreach($entry in $context.result.hits.hits)\n    #if( $velocityCount > 1 ) , #end\n    $utils.toJson($entry.get(\"_source\"))\n    #end\n  ]`),\n});\n```\n\n## Custom Domain Names\n\nFor many use cases you may want to associate a custom domain name with your\nGraphQL API. This can be done during the API creation.\n\n```ts\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: myDomainName,\n});\n```\n\n## Schema\n\nEvery GraphQL Api needs a schema to define the Api. CDK offers `appsync.Schema`\nfor static convenience methods for various types of schema declaration: code-first\nor schema-first.\n\n### Code-First\n\nWhen declaring your GraphQL Api, CDK defaults to a code-first approach if the\n`schema` property is not configured.\n\n```ts\nconst api = new appsync.GraphqlApi(this, 'api', { name: 'myApi' });\n```\n\nCDK will declare a `Schema` class that will give your Api access functions to\ndefine your schema code-first: `addType`, `addToSchema`, etc.\n\nYou can also declare your `Schema` class outside of your CDK stack, to define\nyour schema externally.\n\n```ts\nconst schema = new appsync.Schema();\nschema.addType(new appsync.ObjectType('demo', {\n  definition: { id: appsync.GraphqlType.id() },\n}));\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  schema,\n});\n```\n\nSee the [code-first schema](#Code-First-Schema) section for more details.\n\n### Schema-First\n\nYou can define your GraphQL Schema from a file on disk. For convenience, use\nthe `appsync.Schema.fromAsset` to specify the file representing your schema.\n\n```ts\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphl')),\n});\n```\n\n## Imports\n\nAny GraphQL Api that has been created outside the stack can be imported from\nanother stack into your CDK app. Utilizing the `fromXxx` function, you have\nthe ability to add data sources and resolvers through a `IGraphqlApi` interface.\n\n```ts\ndeclare const api: appsync.GraphqlApi;\ndeclare const table: dynamodb.Table;\nconst importedApi = appsync.GraphqlApi.fromGraphqlApiAttributes(this, 'IApi', {\n  graphqlApiId: api.apiId,\n  graphqlApiArn: api.arn,\n});\nimportedApi.addDynamoDbDataSource('TableDataSource', table);\n```\n\nIf you don't specify `graphqlArn` in `fromXxxAttributes`, CDK will autogenerate\nthe expected `arn` for the imported api, given the `apiId`. For creating data\nsources and resolvers, an `apiId` is sufficient.\n\n## Authorization\n\nThere are multiple authorization types available for GraphQL API to cater to different\naccess use cases. They are:\n\n- API Keys (`AuthorizationType.API_KEY`)\n- Amazon Cognito User Pools (`AuthorizationType.USER_POOL`)\n- OpenID Connect (`AuthorizationType.OPENID_CONNECT`)\n- AWS Identity and Access Management (`AuthorizationType.AWS_IAM`)\n- AWS Lambda (`AuthorizationType.AWS_LAMBDA`)\n\nThese types can be used simultaneously in a single API, allowing different types of clients to\naccess data. When you specify an authorization type, you can also specify the corresponding\nauthorization mode to finish defining your authorization. For example, this is a GraphQL API\nwith AWS Lambda Authorization.\n\n```ts\nimport * as lambda from '@aws-cdk/aws-lambda';\ndeclare const authFunction: lambda.Function;\n\nnew appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'appsync.test.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.LAMBDA,\n      lambdaAuthorizerConfig: {\n        handler: authFunction,\n        // can also specify `resultsCacheTtl` and `validationRegex`.\n      },\n    },\n  },\n});\n```\n\n## Permissions\n\nWhen using `AWS_IAM` as the authorization type for GraphQL API, an IAM Role\nwith correct permissions must be used for access to API.\n\nWhen configuring permissions, you can specify specific resources to only be\naccessible by `IAM` authorization. For example, if you want to only allow mutability\nfor `IAM` authorized access you would configure the following.\n\nIn `schema.graphql`:\n\n```gql\ntype Mutation {\n  updateExample(...): ...\n    @aws_iam\n}\n```\n\nIn `IAM`:\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"appsync:GraphQL\"\n      ],\n      \"Resource\": [\n        \"arn:aws:appsync:REGION:ACCOUNT_ID:apis/GRAPHQL_ID/types/Mutation/fields/updateExample\"\n      ]\n    }\n  ]\n}\n```\n\nSee [documentation](https://docs.aws.amazon.com/appsync/latest/devguide/security.html#aws-iam-authorization) for more details.\n\nTo make this easier, CDK provides `grant` API.\n\nUse the `grant` function for more granular authorization.\n\n```ts\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\ndeclare const api: appsync.GraphqlApi;\n\napi.grant(role, appsync.IamResource.custom('types/Mutation/fields/updateExample'), 'appsync:GraphQL');\n```\n\n### IamResource\n\nIn order to use the `grant` functions, you need to use the class `IamResource`.\n\n- `IamResource.custom(...arns)` permits custom ARNs and requires an argument.\n\n- `IamResouce.ofType(type, ...fields)` permits ARNs for types and their fields.\n\n- `IamResource.all()` permits ALL resources.\n\n### Generic Permissions\n\nAlternatively, you can use more generic `grant` functions to accomplish the same usage.\n\nThese include:\n\n- grantMutation (use to grant access to Mutation fields)\n- grantQuery (use to grant access to Query fields)\n- grantSubscription (use to grant access to Subscription fields)\n\n```ts\ndeclare const api: appsync.GraphqlApi;\ndeclare const role: iam.Role;\n\n// For generic types\napi.grantMutation(role, 'updateExample');\n\n// For custom types and granular design\napi.grant(role, appsync.IamResource.ofType('Mutation', 'updateExample'), 'appsync:GraphQL');\n```\n\n## Pipeline Resolvers and AppSync Functions\n\nAppSync Functions are local functions that perform certain operations onto a\nbackend data source. Developers can compose operations (Functions) and execute\nthem in sequence with Pipeline Resolvers.\n\n```ts\ndeclare const api: appsync.GraphqlApi;\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n```\n\nAppSync Functions are used in tandem with pipeline resolvers to compose multiple\noperations.\n\n```ts\ndeclare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});\n```\n\nLearn more about Pipeline Resolvers and AppSync Functions [here](https://docs.aws.amazon.com/appsync/latest/devguide/pipeline-resolvers.html).\n\n## Code-First Schema\n\nCDK offers the ability to generate your schema in a code-first approach.\nA code-first approach offers a developer workflow with:\n\n- **modularity**: organizing schema type definitions into different files\n- **reusability**: simplifying down boilerplate/repetitive code\n- **consistency**: resolvers and schema definition will always be synced\n\nThe code-first approach allows for **dynamic** schema generation. You can generate your schema based on variables and templates to reduce code duplication.\n\n### Code-First Example\n\nTo showcase the code-first approach. Let's try to model the following schema segment.\n\n```gql\ninterface Node {\n  id: String\n}\n\ntype Query {\n  allFilms(after: String, first: Int, before: String, last: Int): FilmConnection\n}\n\ntype FilmNode implements Node {\n  filmName: String\n}\n\ntype FilmConnection {\n  edges: [FilmEdge]\n  films: [Film]\n  totalCount: Int\n}\n\ntype FilmEdge {\n  node: Film\n  cursor: String\n}\n```\n\nAbove we see a schema that allows for generating paginated responses. For example,\nwe can query `allFilms(first: 100)` since `FilmConnection` acts as an intermediary\nfor holding `FilmEdges` we can write a resolver to return the first 100 films.\n\nIn a separate file, we can declare our object types and related functions.\nWe will call this file `object-types.ts` and we will have created it in a way that\nallows us to generate other `XxxConnection` and `XxxEdges` in the future.\n\n```ts nofixture\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst pluralize = require('pluralize');\n\nexport const args = {\n  after: appsync.GraphqlType.string(),\n  first: appsync.GraphqlType.int(),\n  before: appsync.GraphqlType.string(),\n  last: appsync.GraphqlType.int(),\n};\n\nexport const Node = new appsync.InterfaceType('Node', {\n  definition: { id: appsync.GraphqlType.string() }\n});\nexport const FilmNode = new appsync.ObjectType('FilmNode', {\n  interfaceTypes: [Node],\n  definition: { filmName: appsync.GraphqlType.string() }\n});\n\nexport function generateEdgeAndConnection(base: appsync.ObjectType) {\n  const edge = new appsync.ObjectType(`${base.name}Edge`, {\n    definition: { node: base.attribute(), cursor: appsync.GraphqlType.string() }\n  });\n  const connection = new appsync.ObjectType(`${base.name}Connection`, {\n    definition: {\n      edges: edge.attribute({ isList: true }),\n      [pluralize(base.name)]: base.attribute({ isList: true }),\n      totalCount: appsync.GraphqlType.int(),\n    }\n  });\n  return { edge: edge, connection: connection };\n}\n```\n\nFinally, we will go to our `cdk-stack` and combine everything together\nto generate our schema.\n\n```ts fixture=with-objects\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\n\nconst objectTypes = [ Node, FilmNode ];\n\nconst filmConnections = generateEdgeAndConnection(FilmNode);\n\napi.addQuery('allFilms', new appsync.ResolvableField({\n  returnType: filmConnections.connection.attribute(),\n  args: args,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));\n\napi.addType(Node);\napi.addType(FilmNode);\napi.addType(filmConnections.edge);\napi.addType(filmConnections.connection);\n```\n\nNotice how we can utilize the `generateEdgeAndConnection` function to generate\nObject Types. In the future, if we wanted to create more Object Types, we can simply\ncreate the base Object Type (i.e. Film) and from there we can generate its respective\n`Connections` and `Edges`.\n\nCheck out a more in-depth example [here](https://github.com/BryanPan342/starwars-code-first).\n\n## GraphQL Types\n\nOne of the benefits of GraphQL is its strongly typed nature. We define the\ntypes within an object, query, mutation, interface, etc. as **GraphQL Types**.\n\nGraphQL Types are the building blocks of types, whether they are scalar, objects,\ninterfaces, etc. GraphQL Types can be:\n\n- [**Scalar Types**](https://docs.aws.amazon.com/appsync/latest/devguide/scalars.html): Id, Int, String, AWSDate, etc.\n- [**Object Types**](#Object-Types): types that you generate (i.e. `demo` from the example above)\n- [**Interface Types**](#Interface-Types): abstract types that define the base implementation of other\nIntermediate Types\n\nMore concretely, GraphQL Types are simply the types appended to variables.\nReferencing the object type `Demo` in the previous example, the GraphQL Types\nis `String!` and is applied to both the names `id` and `version`.\n\n### Directives\n\n`Directives` are attached to a field or type and affect the execution of queries,\nmutations, and types. With AppSync, we use `Directives` to configure authorization.\nCDK provides static functions to add directives to your Schema.\n\n- `Directive.iam()` sets a type or field's authorization to be validated through `Iam`\n- `Directive.apiKey()` sets a type or field's authorization to be validated through a `Api Key`\n- `Directive.oidc()` sets a type or field's authorization to be validated through `OpenID Connect`\n- `Directive.cognito(...groups: string[])` sets a type or field's authorization to be validated\nthrough `Cognito User Pools`\n  - `groups` the name of the cognito groups to give access\n\nTo learn more about authorization and directives, read these docs [here](https://docs.aws.amazon.com/appsync/latest/devguide/security.html).\n\n### Field and Resolvable Fields\n\nWhile `GraphqlType` is a base implementation for GraphQL fields, we have abstractions\non top of `GraphqlType` that provide finer grain support.\n\n### Field\n\n`Field` extends `GraphqlType` and will allow you to define arguments. [**Interface Types**](#Interface-Types) are not resolvable and this class will allow you to define arguments,\nbut not its resolvers.\n\nFor example, if we want to create the following type:\n\n```gql\ntype Node {\n  test(argument: string): String\n}\n```\n\nThe CDK code required would be:\n\n```ts\nconst field = new appsync.Field({\n  returnType: appsync.GraphqlType.string(),\n  args: {\n    argument: appsync.GraphqlType.string(),\n  },\n});\nconst type = new appsync.InterfaceType('Node', {\n  definition: { test: field },\n});\n```\n\n### Resolvable Fields\n\n`ResolvableField` extends `Field` and will allow you to define arguments and its resolvers.\n[**Object Types**](#Object-Types) can have fields that resolve and perform operations on\nyour backend.\n\nYou can also create resolvable fields for object types.\n\n```gql\ntype Info {\n  node(id: String): String\n}\n```\n\nThe CDK code required would be:\n\n```ts\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n```\n\nTo nest resolvers, we can also create top level query types that call upon\nother types. Building off the previous example, if we want the following graphql\ntype definition:\n\n```gql\ntype Query {\n  get(argument: string): Info\n}\n```\n\nThe CDK code required would be:\n\n```ts\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst query = new appsync.ObjectType('Query', {\n  definition: {\n    get: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        argument: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n```\n\nLearn more about fields and resolvers [here](https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-overview.html).\n\n### Intermediate Types\n\nIntermediate Types are defined by Graphql Types and Fields. They have a set of defined\nfields, where each field corresponds to another type in the system. Intermediate\nTypes will be the meat of your GraphQL Schema as they are the types defined by you.\n\nIntermediate Types include:\n\n- [**Interface Types**](#Interface-Types)\n- [**Object Types**](#Object-Types)\n- [**Enum Types**](#Enum-Types)\n- [**Input Types**](#Input-Types)\n- [**Union Types**](#Union-Types)\n\n#### Interface Types\n\n**Interface Types** are abstract types that define the implementation of other\nintermediate types. They are useful for eliminating duplication and can be used\nto generate Object Types with less work.\n\nYou can create Interface Types ***externally***.\n\n```ts\nconst node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n```\n\nTo learn more about **Interface Types**, read the docs [here](https://graphql.org/learn/schema/#interfaces).\n\n#### Object Types\n\n**Object Types** are types that you declare. For example, in the [code-first example](#code-first-example)\nthe `demo` variable is an **Object Type**. **Object Types** are defined by\nGraphQL Types and are only usable when linked to a GraphQL Api.\n\nYou can create Object Types in two ways:\n\n1. Object Types can be created ***externally***.\n\n    ```ts\n    const api = new appsync.GraphqlApi(this, 'Api', {\n      name: 'demo',\n    });\n    const demo = new appsync.ObjectType('Demo', {\n      definition: {\n        id: appsync.GraphqlType.string({ isRequired: true }),\n        version: appsync.GraphqlType.string({ isRequired: true }),\n      },\n    });\n\n    api.addType(demo);\n    ```\n\n    > This method allows for reusability and modularity, ideal for larger projects.\n    For example, imagine moving all Object Type definition outside the stack.\n\n    `object-types.ts` - a file for object type definitions\n\n    ```ts nofixture\n    import * as appsync from '@aws-cdk/aws-appsync';\n    export const demo = new appsync.ObjectType('Demo', {\n      definition: {\n        id: appsync.GraphqlType.string({ isRequired: true }),\n        version: appsync.GraphqlType.string({ isRequired: true }),\n      },\n    });\n    ```\n\n    `cdk-stack.ts` - a file containing our cdk stack\n\n    ```ts fixture=with-objects\n    declare const api: appsync.GraphqlApi;\n    api.addType(demo);\n    ```\n\n2. Object Types can be created ***externally*** from an Interface Type.\n\n    ```ts\n    const node = new appsync.InterfaceType('Node', {\n      definition: {\n        id: appsync.GraphqlType.string({ isRequired: true }),\n      },\n    });\n    const demo = new appsync.ObjectType('Demo', {\n      interfaceTypes: [ node ],\n      definition: {\n        version: appsync.GraphqlType.string({ isRequired: true }),\n      },\n    });\n    ```\n\n    > This method allows for reusability and modularity, ideal for reducing code duplication.\n\nTo learn more about **Object Types**, read the docs [here](https://graphql.org/learn/schema/#object-types-and-fields).\n\n#### Enum Types\n\n**Enum Types** are a special type of Intermediate Type. They restrict a particular\nset of allowed values for other Intermediate Types.\n\n```gql\nenum Episode {\n  NEWHOPE\n  EMPIRE\n  JEDI\n}\n```\n\n> This means that wherever we use the type Episode in our schema, we expect it to\n> be exactly one of NEWHOPE, EMPIRE, or JEDI.\n\nThe above GraphQL Enumeration Type can be expressed in CDK as the following:\n\n```ts\ndeclare const api: appsync.GraphqlApi;\nconst episode = new appsync.EnumType('Episode', {\n  definition: [\n    'NEWHOPE',\n    'EMPIRE',\n    'JEDI',\n  ],\n});\napi.addType(episode);\n```\n\nTo learn more about **Enum Types**, read the docs [here](https://graphql.org/learn/schema/#enumeration-types).\n\n#### Input Types\n\n**Input Types** are special types of Intermediate Types. They give users an\neasy way to pass complex objects for top level Mutation and Queries.\n\n```gql\ninput Review {\n  stars: Int!\n  commentary: String\n}\n```\n\nThe above GraphQL Input Type can be expressed in CDK as the following:\n\n```ts\ndeclare const api: appsync.GraphqlApi;\nconst review = new appsync.InputType('Review', {\n  definition: {\n    stars: appsync.GraphqlType.int({ isRequired: true }),\n    commentary: appsync.GraphqlType.string(),\n  },\n});\napi.addType(review);\n```\n\nTo learn more about **Input Types**, read the docs [here](https://graphql.org/learn/schema/#input-types).\n\n#### Union Types\n\n**Union Types** are a special type of Intermediate Type. They are similar to\nInterface Types, but they cannot specify any common fields between types.\n\n**Note:** the fields of a union type need to be `Object Types`. In other words, you\ncan't create a union type out of interfaces, other unions, or inputs.\n\n```gql\nunion Search = Human | Droid | Starship\n```\n\nThe above GraphQL Union Type encompasses the Object Types of Human, Droid and Starship. It\ncan be expressed in CDK as the following:\n\n```ts\ndeclare const api: appsync.GraphqlApi;\nconst string = appsync.GraphqlType.string();\nconst human = new appsync.ObjectType('Human', { definition: { name: string } });\nconst droid = new appsync.ObjectType('Droid', { definition: { name: string } });\nconst starship = new appsync.ObjectType('Starship', { definition: { name: string } }););\nconst search = new appsync.UnionType('Search', {\n  definition: [ human, droid, starship ],\n});\napi.addType(search);\n```\n\nTo learn more about **Union Types**, read the docs [here](https://graphql.org/learn/schema/#union-types).\n\n### Query\n\nEvery schema requires a top level Query type. By default, the schema will look\nfor the `Object Type` named `Query`. The top level `Query` is the **only** exposed\ntype that users can access to perform `GET` operations on your Api.\n\nTo add fields for these queries, we can simply run the `addQuery` function to add\nto the schema's `Query` type.\n\n```ts\ndeclare const api: appsync.GraphqlApi;\ndeclare const filmConnection: appsync.InterfaceType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst string = appsync.GraphqlType.string();\nconst int = appsync.GraphqlType.int();\napi.addQuery('allFilms', new appsync.ResolvableField({\n  returnType: filmConnection.attribute(),\n  args: { after: string, first: int, before: string, last: int},\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));\n```\n\nTo learn more about top level operations, check out the docs [here](https://docs.aws.amazon.com/appsync/latest/devguide/graphql-overview.html).\n\n### Mutation\n\nEvery schema **can** have a top level Mutation type. By default, the schema will look\nfor the `ObjectType` named `Mutation`. The top level `Mutation` Type is the only exposed\ntype that users can access to perform `mutable` operations on your Api.\n\nTo add fields for these mutations, we can simply run the `addMutation` function to add\nto the schema's `Mutation` type.\n\n```ts\ndeclare const api: appsync.GraphqlApi;\ndeclare const filmNode: appsync.ObjectType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst string = appsync.GraphqlType.string();\nconst int = appsync.GraphqlType.int();\napi.addMutation('addFilm', new appsync.ResolvableField({\n  returnType: filmNode.attribute(),\n  args: { name: string, film_number: int },\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));\n```\n\nTo learn more about top level operations, check out the docs [here](https://docs.aws.amazon.com/appsync/latest/devguide/graphql-overview.html).\n\n### Subscription\n\nEvery schema **can** have a top level Subscription type. The top level `Subscription` Type\nis the only exposed type that users can access to invoke a response to a mutation. `Subscriptions`\nnotify users when a mutation specific mutation is called. This means you can make any data source\nreal time by specify a GraphQL Schema directive on a mutation.\n\n**Note**: The AWS AppSync client SDK automatically handles subscription connection management.\n\nTo add fields for these subscriptions, we can simply run the `addSubscription` function to add\nto the schema's `Subscription` type.\n\n```ts\ndeclare const api: appsync.GraphqlApi;\ndeclare const film: appsync.InterfaceType;\n\napi.addSubscription('addedFilm', new appsync.Field({\n  returnType: film.attribute(),\n  args: { id: appsync.GraphqlType.id({ isRequired: true }) },\n  directives: [appsync.Directive.subscribe('addFilm')],\n}));\n```\n\nTo learn more about top level operations, check out the docs [here](https://docs.aws.amazon.com/appsync/latest/devguide/real-time-data.html).\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-appsync",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.AppSync",
      "packageId": "Amazon.CDK.AWS.AppSync"
    },
    "java": {
      "maven": {
        "artifactId": "appsync",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.appsync"
    },
    "js": {
      "npm": "@aws-cdk/aws-appsync"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-appsync",
      "module": "aws_cdk.aws_appsync"
    }
  },
  "types": {
    "@aws-cdk/aws-appsync.AddFieldOptions": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "The options to add a field to an Intermediate Type.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const field: appsync.Field;\nconst addFieldOptions: appsync.AddFieldOptions = {\n  field: field,\n  fieldName: 'fieldName',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.AddFieldOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/schema-base.ts",
        "line": 79
      },
      "name": "AddFieldOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no IField",
            "remarks": "This option must be configured for Object, Interface,\nInput and Union Types.",
            "stability": "experimental",
            "summary": "The resolvable field to add."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 97
          },
          "name": "field",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.IField"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no fieldName",
            "remarks": "This option must be configured for Object, Interface,\nInput and Enum Types.",
            "stability": "experimental",
            "summary": "The name of the field."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 88
          },
          "name": "fieldName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/schema-base:AddFieldOptions"
    },
    "@aws-cdk/aws-appsync.ApiKeyConfig": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Configuration for API Key authorization in AppSync.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const expiration: cdk.Expiration;\nconst apiKeyConfig: appsync.ApiKeyConfig = {\n  description: 'description',\n  expires: expiration,\n  name: 'name',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.ApiKeyConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 113
      },
      "name": "ApiKeyConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- 'Default API Key created by CDK'",
            "stability": "experimental",
            "summary": "Description of API key."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 123
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 7 days rounded down to nearest hour",
            "remarks": "It must be a minimum of 1 day and a maximum of 365 days from date of creation.\nRounded down to the nearest hour.",
            "stability": "experimental",
            "summary": "The time from creation time after which the API key expires."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 132
          },
          "name": "expires",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Expiration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 'DefaultAPIKey'",
            "stability": "experimental",
            "summary": "Unique name of the API Key."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 118
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:ApiKeyConfig"
    },
    "@aws-cdk/aws-appsync.AppsyncFunction": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::AppSync::FunctionConfiguration",
          "exampleMetadata": "infused"
        },
        "remarks": "Developers can compose operations (Functions)\nand execute them in sequence with Pipeline Resolvers.",
        "stability": "experimental",
        "summary": "AppSync Functions are local functions that perform certain operations onto a backend data source.",
        "example": "declare const api: appsync.GraphqlApi;\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});"
      },
      "fqn": "@aws-cdk/aws-appsync.AppsyncFunction",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/appsync-function.ts",
          "line": 129
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.AppsyncFunctionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-appsync.IAppsyncFunction"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/appsync-function.ts",
        "line": 85
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import Appsync Function from arn."
          },
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 89
          },
          "name": "fromAppsyncFunctionAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.AppsyncFunctionAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.IAppsyncFunction"
            }
          },
          "static": true
        }
      ],
      "name": "AppsyncFunction",
      "properties": [
        {
          "docs": {
            "custom": {
              "attribute": "DataSourceName"
            },
            "stability": "experimental",
            "summary": "the data source of this AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 125
          },
          "name": "dataSource",
          "type": {
            "fqn": "@aws-cdk/aws-appsync.BaseDataSource"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "the ARN of the AppSync function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 113
          },
          "name": "functionArn",
          "overrides": "@aws-cdk/aws-appsync.IAppsyncFunction",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "the ID of the AppSync function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 119
          },
          "name": "functionId",
          "overrides": "@aws-cdk/aws-appsync.IAppsyncFunction",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "Name"
            },
            "stability": "experimental",
            "summary": "the name of this AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 107
          },
          "name": "functionName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync-function:AppsyncFunction"
    },
    "@aws-cdk/aws-appsync.AppsyncFunctionAttributes": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "The attributes for imported AppSync Functions.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst appsyncFunctionAttributes: appsync.AppsyncFunctionAttributes = {\n  functionArn: 'functionArn',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.AppsyncFunctionAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync-function.ts",
        "line": 53
      },
      "name": "AppsyncFunctionAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the ARN of the AppSync function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 57
          },
          "name": "functionArn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync-function:AppsyncFunctionAttributes"
    },
    "@aws-cdk/aws-appsync.AppsyncFunctionProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "the CDK properties for AppSync Functions.",
        "example": "declare const api: appsync.GraphqlApi;\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.AppsyncFunctionProps",
      "interfaces": [
        "@aws-cdk/aws-appsync.BaseAppsyncFunctionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync-function.ts",
        "line": 39
      },
      "name": "AppsyncFunctionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the GraphQL Api linked to this AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 43
          },
          "name": "api",
          "type": {
            "fqn": "@aws-cdk/aws-appsync.IGraphqlApi"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the data source linked to this AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 47
          },
          "name": "dataSource",
          "type": {
            "fqn": "@aws-cdk/aws-appsync.BaseDataSource"
          }
        }
      ],
      "symbolId": "lib/appsync-function:AppsyncFunctionProps"
    },
    "@aws-cdk/aws-appsync.Assign": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "Utility class representing the assigment of a value to an attribute.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst assign = new appsync.Assign('attr', 'arg');",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.Assign",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/key.ts",
          "line": 86
        },
        "parameters": [
          {
            "name": "attr",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "arg",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 85
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders the assignment as a map element."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 98
          },
          "name": "putInMap",
          "parameters": [
            {
              "name": "map",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders the assignment as a VTL string."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 91
          },
          "name": "renderAsAssignment",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Assign",
      "symbolId": "lib/key:Assign"
    },
    "@aws-cdk/aws-appsync.AttributeValues": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "Specifies the attribute value assignments.",
        "example": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.AttributeValues",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/key.ts",
          "line": 196
        },
        "parameters": [
          {
            "name": "container",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "assignments",
            "optional": true,
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@aws-cdk/aws-appsync.Assign"
                },
                "kind": "array"
              }
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 195
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Allows assigning a value to the specified attribute."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 201
          },
          "name": "attribute",
          "parameters": [
            {
              "name": "attr",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.AttributeValuesStep"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders the attribute value assingments to a VTL string."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 216
          },
          "name": "renderTemplate",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders the variables required for `renderTemplate`."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 208
          },
          "name": "renderVariables",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "AttributeValues",
      "symbolId": "lib/key:AttributeValues"
    },
    "@aws-cdk/aws-appsync.AttributeValuesStep": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "Utility class to allow assigning a value to an attribute.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const assign: appsync.Assign;\nconst attributeValuesStep = new appsync.AttributeValuesStep('attr', 'container', [assign]);",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.AttributeValuesStep",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/key.ts",
          "line": 225
        },
        "parameters": [
          {
            "name": "attr",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "container",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "assignments",
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@aws-cdk/aws-appsync.Assign"
                },
                "kind": "array"
              }
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 224
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Assign the value to the current attribute."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 230
          },
          "name": "is",
          "parameters": [
            {
              "name": "val",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.AttributeValues"
            }
          }
        }
      ],
      "name": "AttributeValuesStep",
      "symbolId": "lib/key:AttributeValuesStep"
    },
    "@aws-cdk/aws-appsync.AuthorizationConfig": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Configuration of the API authorization modes.",
        "example": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.AuthorizationConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 199
      },
      "name": "AuthorizationConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No other modes",
            "stability": "experimental",
            "summary": "Additional authorization modes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 212
          },
          "name": "additionalAuthorizationModes",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.AuthorizationMode"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- API Key authorization",
            "stability": "experimental",
            "summary": "Optional authorization configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 205
          },
          "name": "defaultAuthorization",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.AuthorizationMode"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:AuthorizationConfig"
    },
    "@aws-cdk/aws-appsync.AuthorizationMode": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Interface to specify default or additional authorization(s).",
        "example": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.AuthorizationMode",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 43
      },
      "name": "AuthorizationMode",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- `AuthorizationType.API_KEY`",
            "see": "https://docs.aws.amazon.com/appsync/latest/devguide/security.html",
            "stability": "experimental",
            "summary": "One of possible four values AppSync supports."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 51
          },
          "name": "authorizationType",
          "type": {
            "fqn": "@aws-cdk/aws-appsync.AuthorizationType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- name: 'DefaultAPIKey' | description: 'Default API Key created by CDK'",
            "stability": "experimental",
            "summary": "If authorizationType is `AuthorizationType.API_KEY`, this option can be configured."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 61
          },
          "name": "apiKeyConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.ApiKeyConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "experimental",
            "summary": "If authorizationType is `AuthorizationType.LAMBDA`, this option is required."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 71
          },
          "name": "lambdaAuthorizerConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.LambdaAuthorizerConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "experimental",
            "summary": "If authorizationType is `AuthorizationType.OIDC`, this option is required."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 66
          },
          "name": "openIdConnectConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.OpenIdConnectConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "experimental",
            "summary": "If authorizationType is `AuthorizationType.USER_POOL`, this option is required."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 56
          },
          "name": "userPoolConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.UserPoolConfig"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:AuthorizationMode"
    },
    "@aws-cdk/aws-appsync.AuthorizationType": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "enum with all possible values for AppSync authorization type.",
        "example": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.AuthorizationType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 17
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "API Key authorization type."
          },
          "name": "API_KEY"
        },
        {
          "docs": {
            "remarks": "Can be used with Cognito Identity Pool federated credentials",
            "stability": "experimental",
            "summary": "AWS IAM authorization type."
          },
          "name": "IAM"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Cognito User Pool authorization type."
          },
          "name": "USER_POOL"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "OpenID Connect authorization type."
          },
          "name": "OIDC"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Lambda authorization type."
          },
          "name": "LAMBDA"
        }
      ],
      "name": "AuthorizationType",
      "symbolId": "lib/graphqlapi:AuthorizationType"
    },
    "@aws-cdk/aws-appsync.AwsIamConfig": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "The authorization config in case the HTTP endpoint requires authorization.",
        "example": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.AwsIamConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 237
      },
      "name": "AwsIamConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The signing region for AWS IAM authorization."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 241
          },
          "name": "signingRegion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The signing service name for AWS IAM authorization."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 246
          },
          "name": "signingServiceName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/data-source:AwsIamConfig"
    },
    "@aws-cdk/aws-appsync.BackedDataSource": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/aws-appsync.BaseDataSource",
      "docs": {
        "remarks": "Do not use directly but use subclasses for resource backed datasources",
        "stability": "experimental",
        "summary": "Abstract AppSync datasource implementation."
      },
      "fqn": "@aws-cdk/aws-appsync.BackedDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 167
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.BackedDataSourceProps"
            }
          },
          {
            "name": "extended",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.ExtendedDataSourceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 161
      },
      "name": "BackedDataSource",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "the principal of the data source to be IGrantable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 165
          },
          "name": "grantPrincipal",
          "overrides": "@aws-cdk/aws-iam.IGrantable",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          }
        }
      ],
      "symbolId": "lib/data-source:BackedDataSource"
    },
    "@aws-cdk/aws-appsync.BackedDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "properties for an AppSync datasource backed by a resource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\nconst backedDataSourceProps: appsync.BackedDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.BackedDataSourceProps",
      "interfaces": [
        "@aws-cdk/aws-appsync.BaseDataSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 44
      },
      "name": "BackedDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "-  Create a new role",
            "stability": "experimental",
            "summary": "The IAM service role to be assumed by AppSync to interact with the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 50
          },
          "name": "serviceRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        }
      ],
      "symbolId": "lib/data-source:BackedDataSourceProps"
    },
    "@aws-cdk/aws-appsync.BaseAppsyncFunctionProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "the base properties for AppSync Functions.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const mappingTemplate: appsync.MappingTemplate;\nconst baseAppsyncFunctionProps: appsync.BaseAppsyncFunctionProps = {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  requestMappingTemplate: mappingTemplate,\n  responseMappingTemplate: mappingTemplate,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.BaseAppsyncFunctionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync-function.ts",
        "line": 11
      },
      "name": "BaseAppsyncFunctionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the name of the AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 15
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no description",
            "stability": "experimental",
            "summary": "the description for this AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 21
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no request mapping template",
            "stability": "experimental",
            "summary": "the request mapping template for the AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 27
          },
          "name": "requestMappingTemplate",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no response mapping template",
            "stability": "experimental",
            "summary": "the response mapping template for the AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 33
          },
          "name": "responseMappingTemplate",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
          }
        }
      ],
      "symbolId": "lib/appsync-function:BaseAppsyncFunctionProps"
    },
    "@aws-cdk/aws-appsync.BaseDataSource": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "remarks": "Do not use directly but use subclasses for concrete datasources",
        "stability": "experimental",
        "summary": "Abstract AppSync datasource implementation.",
        "example": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.BaseDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 116
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.BackedDataSourceProps"
            }
          },
          {
            "name": "extended",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.ExtendedDataSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 103
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "creates a new appsync function for this datasource and API using the given properties."
          },
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 149
          },
          "name": "createFunction",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseAppsyncFunctionProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.AppsyncFunction"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "creates a new resolver for this datasource and API using the given properties."
          },
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 138
          },
          "name": "createResolver",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseResolverProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.Resolver"
            }
          }
        }
      ],
      "name": "BaseDataSource",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "the underlying CFN data source resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 111
          },
          "name": "ds",
          "type": {
            "fqn": "@aws-cdk/aws-appsync.CfnDataSource"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the name of the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 107
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 113
          },
          "name": "api",
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.IGraphqlApi"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 114
          },
          "name": "serviceRole",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        }
      ],
      "symbolId": "lib/data-source:BaseDataSource"
    },
    "@aws-cdk/aws-appsync.BaseDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Base properties for an AppSync datasource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\nconst baseDataSourceProps: appsync.BaseDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.BaseDataSourceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 22
      },
      "name": "BaseDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The API to attach this data source to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 26
          },
          "name": "api",
          "type": {
            "fqn": "@aws-cdk/aws-appsync.IGraphqlApi"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "experimental",
            "summary": "the description of the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 38
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- id of data source",
            "stability": "experimental",
            "summary": "The name of the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 32
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/data-source:BaseDataSourceProps"
    },
    "@aws-cdk/aws-appsync.BaseResolverProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Basic properties for an AppSync resolver.",
        "example": "// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.BaseResolverProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/resolver.ts",
        "line": 17
      },
      "name": "BaseResolverProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "name of the GraphQL field in the given type this resolver is attached to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 25
          },
          "name": "fieldName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "name of the GraphQL type this resolver is attached to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 21
          },
          "name": "typeName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No caching configuration",
            "stability": "experimental",
            "summary": "The caching configuration for this resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 50
          },
          "name": "cachingConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.CachingConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no pipeline resolver configuration\nAn empty array | undefined sets resolver to be of kind, unit",
            "stability": "experimental",
            "summary": "configuration of the pipeline resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 32
          },
          "name": "pipelineConfig",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.IAppsyncFunction"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No mapping template",
            "stability": "experimental",
            "summary": "The request mapping template for this resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 38
          },
          "name": "requestMappingTemplate",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No mapping template",
            "stability": "experimental",
            "summary": "The response mapping template for this resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 44
          },
          "name": "responseMappingTemplate",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
          }
        }
      ],
      "symbolId": "lib/resolver:BaseResolverProps"
    },
    "@aws-cdk/aws-appsync.BaseTypeOptions": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "option": "isRequiredList - is this attribute a non-nullable list",
          "exampleMetadata": "infused"
        },
        "stability": "experimental",
        "summary": "Base options for GraphQL Types.",
        "example": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);"
      },
      "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/schema-field.ts",
        "line": 15
      },
      "name": "BaseTypeOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "experimental",
            "summary": "property determining if this attribute is a list i.e. if true, attribute would be [Type]."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 22
          },
          "name": "isList",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "experimental",
            "summary": "property determining if this attribute is non-nullable i.e. if true, attribute would be Type!"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 30
          },
          "name": "isRequired",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "experimental",
            "summary": "property determining if this attribute is a non-nullable list i.e. if true, attribute would be [ Type ]! or if isRequired true, attribe would be [ Type! ]!"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 39
          },
          "name": "isRequiredList",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/schema-field:BaseTypeOptions"
    },
    "@aws-cdk/aws-appsync.CachingConfig": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "CachingConfig for AppSync resolvers.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as cdk from '@aws-cdk/core';\nconst cachingConfig: appsync.CachingConfig = {\n  ttl: cdk.Duration.minutes(30),\n\n  // the properties below are optional\n  cachingKeys: ['cachingKeys'],\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.CachingConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/caching-config.ts",
        "line": 6
      },
      "name": "CachingConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Valid values are between 1 and 3600 seconds.",
            "stability": "experimental",
            "summary": "The TTL in seconds for a resolver that has caching enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/caching-config.ts",
            "line": 20
          },
          "name": "ttl",
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No caching keys",
            "remarks": "Valid values are entries from the $context.arguments, $context.source, and $context.identity maps.",
            "stability": "experimental",
            "summary": "The caching keys for a resolver that has caching enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/caching-config.ts",
            "line": 13
          },
          "name": "cachingKeys",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/caching-config:CachingConfig"
    },
    "@aws-cdk/aws-appsync.CfnApiCache": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::AppSync::ApiCache",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::AppSync::ApiCache` resource represents the input of a `CreateApiCache` operation.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::AppSync::ApiCache`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnApiCache = new appsync.CfnApiCache(this, 'MyCfnApiCache', {\n  apiCachingBehavior: 'apiCachingBehavior',\n  apiId: 'apiId',\n  ttl: 123,\n  type: 'type',\n\n  // the properties below are optional\n  atRestEncryptionEnabled: false,\n  transitEncryptionEnabled: false,\n});"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnApiCache",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::AppSync::ApiCache`."
        },
        "locationInModule": {
          "filename": "lib/appsync.generated.ts",
          "line": 264
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.CfnApiCacheProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 164
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 285
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 301
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnApiCache",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 168
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 290
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-apicachingbehavior"
            },
            "remarks": "- *FULL_REQUEST_CACHING* : All requests are fully cached.\n- *PER_RESOLVER_CACHING* : Individual resolvers that you specify are cached.",
            "stability": "external",
            "summary": "Caching behavior."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 197
          },
          "name": "apiCachingBehavior",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-apiid"
            },
            "stability": "external",
            "summary": "The GraphQL API ID."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 204
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-ttl"
            },
            "remarks": "Valid values are 1–3,600 seconds.",
            "stability": "external",
            "summary": "TTL in seconds for cache entries."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 213
          },
          "name": "ttl",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-type"
            },
            "remarks": "- `SMALL`\n- `MEDIUM`\n- `LARGE`\n- `XLARGE`\n- `LARGE_2X`\n- `LARGE_4X`\n- `LARGE_8X` (not available in all regions)\n- `LARGE_12X`\n\nHistorically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.\n\nThe following legacy instance types are available, but their use is discouraged:\n\n- *T2_SMALL* : A t2.small instance type.\n- *T2_MEDIUM* : A t2.medium instance type.\n- *R4_LARGE* : A r4.large instance type.\n- *R4_XLARGE* : A r4.xlarge instance type.\n- *R4_2XLARGE* : A r4.2xlarge instance type.\n- *R4_4XLARGE* : A r4.4xlarge instance type.\n- *R4_8XLARGE* : A r4.8xlarge instance type.",
            "stability": "external",
            "summary": "The cache instance type. Valid values are."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 241
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-atrestencryptionenabled"
            },
            "remarks": "You cannot update this setting after creation.",
            "stability": "external",
            "summary": "At-rest encryption flag for cache."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 248
          },
          "name": "atRestEncryptionEnabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-transitencryptionenabled"
            },
            "remarks": "You cannot update this setting after creation.",
            "stability": "external",
            "summary": "Transit encryption flag when connecting to cache."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 255
          },
          "name": "transitEncryptionEnabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnApiCache"
    },
    "@aws-cdk/aws-appsync.CfnApiCacheProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnApiCache`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnApiCacheProps: appsync.CfnApiCacheProps = {\n  apiCachingBehavior: 'apiCachingBehavior',\n  apiId: 'apiId',\n  ttl: 123,\n  type: 'type',\n\n  // the properties below are optional\n  atRestEncryptionEnabled: false,\n  transitEncryptionEnabled: false,\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnApiCacheProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 19
      },
      "name": "CfnApiCacheProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-apicachingbehavior"
            },
            "remarks": "- *FULL_REQUEST_CACHING* : All requests are fully cached.\n- *PER_RESOLVER_CACHING* : Individual resolvers that you specify are cached.",
            "stability": "external",
            "summary": "Caching behavior."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 29
          },
          "name": "apiCachingBehavior",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-apiid"
            },
            "stability": "external",
            "summary": "The GraphQL API ID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 36
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-ttl"
            },
            "remarks": "Valid values are 1–3,600 seconds.",
            "stability": "external",
            "summary": "TTL in seconds for cache entries."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 45
          },
          "name": "ttl",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-type"
            },
            "remarks": "- `SMALL`\n- `MEDIUM`\n- `LARGE`\n- `XLARGE`\n- `LARGE_2X`\n- `LARGE_4X`\n- `LARGE_8X` (not available in all regions)\n- `LARGE_12X`\n\nHistorically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.\n\nThe following legacy instance types are available, but their use is discouraged:\n\n- *T2_SMALL* : A t2.small instance type.\n- *T2_MEDIUM* : A t2.medium instance type.\n- *R4_LARGE* : A r4.large instance type.\n- *R4_XLARGE* : A r4.xlarge instance type.\n- *R4_2XLARGE* : A r4.2xlarge instance type.\n- *R4_4XLARGE* : A r4.4xlarge instance type.\n- *R4_8XLARGE* : A r4.8xlarge instance type.",
            "stability": "external",
            "summary": "The cache instance type. Valid values are."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 73
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-atrestencryptionenabled"
            },
            "remarks": "You cannot update this setting after creation.",
            "stability": "external",
            "summary": "At-rest encryption flag for cache."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 80
          },
          "name": "atRestEncryptionEnabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html#cfn-appsync-apicache-transitencryptionenabled"
            },
            "remarks": "You cannot update this setting after creation.",
            "stability": "external",
            "summary": "Transit encryption flag when connecting to cache."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 87
          },
          "name": "transitEncryptionEnabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnApiCacheProps"
    },
    "@aws-cdk/aws-appsync.CfnApiKey": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::AppSync::ApiKey",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apikey.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::AppSync::ApiKey` resource creates a unique key that you can distribute to clients who are executing GraphQL operations with AWS AppSync that require an API key.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::AppSync::ApiKey`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnApiKey = new appsync.CfnApiKey(this, 'MyCfnApiKey', {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  apiKeyId: 'apiKeyId',\n  description: 'description',\n  expires: 123,\n});"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnApiKey",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::AppSync::ApiKey`."
        },
        "locationInModule": {
          "filename": "lib/appsync.generated.ts",
          "line": 482
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.CfnApiKeyProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 410
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 500
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 514
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnApiKey",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 414
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "ApiKey"
            },
            "stability": "external",
            "summary": "The API key."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 439
          },
          "name": "attrApiKey",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the API key, such as `arn:aws:appsync:us-east-1:123456789012:apis/graphqlapiid/apikey/apikeya1bzhi` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 445
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 505
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apikey.html#cfn-appsync-apikey-apiid"
            },
            "stability": "external",
            "summary": "Unique AWS AppSync GraphQL API ID for this API key."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 452
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apikey.html#cfn-appsync-apikey-apikeyid"
            },
            "stability": "external",
            "summary": "The API key ID."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 459
          },
          "name": "apiKeyId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apikey.html#cfn-appsync-apikey-description"
            },
            "stability": "external",
            "summary": "Unique description of your API key."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 466
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apikey.html#cfn-appsync-apikey-expires"
            },
            "remarks": "The date is represented as seconds since the epoch, rounded down to the nearest hour.",
            "stability": "external",
            "summary": "The time after which the API key expires."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 473
          },
          "name": "expires",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnApiKey"
    },
    "@aws-cdk/aws-appsync.CfnApiKeyProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apikey.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnApiKey`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnApiKeyProps: appsync.CfnApiKeyProps = {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  apiKeyId: 'apiKeyId',\n  description: 'description',\n  expires: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnApiKeyProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 314
      },
      "name": "CfnApiKeyProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apikey.html#cfn-appsync-apikey-apiid"
            },
            "stability": "external",
            "summary": "Unique AWS AppSync GraphQL API ID for this API key."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 321
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apikey.html#cfn-appsync-apikey-apikeyid"
            },
            "stability": "external",
            "summary": "The API key ID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 328
          },
          "name": "apiKeyId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apikey.html#cfn-appsync-apikey-description"
            },
            "stability": "external",
            "summary": "Unique description of your API key."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 335
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apikey.html#cfn-appsync-apikey-expires"
            },
            "remarks": "The date is represented as seconds since the epoch, rounded down to the nearest hour.",
            "stability": "external",
            "summary": "The time after which the API key expires."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 342
          },
          "name": "expires",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnApiKeyProps"
    },
    "@aws-cdk/aws-appsync.CfnDataSource": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::AppSync::DataSource",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::AppSync::DataSource` resource creates data sources for resolvers in AWS AppSync to connect to, such as Amazon DynamoDB , AWS Lambda , and Amazon OpenSearch Service . Resolvers use these data sources to fetch data when clients make GraphQL calls.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::AppSync::DataSource`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnDataSource = new appsync.CfnDataSource(this, 'MyCfnDataSource', {\n  apiId: 'apiId',\n  name: 'name',\n  type: 'type',\n\n  // the properties below are optional\n  description: 'description',\n  dynamoDbConfig: {\n    awsRegion: 'awsRegion',\n    tableName: 'tableName',\n\n    // the properties below are optional\n    deltaSyncConfig: {\n      baseTableTtl: 'baseTableTtl',\n      deltaSyncTableName: 'deltaSyncTableName',\n      deltaSyncTableTtl: 'deltaSyncTableTtl',\n    },\n    useCallerCredentials: false,\n    versioned: false,\n  },\n  elasticsearchConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  httpConfig: {\n    endpoint: 'endpoint',\n\n    // the properties below are optional\n    authorizationConfig: {\n      authorizationType: 'authorizationType',\n\n      // the properties below are optional\n      awsIamConfig: {\n        signingRegion: 'signingRegion',\n        signingServiceName: 'signingServiceName',\n      },\n    },\n  },\n  lambdaConfig: {\n    lambdaFunctionArn: 'lambdaFunctionArn',\n  },\n  openSearchServiceConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  relationalDatabaseConfig: {\n    relationalDatabaseSourceType: 'relationalDatabaseSourceType',\n\n    // the properties below are optional\n    rdsHttpEndpointConfig: {\n      awsRegion: 'awsRegion',\n      awsSecretStoreArn: 'awsSecretStoreArn',\n      dbClusterIdentifier: 'dbClusterIdentifier',\n\n      // the properties below are optional\n      databaseName: 'databaseName',\n      schema: 'schema',\n    },\n  },\n  serviceRoleArn: 'serviceRoleArn',\n});"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnDataSource",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::AppSync::DataSource`."
        },
        "locationInModule": {
          "filename": "lib/appsync.generated.ts",
          "line": 840
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.CfnDataSourceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 707
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 867
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 888
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnDataSource",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 711
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "DataSourceArn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the API key, such as `arn:aws:appsync:us-east-1:123456789012:apis/graphqlapiid/datasources/datasourcename` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 736
          },
          "name": "attrDataSourceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Name"
            },
            "stability": "external",
            "summary": "Friendly name for you to identify your AWS AppSync data source after creation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 742
          },
          "name": "attrName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 872
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-apiid"
            },
            "stability": "external",
            "summary": "Unique AWS AppSync GraphQL API identifier where this data source will be created."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 749
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-name"
            },
            "stability": "external",
            "summary": "Friendly name for you to identify your AppSync data source after creation."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 756
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-type"
            },
            "remarks": "- *AWS_LAMBDA* : The data source is an AWS Lambda function.\n- *AMAZON_DYNAMODB* : The data source is an Amazon DynamoDB table.\n- *AMAZON_ELASTICSEARCH* : The data source is an Amazon OpenSearch Service domain.\n- *AMAZON_OPENSEARCH_SERVICE* : The data source is an Amazon OpenSearch Service domain.\n- *NONE* : There is no data source. This type is used when you wish to invoke a GraphQL operation without connecting to a data source, such as performing data transformation with resolvers or triggering a subscription to be invoked from a mutation.\n- *HTTP* : The data source is an HTTP endpoint.\n- *RELATIONAL_DATABASE* : The data source is a relational database.",
            "stability": "external",
            "summary": "The type of the data source."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 771
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-description"
            },
            "stability": "external",
            "summary": "The description of the data source."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 778
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-dynamodbconfig"
            },
            "stability": "external",
            "summary": "AWS Region and TableName for an Amazon DynamoDB table in your account."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 785
          },
          "name": "dynamoDbConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.DynamoDBConfigProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-elasticsearchconfig"
            },
            "remarks": "As of September 2021, Amazon Elasticsearch Service is Amazon OpenSearch Service . This property is deprecated. For new data sources, use *OpenSearchServiceConfig* to specify an OpenSearch Service data source.",
            "stability": "external",
            "summary": "AWS Region and Endpoints for an Amazon OpenSearch Service domain in your account."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 794
          },
          "name": "elasticsearchConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.ElasticsearchConfigProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-httpconfig"
            },
            "stability": "external",
            "summary": "Endpoints for an HTTP data source."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 801
          },
          "name": "httpConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.HttpConfigProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-lambdaconfig"
            },
            "remarks": "This can be the ARN of a Lambda function that exists in the current account or in another account.",
            "stability": "external",
            "summary": "An ARN of a Lambda function in valid ARN format."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 808
          },
          "name": "lambdaConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.LambdaConfigProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-opensearchserviceconfig"
            },
            "stability": "external",
            "summary": "AWS Region and Endpoints for an Amazon OpenSearch Service domain in your account."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 815
          },
          "name": "openSearchServiceConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.OpenSearchServiceConfigProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-relationaldatabaseconfig"
            },
            "stability": "external",
            "summary": "Relational Database configuration of the relational database data source."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 822
          },
          "name": "relationalDatabaseConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.RelationalDatabaseConfigProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-servicerolearn"
            },
            "remarks": "The system assumes this role when accessing the data source.\n\nRequired if `Type` is specified as `AWS_LAMBDA` , `AMAZON_DYNAMODB` , `AMAZON_ELASTICSEARCH` , or `AMAZON_OPENSEARCH_SERVICE` .",
            "stability": "external",
            "summary": "The AWS Identity and Access Management service role ARN for the data source."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 831
          },
          "name": "serviceRoleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnDataSource"
    },
    "@aws-cdk/aws-appsync.CfnDataSource.AuthorizationConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-authorizationconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "`AuthorizationConfig` is a property of the [AWS AppSync DataSource HttpConfig](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-httpconfig.html) property type.",
        "stability": "external",
        "summary": "The `AuthorizationConfig` property type specifies the authorization type and configuration for an AWS AppSync http data source.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst authorizationConfigProperty: appsync.CfnDataSource.AuthorizationConfigProperty = {\n  authorizationType: 'authorizationType',\n\n  // the properties below are optional\n  awsIamConfig: {\n    signingRegion: 'signingRegion',\n    signingServiceName: 'signingServiceName',\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnDataSource.AuthorizationConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 904
      },
      "name": "AuthorizationConfigProperty",
      "namespace": "CfnDataSource",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-authorizationconfig.html#cfn-appsync-datasource-authorizationconfig-authorizationtype"
            },
            "remarks": "- *AWS_IAM* : The authorization type is Signature Version 4 (SigV4).",
            "stability": "external",
            "summary": "The authorization type that the HTTP endpoint requires."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 912
          },
          "name": "authorizationType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-authorizationconfig.html#cfn-appsync-datasource-authorizationconfig-awsiamconfig"
            },
            "stability": "external",
            "summary": "The AWS Identity and Access Management settings."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 918
          },
          "name": "awsIamConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.AwsIamConfigProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnDataSource.AuthorizationConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnDataSource.AwsIamConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-awsiamconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "`AwsIamConfig` is a property of the [AWS AppSync DataSource AuthorizationConfig](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-httpconfig-authorizationconfig.html) resource.",
        "stability": "external",
        "summary": "Use the `AwsIamConfig` property type to specify `AwsIamConfig` for a AWS AppSync authorizaton.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst awsIamConfigProperty: appsync.CfnDataSource.AwsIamConfigProperty = {\n  signingRegion: 'signingRegion',\n  signingServiceName: 'signingServiceName',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnDataSource.AwsIamConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 985
      },
      "name": "AwsIamConfigProperty",
      "namespace": "CfnDataSource",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-awsiamconfig.html#cfn-appsync-datasource-awsiamconfig-signingregion"
            },
            "stability": "external",
            "summary": "The signing Region for AWS Identity and Access Management authorization."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 991
          },
          "name": "signingRegion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-awsiamconfig.html#cfn-appsync-datasource-awsiamconfig-signingservicename"
            },
            "stability": "external",
            "summary": "The signing service name for AWS Identity and Access Management authorization."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 997
          },
          "name": "signingServiceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnDataSource.AwsIamConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnDataSource.DeltaSyncConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-deltasyncconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Describes a Delta Sync configuration.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst deltaSyncConfigProperty: appsync.CfnDataSource.DeltaSyncConfigProperty = {\n  baseTableTtl: 'baseTableTtl',\n  deltaSyncTableName: 'deltaSyncTableName',\n  deltaSyncTableTtl: 'deltaSyncTableTtl',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnDataSource.DeltaSyncConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 1061
      },
      "name": "DeltaSyncConfigProperty",
      "namespace": "CfnDataSource",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-deltasyncconfig.html#cfn-appsync-datasource-deltasyncconfig-basetablettl"
            },
            "stability": "external",
            "summary": "The number of minutes that an Item is stored in the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1067
          },
          "name": "baseTableTtl",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-deltasyncconfig.html#cfn-appsync-datasource-deltasyncconfig-deltasynctablename"
            },
            "stability": "external",
            "summary": "The Delta Sync table name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1073
          },
          "name": "deltaSyncTableName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-deltasyncconfig.html#cfn-appsync-datasource-deltasyncconfig-deltasynctablettl"
            },
            "stability": "external",
            "summary": "The number of minutes that a Delta Sync log entry is stored in the Delta Sync table."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1079
          },
          "name": "deltaSyncTableTtl",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnDataSource.DeltaSyncConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnDataSource.DynamoDBConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-dynamodbconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "`DynamoDBConfig` is a property of the [AWS::AppSync::DataSource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html) property type.",
        "stability": "external",
        "summary": "The `DynamoDBConfig` property type specifies the `AwsRegion` and `TableName` for an Amazon DynamoDB table in your account for an AWS AppSync data source.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst dynamoDBConfigProperty: appsync.CfnDataSource.DynamoDBConfigProperty = {\n  awsRegion: 'awsRegion',\n  tableName: 'tableName',\n\n  // the properties below are optional\n  deltaSyncConfig: {\n    baseTableTtl: 'baseTableTtl',\n    deltaSyncTableName: 'deltaSyncTableName',\n    deltaSyncTableTtl: 'deltaSyncTableTtl',\n  },\n  useCallerCredentials: false,\n  versioned: false,\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnDataSource.DynamoDBConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 1151
      },
      "name": "DynamoDBConfigProperty",
      "namespace": "CfnDataSource",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-dynamodbconfig.html#cfn-appsync-datasource-dynamodbconfig-awsregion"
            },
            "stability": "external",
            "summary": "The AWS Region."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1157
          },
          "name": "awsRegion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-dynamodbconfig.html#cfn-appsync-datasource-dynamodbconfig-tablename"
            },
            "stability": "external",
            "summary": "The table name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1169
          },
          "name": "tableName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-dynamodbconfig.html#cfn-appsync-datasource-dynamodbconfig-deltasyncconfig"
            },
            "stability": "external",
            "summary": "The `DeltaSyncConfig` for a versioned datasource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1163
          },
          "name": "deltaSyncConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.DeltaSyncConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-dynamodbconfig.html#cfn-appsync-datasource-dynamodbconfig-usecallercredentials"
            },
            "stability": "external",
            "summary": "Set to `TRUE` to use AWS Identity and Access Management with this data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1175
          },
          "name": "useCallerCredentials",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-dynamodbconfig.html#cfn-appsync-datasource-dynamodbconfig-versioned"
            },
            "stability": "external",
            "summary": "Set to TRUE to use Conflict Detection and Resolution with this data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1181
          },
          "name": "versioned",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnDataSource.DynamoDBConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnDataSource.ElasticsearchConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-elasticsearchconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "ElasticsearchConfig is a property of the [AWS::AppSync::DataSource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html) property type.\n\nAs of September 2021, Amazon Elasticsearch Service is Amazon OpenSearch Service . This property is deprecated. For new data sources, use *OpenSearchServiceConfig* to specify an OpenSearch Service data source.",
        "stability": "external",
        "summary": "The `ElasticsearchConfig` property type specifies the `AwsRegion` and `Endpoints` for an Amazon OpenSearch Service domain in your account for an AWS AppSync data source.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst elasticsearchConfigProperty: appsync.CfnDataSource.ElasticsearchConfigProperty = {\n  awsRegion: 'awsRegion',\n  endpoint: 'endpoint',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnDataSource.ElasticsearchConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 1260
      },
      "name": "ElasticsearchConfigProperty",
      "namespace": "CfnDataSource",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-elasticsearchconfig.html#cfn-appsync-datasource-elasticsearchconfig-awsregion"
            },
            "stability": "external",
            "summary": "The AWS Region."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1266
          },
          "name": "awsRegion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-elasticsearchconfig.html#cfn-appsync-datasource-elasticsearchconfig-endpoint"
            },
            "stability": "external",
            "summary": "The endpoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1272
          },
          "name": "endpoint",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnDataSource.ElasticsearchConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnDataSource.HttpConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-httpconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "`HttpConfig` is a property of the [AWS::AppSync::DataSource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html) resource.",
        "stability": "external",
        "summary": "Use the `HttpConfig` property type to specify `HttpConfig` for an AWS AppSync data source.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst httpConfigProperty: appsync.CfnDataSource.HttpConfigProperty = {\n  endpoint: 'endpoint',\n\n  // the properties below are optional\n  authorizationConfig: {\n    authorizationType: 'authorizationType',\n\n    // the properties below are optional\n    awsIamConfig: {\n      signingRegion: 'signingRegion',\n      signingServiceName: 'signingServiceName',\n    },\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnDataSource.HttpConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 1340
      },
      "name": "HttpConfigProperty",
      "namespace": "CfnDataSource",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-httpconfig.html#cfn-appsync-datasource-httpconfig-endpoint"
            },
            "stability": "external",
            "summary": "The endpoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1352
          },
          "name": "endpoint",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-httpconfig.html#cfn-appsync-datasource-httpconfig-authorizationconfig"
            },
            "stability": "external",
            "summary": "The authorization configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1346
          },
          "name": "authorizationConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.AuthorizationConfigProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnDataSource.HttpConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnDataSource.LambdaConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-lambdaconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "`LambdaConfig` is a property of the [AWS::AppSync::DataSource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html) property type.",
        "stability": "external",
        "summary": "The `LambdaConfig` property type specifies the Lambda function ARN for an AWS AppSync data source.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst lambdaConfigProperty: appsync.CfnDataSource.LambdaConfigProperty = {\n  lambdaFunctionArn: 'lambdaFunctionArn',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnDataSource.LambdaConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 1419
      },
      "name": "LambdaConfigProperty",
      "namespace": "CfnDataSource",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-lambdaconfig.html#cfn-appsync-datasource-lambdaconfig-lambdafunctionarn"
            },
            "stability": "external",
            "summary": "The ARN for the Lambda function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1425
          },
          "name": "lambdaFunctionArn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnDataSource.LambdaConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnDataSource.OpenSearchServiceConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-opensearchserviceconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "`OpenSearchServiceConfig` is a property of the [AWS::AppSync::DataSource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html) property type.",
        "stability": "external",
        "summary": "The `OpenSearchServiceConfig` property type specifies the `AwsRegion` and `Endpoints` for an Amazon OpenSearch Service domain in your account for an AWS AppSync data source.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst openSearchServiceConfigProperty: appsync.CfnDataSource.OpenSearchServiceConfigProperty = {\n  awsRegion: 'awsRegion',\n  endpoint: 'endpoint',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnDataSource.OpenSearchServiceConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 1489
      },
      "name": "OpenSearchServiceConfigProperty",
      "namespace": "CfnDataSource",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-opensearchserviceconfig.html#cfn-appsync-datasource-opensearchserviceconfig-awsregion"
            },
            "stability": "external",
            "summary": "The AWS Region."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1495
          },
          "name": "awsRegion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-opensearchserviceconfig.html#cfn-appsync-datasource-opensearchserviceconfig-endpoint"
            },
            "stability": "external",
            "summary": "The endpoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1501
          },
          "name": "endpoint",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnDataSource.OpenSearchServiceConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnDataSource.RdsHttpEndpointConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-rdshttpendpointconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "`RdsHttpEndpointConfig` is a property of the [AWS AppSync DataSource RelationalDatabaseConfig](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-relationaldatabaseconfig.html) resource.",
        "stability": "external",
        "summary": "Use the `RdsHttpEndpointConfig` property type to specify the `RdsHttpEndpoint` for an AWS AppSync relational database.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst rdsHttpEndpointConfigProperty: appsync.CfnDataSource.RdsHttpEndpointConfigProperty = {\n  awsRegion: 'awsRegion',\n  awsSecretStoreArn: 'awsSecretStoreArn',\n  dbClusterIdentifier: 'dbClusterIdentifier',\n\n  // the properties below are optional\n  databaseName: 'databaseName',\n  schema: 'schema',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnDataSource.RdsHttpEndpointConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 1569
      },
      "name": "RdsHttpEndpointConfigProperty",
      "namespace": "CfnDataSource",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-rdshttpendpointconfig.html#cfn-appsync-datasource-rdshttpendpointconfig-awsregion"
            },
            "stability": "external",
            "summary": "AWS Region for RDS HTTP endpoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1575
          },
          "name": "awsRegion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-rdshttpendpointconfig.html#cfn-appsync-datasource-rdshttpendpointconfig-awssecretstorearn"
            },
            "stability": "external",
            "summary": "The ARN for database credentials stored in AWS Secrets Manager ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1581
          },
          "name": "awsSecretStoreArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-rdshttpendpointconfig.html#cfn-appsync-datasource-rdshttpendpointconfig-dbclusteridentifier"
            },
            "stability": "external",
            "summary": "Amazon RDS cluster Amazon Resource Name (ARN)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1593
          },
          "name": "dbClusterIdentifier",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-rdshttpendpointconfig.html#cfn-appsync-datasource-rdshttpendpointconfig-databasename"
            },
            "stability": "external",
            "summary": "Logical database name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1587
          },
          "name": "databaseName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-rdshttpendpointconfig.html#cfn-appsync-datasource-rdshttpendpointconfig-schema"
            },
            "stability": "external",
            "summary": "Logical schema name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1599
          },
          "name": "schema",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnDataSource.RdsHttpEndpointConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnDataSource.RelationalDatabaseConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-relationaldatabaseconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "`RelationalDatabaseConfig` is a property of the [AWS::AppSync::DataSource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html) property type.",
        "stability": "external",
        "summary": "Use the `RelationalDatabaseConfig` property type to specify `RelationalDatabaseConfig` for an AWS AppSync data source.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst relationalDatabaseConfigProperty: appsync.CfnDataSource.RelationalDatabaseConfigProperty = {\n  relationalDatabaseSourceType: 'relationalDatabaseSourceType',\n\n  // the properties below are optional\n  rdsHttpEndpointConfig: {\n    awsRegion: 'awsRegion',\n    awsSecretStoreArn: 'awsSecretStoreArn',\n    dbClusterIdentifier: 'dbClusterIdentifier',\n\n    // the properties below are optional\n    databaseName: 'databaseName',\n    schema: 'schema',\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnDataSource.RelationalDatabaseConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 1677
      },
      "name": "RelationalDatabaseConfigProperty",
      "namespace": "CfnDataSource",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-relationaldatabaseconfig.html#cfn-appsync-datasource-relationaldatabaseconfig-relationaldatabasesourcetype"
            },
            "stability": "external",
            "summary": "The type of relational data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1689
          },
          "name": "relationalDatabaseSourceType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-datasource-relationaldatabaseconfig.html#cfn-appsync-datasource-relationaldatabaseconfig-rdshttpendpointconfig"
            },
            "stability": "external",
            "summary": "Information about the Amazon RDS resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1683
          },
          "name": "rdsHttpEndpointConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.RdsHttpEndpointConfigProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnDataSource.RelationalDatabaseConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnDataSource`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnDataSourceProps: appsync.CfnDataSourceProps = {\n  apiId: 'apiId',\n  name: 'name',\n  type: 'type',\n\n  // the properties below are optional\n  description: 'description',\n  dynamoDbConfig: {\n    awsRegion: 'awsRegion',\n    tableName: 'tableName',\n\n    // the properties below are optional\n    deltaSyncConfig: {\n      baseTableTtl: 'baseTableTtl',\n      deltaSyncTableName: 'deltaSyncTableName',\n      deltaSyncTableTtl: 'deltaSyncTableTtl',\n    },\n    useCallerCredentials: false,\n    versioned: false,\n  },\n  elasticsearchConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  httpConfig: {\n    endpoint: 'endpoint',\n\n    // the properties below are optional\n    authorizationConfig: {\n      authorizationType: 'authorizationType',\n\n      // the properties below are optional\n      awsIamConfig: {\n        signingRegion: 'signingRegion',\n        signingServiceName: 'signingServiceName',\n      },\n    },\n  },\n  lambdaConfig: {\n    lambdaFunctionArn: 'lambdaFunctionArn',\n  },\n  openSearchServiceConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  relationalDatabaseConfig: {\n    relationalDatabaseSourceType: 'relationalDatabaseSourceType',\n\n    // the properties below are optional\n    rdsHttpEndpointConfig: {\n      awsRegion: 'awsRegion',\n      awsSecretStoreArn: 'awsSecretStoreArn',\n      dbClusterIdentifier: 'dbClusterIdentifier',\n\n      // the properties below are optional\n      databaseName: 'databaseName',\n      schema: 'schema',\n    },\n  },\n  serviceRoleArn: 'serviceRoleArn',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnDataSourceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 527
      },
      "name": "CfnDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-apiid"
            },
            "stability": "external",
            "summary": "Unique AWS AppSync GraphQL API identifier where this data source will be created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 534
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-name"
            },
            "stability": "external",
            "summary": "Friendly name for you to identify your AppSync data source after creation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 541
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-type"
            },
            "remarks": "- *AWS_LAMBDA* : The data source is an AWS Lambda function.\n- *AMAZON_DYNAMODB* : The data source is an Amazon DynamoDB table.\n- *AMAZON_ELASTICSEARCH* : The data source is an Amazon OpenSearch Service domain.\n- *AMAZON_OPENSEARCH_SERVICE* : The data source is an Amazon OpenSearch Service domain.\n- *NONE* : There is no data source. This type is used when you wish to invoke a GraphQL operation without connecting to a data source, such as performing data transformation with resolvers or triggering a subscription to be invoked from a mutation.\n- *HTTP* : The data source is an HTTP endpoint.\n- *RELATIONAL_DATABASE* : The data source is a relational database.",
            "stability": "external",
            "summary": "The type of the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 556
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-description"
            },
            "stability": "external",
            "summary": "The description of the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 563
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-dynamodbconfig"
            },
            "stability": "external",
            "summary": "AWS Region and TableName for an Amazon DynamoDB table in your account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 570
          },
          "name": "dynamoDbConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.DynamoDBConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-elasticsearchconfig"
            },
            "remarks": "As of September 2021, Amazon Elasticsearch Service is Amazon OpenSearch Service . This property is deprecated. For new data sources, use *OpenSearchServiceConfig* to specify an OpenSearch Service data source.",
            "stability": "external",
            "summary": "AWS Region and Endpoints for an Amazon OpenSearch Service domain in your account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 579
          },
          "name": "elasticsearchConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.ElasticsearchConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-httpconfig"
            },
            "stability": "external",
            "summary": "Endpoints for an HTTP data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 586
          },
          "name": "httpConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.HttpConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-lambdaconfig"
            },
            "remarks": "This can be the ARN of a Lambda function that exists in the current account or in another account.",
            "stability": "external",
            "summary": "An ARN of a Lambda function in valid ARN format."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 593
          },
          "name": "lambdaConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.LambdaConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-opensearchserviceconfig"
            },
            "stability": "external",
            "summary": "AWS Region and Endpoints for an Amazon OpenSearch Service domain in your account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 600
          },
          "name": "openSearchServiceConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.OpenSearchServiceConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-relationaldatabaseconfig"
            },
            "stability": "external",
            "summary": "Relational Database configuration of the relational database data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 607
          },
          "name": "relationalDatabaseConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.RelationalDatabaseConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html#cfn-appsync-datasource-servicerolearn"
            },
            "remarks": "The system assumes this role when accessing the data source.\n\nRequired if `Type` is specified as `AWS_LAMBDA` , `AMAZON_DYNAMODB` , `AMAZON_ELASTICSEARCH` , or `AMAZON_OPENSEARCH_SERVICE` .",
            "stability": "external",
            "summary": "The AWS Identity and Access Management service role ARN for the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 616
          },
          "name": "serviceRoleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnDataSourceProps"
    },
    "@aws-cdk/aws-appsync.CfnDomainName": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::AppSync::DomainName",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-domainname.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::AppSync::DomainName` resource creates a `DomainNameConfig` object to configure a custom domain.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::AppSync::DomainName`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnDomainName = new appsync.CfnDomainName(this, 'MyCfnDomainName', {\n  certificateArn: 'certificateArn',\n  domainName: 'domainName',\n\n  // the properties below are optional\n  description: 'description',\n});"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnDomainName",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::AppSync::DomainName`."
        },
        "locationInModule": {
          "filename": "lib/appsync.generated.ts",
          "line": 1911
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.CfnDomainNameProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 1840
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1930
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1943
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnDomainName",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1844
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "AppSyncDomainName"
            },
            "stability": "external",
            "summary": "The domain name provided by AWS AppSync ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1869
          },
          "name": "attrAppSyncDomainName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "DomainName"
            },
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1875
          },
          "name": "attrDomainName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "HostedZoneId"
            },
            "stability": "external",
            "summary": "The ID of your Amazon Route 53 hosted zone."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1881
          },
          "name": "attrHostedZoneId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1935
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-domainname.html#cfn-appsync-domainname-certificatearn"
            },
            "remarks": "This will be an AWS Certificate Manager certificate.",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the certificate."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1888
          },
          "name": "certificateArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-domainname.html#cfn-appsync-domainname-domainname"
            },
            "stability": "external",
            "summary": "The domain name."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1895
          },
          "name": "domainName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-domainname.html#cfn-appsync-domainname-description"
            },
            "stability": "external",
            "summary": "The decription for your domain name."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1902
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnDomainName"
    },
    "@aws-cdk/aws-appsync.CfnDomainNameApiAssociation": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::AppSync::DomainNameApiAssociation",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-domainnameapiassociation.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::AppSync::DomainNameApiAssociation` resource represents the mapping of your custom domain name to the assigned API URL.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::AppSync::DomainNameApiAssociation`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnDomainNameApiAssociation = new appsync.CfnDomainNameApiAssociation(this, 'MyCfnDomainNameApiAssociation', {\n  apiId: 'apiId',\n  domainName: 'domainName',\n});"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnDomainNameApiAssociation",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::AppSync::DomainNameApiAssociation`."
        },
        "locationInModule": {
          "filename": "lib/appsync.generated.ts",
          "line": 2085
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.CfnDomainNameApiAssociationProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 2033
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2101
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2113
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnDomainNameApiAssociation",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2037
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "ApiAssociationIdentifier"
            },
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2062
          },
          "name": "attrApiAssociationIdentifier",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2106
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-domainnameapiassociation.html#cfn-appsync-domainnameapiassociation-apiid"
            },
            "stability": "external",
            "summary": "The API ID."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2069
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-domainnameapiassociation.html#cfn-appsync-domainnameapiassociation-domainname"
            },
            "stability": "external",
            "summary": "The domain name."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2076
          },
          "name": "domainName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnDomainNameApiAssociation"
    },
    "@aws-cdk/aws-appsync.CfnDomainNameApiAssociationProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-domainnameapiassociation.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnDomainNameApiAssociation`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnDomainNameApiAssociationProps: appsync.CfnDomainNameApiAssociationProps = {\n  apiId: 'apiId',\n  domainName: 'domainName',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnDomainNameApiAssociationProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 1956
      },
      "name": "CfnDomainNameApiAssociationProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-domainnameapiassociation.html#cfn-appsync-domainnameapiassociation-apiid"
            },
            "stability": "external",
            "summary": "The API ID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1963
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-domainnameapiassociation.html#cfn-appsync-domainnameapiassociation-domainname"
            },
            "stability": "external",
            "summary": "The domain name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1970
          },
          "name": "domainName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnDomainNameApiAssociationProps"
    },
    "@aws-cdk/aws-appsync.CfnDomainNameProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-domainname.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnDomainName`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnDomainNameProps: appsync.CfnDomainNameProps = {\n  certificateArn: 'certificateArn',\n  domainName: 'domainName',\n\n  // the properties below are optional\n  description: 'description',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnDomainNameProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 1753
      },
      "name": "CfnDomainNameProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-domainname.html#cfn-appsync-domainname-certificatearn"
            },
            "remarks": "This will be an AWS Certificate Manager certificate.",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the certificate."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1760
          },
          "name": "certificateArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-domainname.html#cfn-appsync-domainname-domainname"
            },
            "stability": "external",
            "summary": "The domain name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1767
          },
          "name": "domainName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-domainname.html#cfn-appsync-domainname-description"
            },
            "stability": "external",
            "summary": "The decription for your domain name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 1774
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnDomainNameProps"
    },
    "@aws-cdk/aws-appsync.CfnFunctionConfiguration": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::AppSync::FunctionConfiguration",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::AppSync::FunctionConfiguration` resource defines the functions in GraphQL APIs to perform certain operations. You can use pipeline resolvers to attach functions. For more information, see [Pipeline Resolvers](https://docs.aws.amazon.com/appsync/latest/devguide/pipeline-resolvers.html) in the *AWS AppSync Developer Guide* .\n\n> When you submit an update, AWS CloudFormation updates resources based on differences between what you submit and the stack's current template. To cause this resource to be updated you must change a property value for this resource in the AWS CloudFormation template. Changing the Amazon S3 file content without changing a property value will not result in an update operation.\n>\n> See [Update Behaviors of Stack Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html) in the *AWS CloudFormation User Guide* .",
        "stability": "external",
        "summary": "A CloudFormation `AWS::AppSync::FunctionConfiguration`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnFunctionConfiguration = new appsync.CfnFunctionConfiguration(this, 'MyCfnFunctionConfiguration', {\n  apiId: 'apiId',\n  dataSourceName: 'dataSourceName',\n  functionVersion: 'functionVersion',\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  maxBatchSize: 123,\n  requestMappingTemplate: 'requestMappingTemplate',\n  requestMappingTemplateS3Location: 'requestMappingTemplateS3Location',\n  responseMappingTemplate: 'responseMappingTemplate',\n  responseMappingTemplateS3Location: 'responseMappingTemplateS3Location',\n  syncConfig: {\n    conflictDetection: 'conflictDetection',\n\n    // the properties below are optional\n    conflictHandler: 'conflictHandler',\n    lambdaConflictHandlerConfig: {\n      lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n    },\n  },\n});"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnFunctionConfiguration",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::AppSync::FunctionConfiguration`."
        },
        "locationInModule": {
          "filename": "lib/appsync.generated.ts",
          "line": 2440
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.CfnFunctionConfigurationProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 2303
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2470
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2491
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnFunctionConfiguration",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2307
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "DataSourceName"
            },
            "stability": "external",
            "summary": "The name of data source this function will attach."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2332
          },
          "name": "attrDataSourceName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "FunctionArn"
            },
            "stability": "external",
            "summary": "ARN of the function, such as `arn:aws:appsync:us-east-1:123456789012:apis/graphqlapiid/functions/functionId` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2338
          },
          "name": "attrFunctionArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "FunctionId"
            },
            "stability": "external",
            "summary": "The unique ID of this function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2344
          },
          "name": "attrFunctionId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Name"
            },
            "stability": "external",
            "summary": "The name of the function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2350
          },
          "name": "attrName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2475
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-apiid"
            },
            "stability": "external",
            "summary": "The AWS AppSync GraphQL API that you want to attach using this function."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2357
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-datasourcename"
            },
            "stability": "external",
            "summary": "The name of data source this function will attach."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2364
          },
          "name": "dataSourceName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-functionversion"
            },
            "remarks": "Currently, only the 2018-05-29 version of the template is supported.",
            "stability": "external",
            "summary": "The version of the request mapping template."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2371
          },
          "name": "functionVersion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-name"
            },
            "stability": "external",
            "summary": "The name of the function."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2378
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-description"
            },
            "stability": "external",
            "summary": "The `Function` description."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2385
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-maxbatchsize"
            },
            "stability": "external",
            "summary": "The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a `BatchInvoke` operation."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2392
          },
          "name": "maxBatchSize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-requestmappingtemplate"
            },
            "remarks": "Functions support only the 2018-05-29 version of the request mapping template.",
            "stability": "external",
            "summary": "The `Function` request mapping template."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2399
          },
          "name": "requestMappingTemplate",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-requestmappingtemplates3location"
            },
            "remarks": "Contains information on which Conflict Detection, as well as Resolution strategy, should be performed when the resolver is invoked.",
            "stability": "external",
            "summary": "Describes a Sync configuration for a resolver."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2408
          },
          "name": "requestMappingTemplateS3Location",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-responsemappingtemplate"
            },
            "stability": "external",
            "summary": "The `Function` response mapping template."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2415
          },
          "name": "responseMappingTemplate",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-responsemappingtemplates3location"
            },
            "remarks": "Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.",
            "stability": "external",
            "summary": "The location of a response mapping template in an Amazon S3 bucket."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2422
          },
          "name": "responseMappingTemplateS3Location",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-syncconfig"
            },
            "remarks": "Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.",
            "stability": "external",
            "summary": "Describes a Sync configuration for a resolver."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2431
          },
          "name": "syncConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnFunctionConfiguration.SyncConfigProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnFunctionConfiguration"
    },
    "@aws-cdk/aws-appsync.CfnFunctionConfiguration.LambdaConflictHandlerConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-functionconfiguration-lambdaconflicthandlerconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `LambdaConflictHandlerConfig` object when configuring `LAMBDA` as the Conflict Handler.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst lambdaConflictHandlerConfigProperty: appsync.CfnFunctionConfiguration.LambdaConflictHandlerConfigProperty = {\n  lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnFunctionConfiguration.LambdaConflictHandlerConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 2505
      },
      "name": "LambdaConflictHandlerConfigProperty",
      "namespace": "CfnFunctionConfiguration",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-functionconfiguration-lambdaconflicthandlerconfig.html#cfn-appsync-functionconfiguration-lambdaconflicthandlerconfig-lambdaconflicthandlerarn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2511
          },
          "name": "lambdaConflictHandlerArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnFunctionConfiguration.LambdaConflictHandlerConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnFunctionConfiguration.SyncConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-functionconfiguration-syncconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.",
        "stability": "external",
        "summary": "Describes a Sync configuration for a resolver.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst syncConfigProperty: appsync.CfnFunctionConfiguration.SyncConfigProperty = {\n  conflictDetection: 'conflictDetection',\n\n  // the properties below are optional\n  conflictHandler: 'conflictHandler',\n  lambdaConflictHandlerConfig: {\n    lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnFunctionConfiguration.SyncConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 2574
      },
      "name": "SyncConfigProperty",
      "namespace": "CfnFunctionConfiguration",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-functionconfiguration-syncconfig.html#cfn-appsync-functionconfiguration-syncconfig-conflictdetection"
            },
            "remarks": "- *VERSION* : Detect conflicts based on object versions for this resolver.\n- *NONE* : Do not detect conflicts when invoking this resolver.",
            "stability": "external",
            "summary": "The Conflict Detection strategy to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2583
          },
          "name": "conflictDetection",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-functionconfiguration-syncconfig.html#cfn-appsync-functionconfiguration-syncconfig-conflicthandler"
            },
            "remarks": "- *OPTIMISTIC_CONCURRENCY* : Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.\n- *AUTOMERGE* : Resolve conflicts with the Automerge conflict resolution strategy.\n- *LAMBDA* : Resolve conflicts with an AWS Lambda function supplied in the `LambdaConflictHandlerConfig` .",
            "stability": "external",
            "summary": "The Conflict Resolution strategy to perform in the event of a conflict."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2593
          },
          "name": "conflictHandler",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-functionconfiguration-syncconfig.html#cfn-appsync-functionconfiguration-syncconfig-lambdaconflicthandlerconfig"
            },
            "stability": "external",
            "summary": "The `LambdaConflictHandlerConfig` when configuring `LAMBDA` as the Conflict Handler."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2599
          },
          "name": "lambdaConflictHandlerConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnFunctionConfiguration.LambdaConflictHandlerConfigProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnFunctionConfiguration.SyncConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnFunctionConfigurationProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnFunctionConfiguration`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnFunctionConfigurationProps: appsync.CfnFunctionConfigurationProps = {\n  apiId: 'apiId',\n  dataSourceName: 'dataSourceName',\n  functionVersion: 'functionVersion',\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  maxBatchSize: 123,\n  requestMappingTemplate: 'requestMappingTemplate',\n  requestMappingTemplateS3Location: 'requestMappingTemplateS3Location',\n  responseMappingTemplate: 'responseMappingTemplate',\n  responseMappingTemplateS3Location: 'responseMappingTemplateS3Location',\n  syncConfig: {\n    conflictDetection: 'conflictDetection',\n\n    // the properties below are optional\n    conflictHandler: 'conflictHandler',\n    lambdaConflictHandlerConfig: {\n      lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n    },\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnFunctionConfigurationProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 2126
      },
      "name": "CfnFunctionConfigurationProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-apiid"
            },
            "stability": "external",
            "summary": "The AWS AppSync GraphQL API that you want to attach using this function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2133
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-datasourcename"
            },
            "stability": "external",
            "summary": "The name of data source this function will attach."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2140
          },
          "name": "dataSourceName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-functionversion"
            },
            "remarks": "Currently, only the 2018-05-29 version of the template is supported.",
            "stability": "external",
            "summary": "The version of the request mapping template."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2147
          },
          "name": "functionVersion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-name"
            },
            "stability": "external",
            "summary": "The name of the function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2154
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-description"
            },
            "stability": "external",
            "summary": "The `Function` description."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2161
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-maxbatchsize"
            },
            "stability": "external",
            "summary": "The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a `BatchInvoke` operation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2168
          },
          "name": "maxBatchSize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-requestmappingtemplate"
            },
            "remarks": "Functions support only the 2018-05-29 version of the request mapping template.",
            "stability": "external",
            "summary": "The `Function` request mapping template."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2175
          },
          "name": "requestMappingTemplate",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-requestmappingtemplates3location"
            },
            "remarks": "Contains information on which Conflict Detection, as well as Resolution strategy, should be performed when the resolver is invoked.",
            "stability": "external",
            "summary": "Describes a Sync configuration for a resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2184
          },
          "name": "requestMappingTemplateS3Location",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-responsemappingtemplate"
            },
            "stability": "external",
            "summary": "The `Function` response mapping template."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2191
          },
          "name": "responseMappingTemplate",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-responsemappingtemplates3location"
            },
            "remarks": "Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.",
            "stability": "external",
            "summary": "The location of a response mapping template in an Amazon S3 bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2198
          },
          "name": "responseMappingTemplateS3Location",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#cfn-appsync-functionconfiguration-syncconfig"
            },
            "remarks": "Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.",
            "stability": "external",
            "summary": "Describes a Sync configuration for a resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2207
          },
          "name": "syncConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnFunctionConfiguration.SyncConfigProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnFunctionConfigurationProps"
    },
    "@aws-cdk/aws-appsync.CfnGraphQLApi": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::AppSync::GraphQLApi",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::AppSync::GraphQLApi` resource creates a new AWS AppSync GraphQL API. This is the top-level construct for your application. For more information, see [Quick Start](https://docs.aws.amazon.com/appsync/latest/devguide/quickstart.html) in the *AWS AppSync Developer Guide* .",
        "stability": "external",
        "summary": "A CloudFormation `AWS::AppSync::GraphQLApi`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnGraphQLApi = new appsync.CfnGraphQLApi(this, 'MyCfnGraphQLApi', {\n  authenticationType: 'authenticationType',\n  name: 'name',\n\n  // the properties below are optional\n  additionalAuthenticationProviders: [{\n    authenticationType: 'authenticationType',\n\n    // the properties below are optional\n    lambdaAuthorizerConfig: {\n      authorizerResultTtlInSeconds: 123,\n      authorizerUri: 'authorizerUri',\n      identityValidationExpression: 'identityValidationExpression',\n    },\n    openIdConnectConfig: {\n      authTtl: 123,\n      clientId: 'clientId',\n      iatTtl: 123,\n      issuer: 'issuer',\n    },\n    userPoolConfig: {\n      appIdClientRegex: 'appIdClientRegex',\n      awsRegion: 'awsRegion',\n      userPoolId: 'userPoolId',\n    },\n  }],\n  lambdaAuthorizerConfig: {\n    authorizerResultTtlInSeconds: 123,\n    authorizerUri: 'authorizerUri',\n    identityValidationExpression: 'identityValidationExpression',\n  },\n  logConfig: {\n    cloudWatchLogsRoleArn: 'cloudWatchLogsRoleArn',\n    excludeVerboseContent: false,\n    fieldLogLevel: 'fieldLogLevel',\n  },\n  openIdConnectConfig: {\n    authTtl: 123,\n    clientId: 'clientId',\n    iatTtl: 123,\n    issuer: 'issuer',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  userPoolConfig: {\n    appIdClientRegex: 'appIdClientRegex',\n    awsRegion: 'awsRegion',\n    defaultAction: 'defaultAction',\n    userPoolId: 'userPoolId',\n  },\n  xrayEnabled: false,\n});"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::AppSync::GraphQLApi`."
        },
        "locationInModule": {
          "filename": "lib/appsync.generated.ts",
          "line": 2926
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApiProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 2813
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2951
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2970
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnGraphQLApi",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2817
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "ApiId"
            },
            "stability": "external",
            "summary": "Unique AWS AppSync GraphQL API identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2842
          },
          "name": "attrApiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the API key, such as `arn:aws:appsync:us-east-1:123456789012:apis/graphqlapiid` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2848
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "GraphQLUrl"
            },
            "stability": "external",
            "summary": "The Endpoint URL of your GraphQL API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2854
          },
          "name": "attrGraphQlUrl",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2956
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-tags"
            },
            "stability": "external",
            "summary": "An arbitrary set of tags (key-value pairs) for this GraphQL API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2903
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-authenticationtype"
            },
            "remarks": "For allowed values (such as `API_KEY` , `AWS_IAM` , `AMAZON_COGNITO_USER_POOLS` , `OPENID_CONNECT` , or `AWS_LAMBDA` ), see [Security](https://docs.aws.amazon.com/appsync/latest/devguide/security.html) in the *AWS AppSync Developer Guide* .",
            "stability": "external",
            "summary": "Security configuration for your GraphQL API."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2861
          },
          "name": "authenticationType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-name"
            },
            "stability": "external",
            "summary": "The API name."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2868
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-additionalauthenticationproviders"
            },
            "stability": "external",
            "summary": "A list of additional authentication providers for the `GraphqlApi` API."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2875
          },
          "name": "additionalAuthenticationProviders",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.AdditionalAuthenticationProviderProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-lambdaauthorizerconfig"
            },
            "remarks": "Be aware that an AWS AppSync API may have only one Lambda authorizer configured at a time.",
            "stability": "external",
            "summary": "A `LambdaAuthorizerConfig` holds configuration on how to authorize AWS AppSync API access when using the `AWS_LAMBDA` authorizer mode."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2882
          },
          "name": "lambdaAuthorizerConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.LambdaAuthorizerConfigProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-logconfig"
            },
            "stability": "external",
            "summary": "The Amazon CloudWatch Logs configuration."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2889
          },
          "name": "logConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.LogConfigProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-openidconnectconfig"
            },
            "stability": "external",
            "summary": "The OpenID Connect configuration."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2896
          },
          "name": "openIdConnectConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.OpenIDConnectConfigProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-userpoolconfig"
            },
            "stability": "external",
            "summary": "Optional authorization configuration for using Amazon Cognito user pools with your GraphQL endpoint."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2910
          },
          "name": "userPoolConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.UserPoolConfigProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-xrayenabled"
            },
            "stability": "external",
            "summary": "A flag indicating whether to use AWS X-Ray tracing for this `GraphqlApi` ."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2917
          },
          "name": "xrayEnabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnGraphQLApi"
    },
    "@aws-cdk/aws-appsync.CfnGraphQLApi.AdditionalAuthenticationProviderProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-additionalauthenticationprovider.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Describes an additional authentication provider.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst additionalAuthenticationProviderProperty: appsync.CfnGraphQLApi.AdditionalAuthenticationProviderProperty = {\n  authenticationType: 'authenticationType',\n\n  // the properties below are optional\n  lambdaAuthorizerConfig: {\n    authorizerResultTtlInSeconds: 123,\n    authorizerUri: 'authorizerUri',\n    identityValidationExpression: 'identityValidationExpression',\n  },\n  openIdConnectConfig: {\n    authTtl: 123,\n    clientId: 'clientId',\n    iatTtl: 123,\n    issuer: 'issuer',\n  },\n  userPoolConfig: {\n    appIdClientRegex: 'appIdClientRegex',\n    awsRegion: 'awsRegion',\n    userPoolId: 'userPoolId',\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.AdditionalAuthenticationProviderProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 2984
      },
      "name": "AdditionalAuthenticationProviderProperty",
      "namespace": "CfnGraphQLApi",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-additionalauthenticationprovider.html#cfn-appsync-graphqlapi-additionalauthenticationprovider-authenticationtype"
            },
            "remarks": "Valid Values: `API_KEY` | `AWS_IAM` | `OPENID_CONNECT` | `AMAZON_COGNITO_USER_POOLS` | `AWS_LAMBDA`",
            "stability": "external",
            "summary": "The authentication type for API key, AWS Identity and Access Management , OIDC, Amazon Cognito user pools , or AWS Lambda ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2992
          },
          "name": "authenticationType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-additionalauthenticationprovider.html#cfn-appsync-graphqlapi-additionalauthenticationprovider-lambdaauthorizerconfig"
            },
            "stability": "external",
            "summary": "Configuration for AWS Lambda function authorization."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2998
          },
          "name": "lambdaAuthorizerConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.LambdaAuthorizerConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-additionalauthenticationprovider.html#cfn-appsync-graphqlapi-additionalauthenticationprovider-openidconnectconfig"
            },
            "stability": "external",
            "summary": "The OIDC configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3004
          },
          "name": "openIdConnectConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.OpenIDConnectConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-additionalauthenticationprovider.html#cfn-appsync-graphqlapi-additionalauthenticationprovider-userpoolconfig"
            },
            "stability": "external",
            "summary": "The Amazon Cognito user pool configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3010
          },
          "name": "userPoolConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.CognitoUserPoolConfigProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnGraphQLApi.AdditionalAuthenticationProviderProperty"
    },
    "@aws-cdk/aws-appsync.CfnGraphQLApi.CognitoUserPoolConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-cognitouserpoolconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Describes an Amazon Cognito user pool configuration.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cognitoUserPoolConfigProperty: appsync.CfnGraphQLApi.CognitoUserPoolConfigProperty = {\n  appIdClientRegex: 'appIdClientRegex',\n  awsRegion: 'awsRegion',\n  userPoolId: 'userPoolId',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.CognitoUserPoolConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 3081
      },
      "name": "CognitoUserPoolConfigProperty",
      "namespace": "CfnGraphQLApi",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-cognitouserpoolconfig.html#cfn-appsync-graphqlapi-cognitouserpoolconfig-appidclientregex"
            },
            "stability": "external",
            "summary": "A regular expression for validating the incoming Amazon Cognito user pool app client ID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3087
          },
          "name": "appIdClientRegex",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-cognitouserpoolconfig.html#cfn-appsync-graphqlapi-cognitouserpoolconfig-awsregion"
            },
            "stability": "external",
            "summary": "The AWS Region in which the user pool was created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3093
          },
          "name": "awsRegion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-cognitouserpoolconfig.html#cfn-appsync-graphqlapi-cognitouserpoolconfig-userpoolid"
            },
            "stability": "external",
            "summary": "The user pool ID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3099
          },
          "name": "userPoolId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnGraphQLApi.CognitoUserPoolConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnGraphQLApi.LambdaAuthorizerConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-lambdaauthorizerconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Configuration for AWS Lambda function authorization.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst lambdaAuthorizerConfigProperty: appsync.CfnGraphQLApi.LambdaAuthorizerConfigProperty = {\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  identityValidationExpression: 'identityValidationExpression',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.LambdaAuthorizerConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 3166
      },
      "name": "LambdaAuthorizerConfigProperty",
      "namespace": "CfnGraphQLApi",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-lambdaauthorizerconfig.html#cfn-appsync-graphqlapi-lambdaauthorizerconfig-authorizerresultttlinseconds"
            },
            "remarks": "The default is 5 minutes (300 seconds). The Lambda function can override this by returning a `ttlOverride` key in its response. A value of 0 disables caching of responses.",
            "stability": "external",
            "summary": "The number of seconds a response should be cached for."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3172
          },
          "name": "authorizerResultTtlInSeconds",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-lambdaauthorizerconfig.html#cfn-appsync-graphqlapi-lambdaauthorizerconfig-authorizeruri"
            },
            "remarks": "This may be a standard Lambda ARN, a version ARN ( `.../v3` ) or alias ARN.\n\n*Note* : This Lambda function must have the following resource-based policy assigned to it. When configuring Lambda authorizers in the console, this is done for you. To do so with the AWS CLI , run the following:\n\n`aws lambda add-permission --function-name \"arn:aws:lambda:us-east-2:111122223333:function:my-function\" --statement-id \"appsync\" --principal appsync.amazonaws.com --action lambda:InvokeFunction`",
            "stability": "external",
            "summary": "The ARN of the Lambda function to be called for authorization."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3182
          },
          "name": "authorizerUri",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-lambdaauthorizerconfig.html#cfn-appsync-graphqlapi-lambdaauthorizerconfig-identityvalidationexpression"
            },
            "stability": "external",
            "summary": "A regular expression for validation of tokens before the Lambda function is called."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3188
          },
          "name": "identityValidationExpression",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnGraphQLApi.LambdaAuthorizerConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnGraphQLApi.LogConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-logconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "`LogConfig` is a property of the [AWS::AppSync::GraphQLApi](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html) property type.",
        "stability": "external",
        "summary": "The `LogConfig` property type specifies the logging configuration when writing GraphQL operations and tracing to Amazon CloudWatch for an AWS AppSync GraphQL API.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst logConfigProperty: appsync.CfnGraphQLApi.LogConfigProperty = {\n  cloudWatchLogsRoleArn: 'cloudWatchLogsRoleArn',\n  excludeVerboseContent: false,\n  fieldLogLevel: 'fieldLogLevel',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.LogConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 3257
      },
      "name": "LogConfigProperty",
      "namespace": "CfnGraphQLApi",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-logconfig.html#cfn-appsync-graphqlapi-logconfig-cloudwatchlogsrolearn"
            },
            "stability": "external",
            "summary": "The service role that AWS AppSync will assume to publish to Amazon CloudWatch Logs in your account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3263
          },
          "name": "cloudWatchLogsRoleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-logconfig.html#cfn-appsync-graphqlapi-logconfig-excludeverbosecontent"
            },
            "stability": "external",
            "summary": "Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3269
          },
          "name": "excludeVerboseContent",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-logconfig.html#cfn-appsync-graphqlapi-logconfig-fieldloglevel"
            },
            "remarks": "- *NONE* : No field-level logs are captured.\n- *ERROR* : Logs the following information only for the fields that are in error:\n\n- The error section in the server response.\n- Field-level errors.\n- The generated request/response functions that got resolved for error fields.\n- *ALL* : The following information is logged for all fields in the query:\n\n- Field-level tracing information.\n- The generated request/response functions that got resolved for each field.",
            "stability": "external",
            "summary": "The field logging level. Values can be NONE, ERROR, or ALL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3286
          },
          "name": "fieldLogLevel",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnGraphQLApi.LogConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnGraphQLApi.OpenIDConnectConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-openidconnectconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "`OpenIDConnectConfig` is a property of the [AWS::AppSync::GraphQLApi](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html) property type.",
        "stability": "external",
        "summary": "The `OpenIDConnectConfig` property type specifies the optional authorization configuration for using an OpenID Connect compliant service with your GraphQL endpoint for an AWS AppSync GraphQL API.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst openIDConnectConfigProperty: appsync.CfnGraphQLApi.OpenIDConnectConfigProperty = {\n  authTtl: 123,\n  clientId: 'clientId',\n  iatTtl: 123,\n  issuer: 'issuer',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.OpenIDConnectConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 3355
      },
      "name": "OpenIDConnectConfigProperty",
      "namespace": "CfnGraphQLApi",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-openidconnectconfig.html#cfn-appsync-graphqlapi-openidconnectconfig-authttl"
            },
            "stability": "external",
            "summary": "The number of milliseconds that a token is valid after being authenticated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3361
          },
          "name": "authTtl",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-openidconnectconfig.html#cfn-appsync-graphqlapi-openidconnectconfig-clientid"
            },
            "remarks": "This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so that AWS AppSync can validate against multiple client identifiers at a time.",
            "stability": "external",
            "summary": "The client identifier of the Relying party at the OpenID identity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3367
          },
          "name": "clientId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-openidconnectconfig.html#cfn-appsync-graphqlapi-openidconnectconfig-iatttl"
            },
            "stability": "external",
            "summary": "The number of milliseconds that a token is valid after it's issued to a user."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3373
          },
          "name": "iatTtl",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-openidconnectconfig.html#cfn-appsync-graphqlapi-openidconnectconfig-issuer"
            },
            "remarks": "The issuer returned by discovery must exactly match the value of `iss` in the ID token.",
            "stability": "external",
            "summary": "The issuer for the OIDC configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3379
          },
          "name": "issuer",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnGraphQLApi.OpenIDConnectConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnGraphQLApi.UserPoolConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-userpoolconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `UserPoolConfig` property type specifies the optional authorization configuration for using Amazon Cognito user pools with your GraphQL endpoint for an AWS AppSync GraphQL API.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst userPoolConfigProperty: appsync.CfnGraphQLApi.UserPoolConfigProperty = {\n  appIdClientRegex: 'appIdClientRegex',\n  awsRegion: 'awsRegion',\n  defaultAction: 'defaultAction',\n  userPoolId: 'userPoolId',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.UserPoolConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 3449
      },
      "name": "UserPoolConfigProperty",
      "namespace": "CfnGraphQLApi",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-userpoolconfig.html#cfn-appsync-graphqlapi-userpoolconfig-appidclientregex"
            },
            "stability": "external",
            "summary": "A regular expression for validating the incoming Amazon Cognito user pool app client ID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3455
          },
          "name": "appIdClientRegex",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-userpoolconfig.html#cfn-appsync-graphqlapi-userpoolconfig-awsregion"
            },
            "stability": "external",
            "summary": "The AWS Region in which the user pool was created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3461
          },
          "name": "awsRegion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-userpoolconfig.html#cfn-appsync-graphqlapi-userpoolconfig-defaultaction"
            },
            "remarks": "When specifying Amazon Cognito user pools as the default authentication, you must set the value for `DefaultAction` to `ALLOW` if specifying `AdditionalAuthenticationProviders` .",
            "stability": "external",
            "summary": "The action that you want your GraphQL API to take when a request that uses Amazon Cognito user pool authentication doesn't match the Amazon Cognito user pool configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3469
          },
          "name": "defaultAction",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-userpoolconfig.html#cfn-appsync-graphqlapi-userpoolconfig-userpoolid"
            },
            "stability": "external",
            "summary": "The user pool ID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3475
          },
          "name": "userPoolId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnGraphQLApi.UserPoolConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnGraphQLApiProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnGraphQLApi`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnGraphQLApiProps: appsync.CfnGraphQLApiProps = {\n  authenticationType: 'authenticationType',\n  name: 'name',\n\n  // the properties below are optional\n  additionalAuthenticationProviders: [{\n    authenticationType: 'authenticationType',\n\n    // the properties below are optional\n    lambdaAuthorizerConfig: {\n      authorizerResultTtlInSeconds: 123,\n      authorizerUri: 'authorizerUri',\n      identityValidationExpression: 'identityValidationExpression',\n    },\n    openIdConnectConfig: {\n      authTtl: 123,\n      clientId: 'clientId',\n      iatTtl: 123,\n      issuer: 'issuer',\n    },\n    userPoolConfig: {\n      appIdClientRegex: 'appIdClientRegex',\n      awsRegion: 'awsRegion',\n      userPoolId: 'userPoolId',\n    },\n  }],\n  lambdaAuthorizerConfig: {\n    authorizerResultTtlInSeconds: 123,\n    authorizerUri: 'authorizerUri',\n    identityValidationExpression: 'identityValidationExpression',\n  },\n  logConfig: {\n    cloudWatchLogsRoleArn: 'cloudWatchLogsRoleArn',\n    excludeVerboseContent: false,\n    fieldLogLevel: 'fieldLogLevel',\n  },\n  openIdConnectConfig: {\n    authTtl: 123,\n    clientId: 'clientId',\n    iatTtl: 123,\n    issuer: 'issuer',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  userPoolConfig: {\n    appIdClientRegex: 'appIdClientRegex',\n    awsRegion: 'awsRegion',\n    defaultAction: 'defaultAction',\n    userPoolId: 'userPoolId',\n  },\n  xrayEnabled: false,\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApiProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 2666
      },
      "name": "CfnGraphQLApiProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-authenticationtype"
            },
            "remarks": "For allowed values (such as `API_KEY` , `AWS_IAM` , `AMAZON_COGNITO_USER_POOLS` , `OPENID_CONNECT` , or `AWS_LAMBDA` ), see [Security](https://docs.aws.amazon.com/appsync/latest/devguide/security.html) in the *AWS AppSync Developer Guide* .",
            "stability": "external",
            "summary": "Security configuration for your GraphQL API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2673
          },
          "name": "authenticationType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-name"
            },
            "stability": "external",
            "summary": "The API name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2680
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-additionalauthenticationproviders"
            },
            "stability": "external",
            "summary": "A list of additional authentication providers for the `GraphqlApi` API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2687
          },
          "name": "additionalAuthenticationProviders",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.AdditionalAuthenticationProviderProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-lambdaauthorizerconfig"
            },
            "remarks": "Be aware that an AWS AppSync API may have only one Lambda authorizer configured at a time.",
            "stability": "external",
            "summary": "A `LambdaAuthorizerConfig` holds configuration on how to authorize AWS AppSync API access when using the `AWS_LAMBDA` authorizer mode."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2694
          },
          "name": "lambdaAuthorizerConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.LambdaAuthorizerConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-logconfig"
            },
            "stability": "external",
            "summary": "The Amazon CloudWatch Logs configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2701
          },
          "name": "logConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.LogConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-openidconnectconfig"
            },
            "stability": "external",
            "summary": "The OpenID Connect configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2708
          },
          "name": "openIdConnectConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.OpenIDConnectConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-tags"
            },
            "stability": "external",
            "summary": "An arbitrary set of tags (key-value pairs) for this GraphQL API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2715
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-userpoolconfig"
            },
            "stability": "external",
            "summary": "Optional authorization configuration for using Amazon Cognito user pools with your GraphQL endpoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2722
          },
          "name": "userPoolConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.UserPoolConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html#cfn-appsync-graphqlapi-xrayenabled"
            },
            "stability": "external",
            "summary": "A flag indicating whether to use AWS X-Ray tracing for this `GraphqlApi` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 2729
          },
          "name": "xrayEnabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnGraphQLApiProps"
    },
    "@aws-cdk/aws-appsync.CfnGraphQLSchema": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::AppSync::GraphQLSchema",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlschema.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::AppSync::GraphQLSchema` resource is used for your AWS AppSync GraphQL schema that controls the data model for your API. Schema files are text written in Schema Definition Language (SDL) format. For more information about schema authoring, see [Designing a GraphQL API](https://docs.aws.amazon.com/appsync/latest/devguide/designing-a-graphql-api.html) in the *AWS AppSync Developer Guide* .\n\n> When you submit an update, AWS CloudFormation updates resources based on differences between what you submit and the stack's current template. To cause this resource to be updated you must change a property value for this resource in the CloudFormation template. Changing the Amazon S3 file content without changing a property value will not result in an update operation.\n>\n> See [Update Behaviors of Stack Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html) in the *AWS CloudFormation User Guide* .",
        "stability": "external",
        "summary": "A CloudFormation `AWS::AppSync::GraphQLSchema`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnGraphQLSchema = new appsync.CfnGraphQLSchema(this, 'MyCfnGraphQLSchema', {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  definition: 'definition',\n  definitionS3Location: 'definitionS3Location',\n});"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnGraphQLSchema",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::AppSync::GraphQLSchema`."
        },
        "locationInModule": {
          "filename": "lib/appsync.generated.ts",
          "line": 3691
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.CfnGraphQLSchemaProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 3636
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3706
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3719
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnGraphQLSchema",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3640
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3711
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlschema.html#cfn-appsync-graphqlschema-apiid"
            },
            "stability": "external",
            "summary": "The AWS AppSync GraphQL API identifier to which you want to apply this schema."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3666
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlschema.html#cfn-appsync-graphqlschema-definition"
            },
            "remarks": "For more information about using the `Ref` function, see [Ref](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref) .",
            "stability": "external",
            "summary": "The text representation of a GraphQL schema in SDL format."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3675
          },
          "name": "definition",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlschema.html#cfn-appsync-graphqlschema-definitions3location"
            },
            "remarks": "Use this if you want to provision with the schema living in Amazon S3 rather than embedding it in your CloudFormation template.",
            "stability": "external",
            "summary": "The location of a GraphQL schema file in an Amazon S3 bucket."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3682
          },
          "name": "definitionS3Location",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnGraphQLSchema"
    },
    "@aws-cdk/aws-appsync.CfnGraphQLSchemaProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlschema.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnGraphQLSchema`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnGraphQLSchemaProps: appsync.CfnGraphQLSchemaProps = {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  definition: 'definition',\n  definitionS3Location: 'definitionS3Location',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnGraphQLSchemaProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 3544
      },
      "name": "CfnGraphQLSchemaProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlschema.html#cfn-appsync-graphqlschema-apiid"
            },
            "stability": "external",
            "summary": "The AWS AppSync GraphQL API identifier to which you want to apply this schema."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3551
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlschema.html#cfn-appsync-graphqlschema-definition"
            },
            "remarks": "For more information about using the `Ref` function, see [Ref](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref) .",
            "stability": "external",
            "summary": "The text representation of a GraphQL schema in SDL format."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3560
          },
          "name": "definition",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlschema.html#cfn-appsync-graphqlschema-definitions3location"
            },
            "remarks": "Use this if you want to provision with the schema living in Amazon S3 rather than embedding it in your CloudFormation template.",
            "stability": "external",
            "summary": "The location of a GraphQL schema file in an Amazon S3 bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3567
          },
          "name": "definitionS3Location",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnGraphQLSchemaProps"
    },
    "@aws-cdk/aws-appsync.CfnResolver": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::AppSync::Resolver",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::AppSync::Resolver` resource defines the logical GraphQL resolver that you attach to fields in a schema. Request and response templates for resolvers are written in Apache Velocity Template Language (VTL) format. For more information about resolvers, see [Resolver Mapping Template Reference](https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference.html) .\n\n> When you submit an update, AWS CloudFormation updates resources based on differences between what you submit and the stack's current template. To cause this resource to be updated you must change a property value for this resource in the CloudFormation template. Changing the Amazon S3 file content without changing a property value will not result in an update operation.\n>\n> See [Update Behaviors of Stack Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html) in the *AWS CloudFormation User Guide* .",
        "stability": "external",
        "summary": "A CloudFormation `AWS::AppSync::Resolver`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnResolver = new appsync.CfnResolver(this, 'MyCfnResolver', {\n  apiId: 'apiId',\n  fieldName: 'fieldName',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  cachingConfig: {\n    ttl: 123,\n\n    // the properties below are optional\n    cachingKeys: ['cachingKeys'],\n  },\n  dataSourceName: 'dataSourceName',\n  kind: 'kind',\n  maxBatchSize: 123,\n  pipelineConfig: {\n    functions: ['functions'],\n  },\n  requestMappingTemplate: 'requestMappingTemplate',\n  requestMappingTemplateS3Location: 'requestMappingTemplateS3Location',\n  responseMappingTemplate: 'responseMappingTemplate',\n  responseMappingTemplateS3Location: 'responseMappingTemplateS3Location',\n  syncConfig: {\n    conflictDetection: 'conflictDetection',\n\n    // the properties below are optional\n    conflictHandler: 'conflictHandler',\n    lambdaConflictHandlerConfig: {\n      lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n    },\n  },\n});"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnResolver",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::AppSync::Resolver`."
        },
        "locationInModule": {
          "filename": "lib/appsync.generated.ts",
          "line": 4075
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.CfnResolverProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 3929
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4105
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4128
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnResolver",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3933
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "FieldName"
            },
            "stability": "external",
            "summary": "The GraphQL field on a type that invokes the resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3958
          },
          "name": "attrFieldName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "ResolverArn"
            },
            "stability": "external",
            "summary": "ARN of the resolver, such as `arn:aws:appsync:us-east-1:123456789012:apis/graphqlapiid/types/typename/resolvers/resolvername` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3964
          },
          "name": "attrResolverArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "TypeName"
            },
            "stability": "external",
            "summary": "The GraphQL type that invokes this resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3970
          },
          "name": "attrTypeName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4110
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-apiid"
            },
            "stability": "external",
            "summary": "The AWS AppSync GraphQL API to which you want to attach this resolver."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3977
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-fieldname"
            },
            "stability": "external",
            "summary": "The GraphQL field on a type that invokes the resolver."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3984
          },
          "name": "fieldName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-typename"
            },
            "stability": "external",
            "summary": "The GraphQL type that invokes this resolver."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3991
          },
          "name": "typeName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-cachingconfig"
            },
            "stability": "external",
            "summary": "The caching configuration for the resolver."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3998
          },
          "name": "cachingConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnResolver.CachingConfigProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-datasourcename"
            },
            "stability": "external",
            "summary": "The resolver data source name."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4005
          },
          "name": "dataSourceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-kind"
            },
            "remarks": "- *UNIT* : A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.\n- *PIPELINE* : A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of `Function` objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.",
            "stability": "external",
            "summary": "The resolver type."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4015
          },
          "name": "kind",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-maxbatchsize"
            },
            "stability": "external",
            "summary": "The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a `BatchInvoke` operation."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4022
          },
          "name": "maxBatchSize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-pipelineconfig"
            },
            "stability": "external",
            "summary": "Functions linked with the pipeline resolver."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4029
          },
          "name": "pipelineConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnResolver.PipelineConfigProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-requestmappingtemplate"
            },
            "remarks": "Request mapping templates are optional when using a Lambda data source. For all other data sources, a request mapping template is required.",
            "stability": "external",
            "summary": "The request mapping template."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4038
          },
          "name": "requestMappingTemplate",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-requestmappingtemplates3location"
            },
            "remarks": "Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.",
            "stability": "external",
            "summary": "The location of a request mapping template in an Amazon S3 bucket."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4045
          },
          "name": "requestMappingTemplateS3Location",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-responsemappingtemplate"
            },
            "stability": "external",
            "summary": "The response mapping template."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4052
          },
          "name": "responseMappingTemplate",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-responsemappingtemplates3location"
            },
            "remarks": "Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.",
            "stability": "external",
            "summary": "The location of a response mapping template in an Amazon S3 bucket."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4059
          },
          "name": "responseMappingTemplateS3Location",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-syncconfig"
            },
            "stability": "external",
            "summary": "The `SyncConfig` for a resolver attached to a versioned data source."
          },
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4066
          },
          "name": "syncConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnResolver.SyncConfigProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnResolver"
    },
    "@aws-cdk/aws-appsync.CfnResolver.CachingConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-resolver-cachingconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The caching configuration for a resolver that has caching activated.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cachingConfigProperty: appsync.CfnResolver.CachingConfigProperty = {\n  ttl: 123,\n\n  // the properties below are optional\n  cachingKeys: ['cachingKeys'],\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnResolver.CachingConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 4142
      },
      "name": "CachingConfigProperty",
      "namespace": "CfnResolver",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-resolver-cachingconfig.html#cfn-appsync-resolver-cachingconfig-ttl"
            },
            "remarks": "Valid values are 1–3,600 seconds.",
            "stability": "external",
            "summary": "The TTL in seconds for a resolver that has caching activated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4158
          },
          "name": "ttl",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-resolver-cachingconfig.html#cfn-appsync-resolver-cachingconfig-cachingkeys"
            },
            "remarks": "Valid values are entries from the `$context.arguments` , `$context.source` , and `$context.identity` maps.",
            "stability": "external",
            "summary": "The caching keys for a resolver that has caching activated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4150
          },
          "name": "cachingKeys",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnResolver.CachingConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnResolver.LambdaConflictHandlerConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-resolver-lambdaconflicthandlerconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `LambdaConflictHandlerConfig` when configuring LAMBDA as the Conflict Handler.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst lambdaConflictHandlerConfigProperty: appsync.CfnResolver.LambdaConflictHandlerConfigProperty = {\n  lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnResolver.LambdaConflictHandlerConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 4223
      },
      "name": "LambdaConflictHandlerConfigProperty",
      "namespace": "CfnResolver",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-resolver-lambdaconflicthandlerconfig.html#cfn-appsync-resolver-lambdaconflicthandlerconfig-lambdaconflicthandlerarn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4229
          },
          "name": "lambdaConflictHandlerArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnResolver.LambdaConflictHandlerConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnResolver.PipelineConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-resolver-pipelineconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "`PipelineConfig` is a property of the [AWS::AppSync::Resolver](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html) resource.",
        "stability": "external",
        "summary": "Use the `PipelineConfig` property type to specify `PipelineConfig` for an AWS AppSync resolver.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst pipelineConfigProperty: appsync.CfnResolver.PipelineConfigProperty = {\n  functions: ['functions'],\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnResolver.PipelineConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 4292
      },
      "name": "PipelineConfigProperty",
      "namespace": "CfnResolver",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-resolver-pipelineconfig.html#cfn-appsync-resolver-pipelineconfig-functions"
            },
            "stability": "external",
            "summary": "A list of `Function` objects."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4298
          },
          "name": "functions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnResolver.PipelineConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnResolver.SyncConfigProperty": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-resolver-syncconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.",
        "stability": "external",
        "summary": "Describes a Sync configuration for a resolver.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst syncConfigProperty: appsync.CfnResolver.SyncConfigProperty = {\n  conflictDetection: 'conflictDetection',\n\n  // the properties below are optional\n  conflictHandler: 'conflictHandler',\n  lambdaConflictHandlerConfig: {\n    lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnResolver.SyncConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 4361
      },
      "name": "SyncConfigProperty",
      "namespace": "CfnResolver",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-resolver-syncconfig.html#cfn-appsync-resolver-syncconfig-conflictdetection"
            },
            "remarks": "- *VERSION* : Detect conflicts based on object versions for this resolver.\n- *NONE* : Do not detect conflicts when invoking this resolver.",
            "stability": "external",
            "summary": "The Conflict Detection strategy to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4370
          },
          "name": "conflictDetection",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-resolver-syncconfig.html#cfn-appsync-resolver-syncconfig-conflicthandler"
            },
            "remarks": "- *OPTIMISTIC_CONCURRENCY* : Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.\n- *AUTOMERGE* : Resolve conflicts with the Automerge conflict resolution strategy.\n- *LAMBDA* : Resolve conflicts with an AWS Lambda function supplied in the `LambdaConflictHandlerConfig` .",
            "stability": "external",
            "summary": "The Conflict Resolution strategy to perform in the event of a conflict."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4380
          },
          "name": "conflictHandler",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-resolver-syncconfig.html#cfn-appsync-resolver-syncconfig-lambdaconflicthandlerconfig"
            },
            "stability": "external",
            "summary": "The `LambdaConflictHandlerConfig` when configuring `LAMBDA` as the Conflict Handler."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 4386
          },
          "name": "lambdaConflictHandlerConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnResolver.LambdaConflictHandlerConfigProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnResolver.SyncConfigProperty"
    },
    "@aws-cdk/aws-appsync.CfnResolverProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnResolver`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnResolverProps: appsync.CfnResolverProps = {\n  apiId: 'apiId',\n  fieldName: 'fieldName',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  cachingConfig: {\n    ttl: 123,\n\n    // the properties below are optional\n    cachingKeys: ['cachingKeys'],\n  },\n  dataSourceName: 'dataSourceName',\n  kind: 'kind',\n  maxBatchSize: 123,\n  pipelineConfig: {\n    functions: ['functions'],\n  },\n  requestMappingTemplate: 'requestMappingTemplate',\n  requestMappingTemplateS3Location: 'requestMappingTemplateS3Location',\n  responseMappingTemplate: 'responseMappingTemplate',\n  responseMappingTemplateS3Location: 'responseMappingTemplateS3Location',\n  syncConfig: {\n    conflictDetection: 'conflictDetection',\n\n    // the properties below are optional\n    conflictHandler: 'conflictHandler',\n    lambdaConflictHandlerConfig: {\n      lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n    },\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.CfnResolverProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync.generated.ts",
        "line": 3732
      },
      "name": "CfnResolverProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-apiid"
            },
            "stability": "external",
            "summary": "The AWS AppSync GraphQL API to which you want to attach this resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3739
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-fieldname"
            },
            "stability": "external",
            "summary": "The GraphQL field on a type that invokes the resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3746
          },
          "name": "fieldName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-typename"
            },
            "stability": "external",
            "summary": "The GraphQL type that invokes this resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3753
          },
          "name": "typeName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-cachingconfig"
            },
            "stability": "external",
            "summary": "The caching configuration for the resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3760
          },
          "name": "cachingConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnResolver.CachingConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-datasourcename"
            },
            "stability": "external",
            "summary": "The resolver data source name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3767
          },
          "name": "dataSourceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-kind"
            },
            "remarks": "- *UNIT* : A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.\n- *PIPELINE* : A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of `Function` objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.",
            "stability": "external",
            "summary": "The resolver type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3777
          },
          "name": "kind",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-maxbatchsize"
            },
            "stability": "external",
            "summary": "The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a `BatchInvoke` operation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3784
          },
          "name": "maxBatchSize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-pipelineconfig"
            },
            "stability": "external",
            "summary": "Functions linked with the pipeline resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3791
          },
          "name": "pipelineConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnResolver.PipelineConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-requestmappingtemplate"
            },
            "remarks": "Request mapping templates are optional when using a Lambda data source. For all other data sources, a request mapping template is required.",
            "stability": "external",
            "summary": "The request mapping template."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3800
          },
          "name": "requestMappingTemplate",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-requestmappingtemplates3location"
            },
            "remarks": "Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.",
            "stability": "external",
            "summary": "The location of a request mapping template in an Amazon S3 bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3807
          },
          "name": "requestMappingTemplateS3Location",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-responsemappingtemplate"
            },
            "stability": "external",
            "summary": "The response mapping template."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3814
          },
          "name": "responseMappingTemplate",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-responsemappingtemplates3location"
            },
            "remarks": "Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.",
            "stability": "external",
            "summary": "The location of a response mapping template in an Amazon S3 bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3821
          },
          "name": "responseMappingTemplateS3Location",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html#cfn-appsync-resolver-syncconfig"
            },
            "stability": "external",
            "summary": "The `SyncConfig` for a resolver attached to a versioned data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync.generated.ts",
            "line": 3828
          },
          "name": "syncConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnResolver.SyncConfigProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/appsync.generated:CfnResolverProps"
    },
    "@aws-cdk/aws-appsync.DataSourceOptions": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Optional configuration for data sources.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst dataSourceOptions: appsync.DataSourceOptions = {\n  description: 'description',\n  name: 'name',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.DataSourceOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi-base.ts",
        "line": 14
      },
      "name": "DataSourceOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No description",
            "stability": "experimental",
            "summary": "The description of the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 27
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- generated by cdk given the id",
            "stability": "experimental",
            "summary": "The name of the data source, overrides the id given by cdk."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 20
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graphqlapi-base:DataSourceOptions"
    },
    "@aws-cdk/aws-appsync.Directive": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "remarks": "i.e. @aws_iam or @aws_subscribe",
        "stability": "experimental",
        "summary": "Directives for types.",
        "example": "declare const api: appsync.GraphqlApi;\ndeclare const film: appsync.InterfaceType;\n\napi.addSubscription('addedFilm', new appsync.Field({\n  returnType: film.attribute(),\n  args: { id: appsync.GraphqlType.id({ isRequired: true }) },\n  directives: [appsync.Directive.subscribe('addFilm')],\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.Directive",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/schema-base.ts",
        "line": 190
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add the @aws_api_key directive."
          },
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 208
          },
          "name": "apiKey",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.Directive"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add the @aws_auth or @aws_cognito_user_pools directive."
          },
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 217
          },
          "name": "cognito",
          "parameters": [
            {
              "docs": {
                "summary": "the groups to allow access to."
              },
              "name": "groups",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.Directive"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a custom directive."
          },
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 249
          },
          "name": "custom",
          "parameters": [
            {
              "docs": {
                "summary": "- the directive statement to append."
              },
              "name": "statement",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.Directive"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add the @aws_iam directive."
          },
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 194
          },
          "name": "iam",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.Directive"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add the @aws_oidc directive."
          },
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 201
          },
          "name": "oidc",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.Directive"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Only use for top level Subscription type.",
            "stability": "experimental",
            "summary": "Add the @aws_subscribe directive."
          },
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 233
          },
          "name": "subscribe",
          "parameters": [
            {
              "docs": {
                "summary": "the mutation fields to link to."
              },
              "name": "mutations",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.Directive"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the directive statement."
          },
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 298
          },
          "name": "toString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Directive",
      "properties": [
        {
          "docs": {
            "default": "- not an authorization directive",
            "stability": "experimental",
            "summary": "The authorization type of this directive."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 258
          },
          "name": "mode",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.AuthorizationType"
          }
        },
        {
          "docs": {
            "default": "- not a subscription directive",
            "stability": "experimental",
            "summary": "Mutation fields for a subscription directive."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 265
          },
          "name": "mutationFields",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the authorization modes for this intermediate type."
          },
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 275
          },
          "name": "modes",
          "optional": true,
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.AuthorizationType"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/schema-base:Directive"
    },
    "@aws-cdk/aws-appsync.DomainOptions": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Domain name configuration for AppSync.",
        "example": "import * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: myDomainName,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.DomainOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 261
      },
      "name": "DomainOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The certificate to use with the domain name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 265
          },
          "name": "certificate",
          "type": {
            "fqn": "@aws-cdk/aws-certificatemanager.ICertificate"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "For example, `api.example.com`.",
            "stability": "experimental",
            "summary": "The actual domain name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 270
          },
          "name": "domainName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:DomainOptions"
    },
    "@aws-cdk/aws-appsync.DynamoDbDataSource": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/aws-appsync.BackedDataSource",
      "docs": {
        "stability": "experimental",
        "summary": "An AppSync datasource backed by a DynamoDB table.",
        "example": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.DynamoDbDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 217
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.DynamoDbDataSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 216
      },
      "name": "DynamoDbDataSource",
      "symbolId": "lib/data-source:DynamoDbDataSource"
    },
    "@aws-cdk/aws-appsync.DynamoDbDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for an AppSync DynamoDB datasource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\ndeclare const table: dynamodb.Table;\nconst dynamoDbDataSourceProps: appsync.DynamoDbDataSourceProps = {\n  api: graphqlApi,\n  table: table,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  readOnlyAccess: false,\n  serviceRole: role,\n  useCallerCredentials: false,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.DynamoDbDataSourceProps",
      "interfaces": [
        "@aws-cdk/aws-appsync.BackedDataSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 194
      },
      "name": "DynamoDbDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The DynamoDB table backing this data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 198
          },
          "name": "table",
          "type": {
            "fqn": "@aws-cdk/aws-dynamodb.ITable"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Specify whether this DS is read only or has read and write permissions to the DynamoDB table."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 204
          },
          "name": "readOnlyAccess",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "use credentials of caller to access DynamoDB."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 210
          },
          "name": "useCallerCredentials",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/data-source:DynamoDbDataSourceProps"
    },
    "@aws-cdk/aws-appsync.ElasticsearchDataSource": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/aws-appsync.BackedDataSource",
      "docs": {
        "deprecated": "- use `OpenSearchDataSource`",
        "stability": "deprecated",
        "summary": "An Appsync datasource backed by Elasticsearch.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as elasticsearch from '@aws-cdk/aws-elasticsearch';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const domain: elasticsearch.Domain;\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\nconst elasticsearchDataSource = new appsync.ElasticsearchDataSource(this, 'MyElasticsearchDataSource', {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.ElasticsearchDataSource",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 398
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.ElasticsearchDataSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 397
      },
      "name": "ElasticsearchDataSource",
      "symbolId": "lib/data-source:ElasticsearchDataSource"
    },
    "@aws-cdk/aws-appsync.ElasticsearchDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "deprecated": "- use `OpenSearchDataSourceProps` with `OpenSearchDataSource`",
        "stability": "deprecated",
        "summary": "Properties for the Elasticsearch Data Source.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as elasticsearch from '@aws-cdk/aws-elasticsearch';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const domain: elasticsearch.Domain;\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\nconst elasticsearchDataSourceProps: appsync.ElasticsearchDataSourceProps = {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.ElasticsearchDataSourceProps",
      "interfaces": [
        "@aws-cdk/aws-appsync.BackedDataSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 385
      },
      "name": "ElasticsearchDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "The elasticsearch domain containing the endpoint for the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 389
          },
          "name": "domain",
          "type": {
            "fqn": "@aws-cdk/aws-elasticsearch.IDomain"
          }
        }
      ],
      "symbolId": "lib/data-source:ElasticsearchDataSourceProps"
    },
    "@aws-cdk/aws-appsync.EnumType": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "Enum Types are abstract types that includes a set of fields that represent the strings this type can create.",
        "example": "declare const api: appsync.GraphqlApi;\nconst episode = new appsync.EnumType('Episode', {\n  definition: [\n    'NEWHOPE',\n    'EMPIRE',\n    'JEDI',\n  ],\n});\napi.addType(episode);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.EnumType",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/schema-intermediate.ts",
          "line": 428
        },
        "parameters": [
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.EnumTypeOptions"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-appsync.IIntermediateType"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/schema-intermediate.ts",
        "line": 414
      },
      "methods": [
        {
          "docs": {
            "remarks": "To add a field to this Enum Type, you must only configure\naddField with the fieldName options.",
            "stability": "experimental",
            "summary": "Add a field to this Enum Type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 466
          },
          "name": "addField",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "parameters": [
            {
              "docs": {
                "summary": "the options to add a field."
              },
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.AddFieldOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Create an GraphQL Type representing this Enum Type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 437
          },
          "name": "attribute",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the string of this enum type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 449
          },
          "name": "toString",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "EnumType",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "the attributes of this type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 422
          },
          "name": "definition",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.IField"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the name of this type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 418
          },
          "name": "name",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the authorization modes for this intermediate type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 426
          },
          "name": "modes",
          "optional": true,
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.AuthorizationType"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/schema-intermediate:EnumType"
    },
    "@aws-cdk/aws-appsync.EnumTypeOptions": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for configuring an Enum Type.",
        "example": "declare const api: appsync.GraphqlApi;\nconst episode = new appsync.EnumType('Episode', {\n  definition: [\n    'NEWHOPE',\n    'EMPIRE',\n    'JEDI',\n  ],\n});\napi.addType(episode);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.EnumTypeOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/schema-intermediate.ts",
        "line": 402
      },
      "name": "EnumTypeOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the attributes of this type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 406
          },
          "name": "definition",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/schema-intermediate:EnumTypeOptions"
    },
    "@aws-cdk/aws-appsync.ExtendedDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "remarks": "Should not be used directly.",
        "stability": "experimental",
        "summary": "props used by implementations of BaseDataSource to provide configuration.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst extendedDataSourceProps: appsync.ExtendedDataSourceProps = {\n  type: 'type',\n\n  // the properties below are optional\n  dynamoDbConfig: {\n    awsRegion: 'awsRegion',\n    tableName: 'tableName',\n\n    // the properties below are optional\n    deltaSyncConfig: {\n      baseTableTtl: 'baseTableTtl',\n      deltaSyncTableName: 'deltaSyncTableName',\n      deltaSyncTableTtl: 'deltaSyncTableTtl',\n    },\n    useCallerCredentials: false,\n    versioned: false,\n  },\n  elasticsearchConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  httpConfig: {\n    endpoint: 'endpoint',\n\n    // the properties below are optional\n    authorizationConfig: {\n      authorizationType: 'authorizationType',\n\n      // the properties below are optional\n      awsIamConfig: {\n        signingRegion: 'signingRegion',\n        signingServiceName: 'signingServiceName',\n      },\n    },\n  },\n  lambdaConfig: {\n    lambdaFunctionArn: 'lambdaFunctionArn',\n  },\n  openSearchServiceConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  relationalDatabaseConfig: {\n    relationalDatabaseSourceType: 'relationalDatabaseSourceType',\n\n    // the properties below are optional\n    rdsHttpEndpointConfig: {\n      awsRegion: 'awsRegion',\n      awsSecretStoreArn: 'awsSecretStoreArn',\n      dbClusterIdentifier: 'dbClusterIdentifier',\n\n      // the properties below are optional\n      databaseName: 'databaseName',\n      schema: 'schema',\n    },\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.ExtendedDataSourceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 56
      },
      "name": "ExtendedDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the type of the AppSync datasource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 60
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No config",
            "stability": "experimental",
            "summary": "configuration for DynamoDB Datasource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 66
          },
          "name": "dynamoDbConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.DynamoDBConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No config",
            "deprecated": "- use `openSearchConfig`",
            "stability": "deprecated",
            "summary": "configuration for Elasticsearch data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 73
          },
          "name": "elasticsearchConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.ElasticsearchConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No config",
            "stability": "experimental",
            "summary": "configuration for HTTP Datasource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 85
          },
          "name": "httpConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.HttpConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No config",
            "stability": "experimental",
            "summary": "configuration for Lambda Datasource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 91
          },
          "name": "lambdaConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.LambdaConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No config",
            "stability": "experimental",
            "summary": "configuration for OpenSearch data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 79
          },
          "name": "openSearchServiceConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.OpenSearchServiceConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No config",
            "stability": "experimental",
            "summary": "configuration for RDS Datasource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 97
          },
          "name": "relationalDatabaseConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-appsync.CfnDataSource.RelationalDatabaseConfigProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/data-source:ExtendedDataSourceProps"
    },
    "@aws-cdk/aws-appsync.ExtendedResolverProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Additional property for an AppSync resolver for data source reference.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const appsyncFunction: appsync.AppsyncFunction;\ndeclare const baseDataSource: appsync.BaseDataSource;\ndeclare const mappingTemplate: appsync.MappingTemplate;\nconst extendedResolverProps: appsync.ExtendedResolverProps = {\n  fieldName: 'fieldName',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  cachingConfig: {\n    ttl: cdk.Duration.minutes(30),\n\n    // the properties below are optional\n    cachingKeys: ['cachingKeys'],\n  },\n  dataSource: baseDataSource,\n  pipelineConfig: [appsyncFunction],\n  requestMappingTemplate: mappingTemplate,\n  responseMappingTemplate: mappingTemplate,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.ExtendedResolverProps",
      "interfaces": [
        "@aws-cdk/aws-appsync.BaseResolverProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/resolver.ts",
        "line": 56
      },
      "name": "ExtendedResolverProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No datasource",
            "stability": "experimental",
            "summary": "The data source this resolver is using."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 62
          },
          "name": "dataSource",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.BaseDataSource"
          }
        }
      ],
      "symbolId": "lib/resolver:ExtendedResolverProps"
    },
    "@aws-cdk/aws-appsync.Field": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/aws-appsync.GraphqlType",
      "docs": {
        "stability": "experimental",
        "summary": "Fields build upon Graphql Types and provide typing and arguments.",
        "example": "const field = new appsync.Field({\n  returnType: appsync.GraphqlType.string(),\n  args: {\n    argument: appsync.GraphqlType.string(),\n  },\n});\nconst type = new appsync.InterfaceType('Node', {\n  definition: { test: field },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.Field",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/schema-field.ts",
          "line": 375
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.FieldOptions"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-appsync.IField"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/schema-field.ts",
        "line": 367
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the args string of this resolvable field."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 389
          },
          "name": "argsToString",
          "overrides": "@aws-cdk/aws-appsync.GraphqlType",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the directives for this field."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 398
          },
          "name": "directivesToString",
          "overrides": "@aws-cdk/aws-appsync.GraphqlType",
          "parameters": [
            {
              "name": "modes",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-appsync.AuthorizationType"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Field",
      "properties": [
        {
          "docs": {
            "default": "- no arguments",
            "stability": "experimental",
            "summary": "The options for this field."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 373
          },
          "name": "fieldOptions",
          "optional": true,
          "overrides": "@aws-cdk/aws-appsync.IField",
          "type": {
            "fqn": "@aws-cdk/aws-appsync.ResolvableFieldOptions"
          }
        }
      ],
      "symbolId": "lib/schema-field:Field"
    },
    "@aws-cdk/aws-appsync.FieldLogLevel": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "log-level for fields in AppSync."
      },
      "fqn": "@aws-cdk/aws-appsync.FieldLogLevel",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 218
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "No logging."
          },
          "name": "NONE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Error logging."
          },
          "name": "ERROR"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "All logging."
          },
          "name": "ALL"
        }
      ],
      "name": "FieldLogLevel",
      "symbolId": "lib/graphqlapi:FieldLogLevel"
    },
    "@aws-cdk/aws-appsync.FieldOptions": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "options": "args - the variables and types that define the arguments\n\ni.e. { string: GraphqlType, string: GraphqlType }",
          "exampleMetadata": "infused"
        },
        "stability": "experimental",
        "summary": "Properties for configuring a field.",
        "example": "const field = new appsync.Field({\n  returnType: appsync.GraphqlType.string(),\n  args: {\n    argument: appsync.GraphqlType.string(),\n  },\n});\nconst type = new appsync.InterfaceType('Node', {\n  definition: { test: field },\n});"
      },
      "fqn": "@aws-cdk/aws-appsync.FieldOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/schema-field.ts",
        "line": 340
      },
      "name": "FieldOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The return type for this field."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 344
          },
          "name": "returnType",
          "type": {
            "fqn": "@aws-cdk/aws-appsync.GraphqlType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no arguments",
            "remarks": "i.e. type Example (first: String second: String) {}\n- where 'first' and 'second' are key values for args\nand 'String' is the GraphqlType",
            "stability": "experimental",
            "summary": "The arguments for this field."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 354
          },
          "name": "args",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.GraphqlType"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no directives",
            "stability": "experimental",
            "summary": "the directives for this field."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 360
          },
          "name": "directives",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.Directive"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/schema-field:FieldOptions"
    },
    "@aws-cdk/aws-appsync.GraphqlApi": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/aws-appsync.GraphqlApiBase",
      "docs": {
        "custom": {
          "resource": "AWS::AppSync::GraphQLApi",
          "exampleMetadata": "infused"
        },
        "stability": "experimental",
        "summary": "An AppSync GraphQL API.",
        "example": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);"
      },
      "fqn": "@aws-cdk/aws-appsync.GraphqlApi",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/graphqlapi.ts",
          "line": 471
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlApiProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 404
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import a GraphQL API through this function."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 412
          },
          "name": "fromGraphqlApiAttributes",
          "parameters": [
            {
              "docs": {
                "summary": "scope."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "docs": {
                "summary": "id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "GraphQL API Attributes of an API."
              },
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.GraphqlApiAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.IGraphqlApi"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "type Mutation {\n   fieldName: Field.returnType\n}",
            "stability": "experimental",
            "summary": "Add a mutation field to the schema's Mutation. CDK will create an Object Type called 'Mutation'. For example,."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 724
          },
          "name": "addMutation",
          "parameters": [
            {
              "docs": {
                "summary": "the name of the Mutation."
              },
              "name": "fieldName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the resolvable field to for this Mutation."
              },
              "name": "field",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.ResolvableField"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.ObjectType"
            }
          }
        },
        {
          "docs": {
            "remarks": "type Query {\n   fieldName: Field.returnType\n}",
            "stability": "experimental",
            "summary": "Add a query field to the schema's Query. CDK will create an Object Type called 'Query'. For example,."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 709
          },
          "name": "addQuery",
          "parameters": [
            {
              "docs": {
                "summary": "the name of the query."
              },
              "name": "fieldName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the resolvable field to for this query."
              },
              "name": "field",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.ResolvableField"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.ObjectType"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add schema dependency to a given construct."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 602
          },
          "name": "addSchemaDependency",
          "overrides": "@aws-cdk/aws-appsync.GraphqlApiBase",
          "parameters": [
            {
              "docs": {
                "summary": "the dependee."
              },
              "name": "construct",
              "type": {
                "fqn": "@aws-cdk/core.CfnResource"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "remarks": "type Subscription {\n   fieldName: Field.returnType\n}",
            "stability": "experimental",
            "summary": "Add a subscription field to the schema's Subscription. CDK will create an Object Type called 'Subscription'. For example,."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 739
          },
          "name": "addSubscription",
          "parameters": [
            {
              "docs": {
                "summary": "the name of the Subscription."
              },
              "name": "fieldName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the resolvable field to for this Subscription."
              },
              "name": "field",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.ResolvableField"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.ObjectType"
            }
          }
        },
        {
          "docs": {
            "default": "- ''",
            "remarks": "Will always result\nin a newline.",
            "stability": "experimental",
            "summary": "Escape hatch to append to Schema as desired."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 684
          },
          "name": "addToSchema",
          "parameters": [
            {
              "docs": {
                "summary": "the addition to add to schema."
              },
              "name": "addition",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the delimiter between schema and addition."
              },
              "name": "delimiter",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add type to the schema."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 694
          },
          "name": "addType",
          "parameters": [
            {
              "docs": {
                "summary": "the intermediate type to add to the schema."
              },
              "name": "type",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.IIntermediateType"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.IIntermediateType"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an IAM policy statement associated with this GraphQLApi to an IAM principal's policy."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 532
          },
          "name": "grant",
          "parameters": [
            {
              "docs": {
                "summary": "The principal."
              },
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            },
            {
              "docs": {
                "summary": "The set of resources to allow (i.e. ...:[region]:[accountId]:apis/GraphQLId/...)."
              },
              "name": "resources",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.IamResource"
              }
            },
            {
              "docs": {
                "summary": "The actions that should be granted to the principal (i.e. appsync:graphql )."
              },
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an IAM policy statement for Mutation access to this GraphQLApi to an IAM principal's policy."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 548
          },
          "name": "grantMutation",
          "parameters": [
            {
              "docs": {
                "summary": "The principal."
              },
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            },
            {
              "docs": {
                "summary": "The fields to grant access to that are Mutations (leave blank for all)."
              },
              "name": "fields",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an IAM policy statement for Query access to this GraphQLApi to an IAM principal's policy."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 559
          },
          "name": "grantQuery",
          "parameters": [
            {
              "docs": {
                "summary": "The principal."
              },
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            },
            {
              "docs": {
                "summary": "The fields to grant access to that are Queries (leave blank for all)."
              },
              "name": "fields",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an IAM policy statement for Subscription access to this GraphQLApi to an IAM principal's policy."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 570
          },
          "name": "grantSubscription",
          "parameters": [
            {
              "docs": {
                "summary": "The principal."
              },
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            },
            {
              "docs": {
                "summary": "The fields to grant access to that are Subscriptions (leave blank for all)."
              },
              "name": "fields",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          },
          "variadic": true
        }
      ],
      "name": "GraphqlApi",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "an unique AWS AppSync GraphQL API identifier i.e. 'lxz775lwdrgcndgz3nurvac7oa'."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 431
          },
          "name": "apiId",
          "overrides": "@aws-cdk/aws-appsync.GraphqlApiBase",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the ARN of the API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 436
          },
          "name": "arn",
          "overrides": "@aws-cdk/aws-appsync.GraphqlApiBase",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "GraphQlUrl"
            },
            "stability": "experimental",
            "summary": "the URL of the endpoint created by AppSync."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 443
          },
          "name": "graphqlUrl",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The Authorization Types for this GraphQL Api."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 458
          },
          "name": "modes",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.AuthorizationType"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the name of the API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 448
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the schema attached to this api."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 453
          },
          "name": "schema",
          "type": {
            "fqn": "@aws-cdk/aws-appsync.Schema"
          }
        },
        {
          "docs": {
            "default": "- no api key",
            "stability": "experimental",
            "summary": "the configured API key, if present."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 465
          },
          "name": "apiKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:GraphqlApi"
    },
    "@aws-cdk/aws-appsync.GraphqlApiAttributes": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Attributes for GraphQL imports.",
        "example": "declare const api: appsync.GraphqlApi;\ndeclare const table: dynamodb.Table;\nconst importedApi = appsync.GraphqlApi.fromGraphqlApiAttributes(this, 'IApi', {\n  graphqlApiId: api.apiId,\n  graphqlApiArn: api.arn,\n});\nimportedApi.addDynamoDbDataSource('TableDataSource', table);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.GraphqlApiAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 385
      },
      "name": "GraphqlApiAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "an unique AWS AppSync GraphQL API identifier i.e. 'lxz775lwdrgcndgz3nurvac7oa'."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 390
          },
          "name": "graphqlApiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- autogenerated arn",
            "stability": "experimental",
            "summary": "the arn for the GraphQL Api."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 396
          },
          "name": "graphqlApiArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:GraphqlApiAttributes"
    },
    "@aws-cdk/aws-appsync.GraphqlApiBase": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "stability": "experimental",
        "summary": "Base Class for GraphQL API."
      },
      "fqn": "@aws-cdk/aws-appsync.GraphqlApiBase",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/resource.ts",
          "line": 150
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/core.ResourceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-appsync.IGraphqlApi"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/graphqlapi-base.ts",
        "line": 150
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "add a new DynamoDB data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 185
          },
          "name": "addDynamoDbDataSource",
          "overrides": "@aws-cdk/aws-appsync.IGraphqlApi",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The DynamoDB table backing this data source."
              },
              "name": "table",
              "type": {
                "fqn": "@aws-cdk/aws-dynamodb.ITable"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.DynamoDbDataSource"
            }
          }
        },
        {
          "docs": {
            "deprecated": "- use `addOpenSearchDataSource`",
            "stability": "deprecated",
            "summary": "add a new elasticsearch data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 260
          },
          "name": "addElasticsearchDataSource",
          "overrides": "@aws-cdk/aws-appsync.IGraphqlApi",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The elasticsearch domain for this data source."
              },
              "name": "domain",
              "type": {
                "fqn": "@aws-cdk/aws-elasticsearch.IDomain"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.ElasticsearchDataSource"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "add a new http data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 201
          },
          "name": "addHttpDataSource",
          "overrides": "@aws-cdk/aws-appsync.IGraphqlApi",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The http endpoint."
              },
              "name": "endpoint",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.HttpDataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.HttpDataSource"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "add a new Lambda data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 218
          },
          "name": "addLambdaDataSource",
          "overrides": "@aws-cdk/aws-appsync.IGraphqlApi",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The Lambda function to call to interact with this data source."
              },
              "name": "lambdaFunction",
              "type": {
                "fqn": "@aws-cdk/aws-lambda.IFunction"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.LambdaDataSource"
            }
          }
        },
        {
          "docs": {
            "remarks": "Useful for pipeline resolvers\nand for backend changes that don't require a data source.",
            "stability": "experimental",
            "summary": "add a new dummy data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 170
          },
          "name": "addNoneDataSource",
          "overrides": "@aws-cdk/aws-appsync.IGraphqlApi",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.NoneDataSource"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "add a new OpenSearch data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 276
          },
          "name": "addOpenSearchDataSource",
          "overrides": "@aws-cdk/aws-appsync.IGraphqlApi",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The OpenSearch domain for this data source."
              },
              "name": "domain",
              "type": {
                "fqn": "@aws-cdk/aws-opensearchservice.IDomain"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.OpenSearchDataSource"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "add a new Rds data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 235
          },
          "name": "addRdsDataSource",
          "overrides": "@aws-cdk/aws-appsync.IGraphqlApi",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The serverless cluster to interact with this data source."
              },
              "name": "serverlessCluster",
              "type": {
                "fqn": "@aws-cdk/aws-rds.IServerlessCluster"
              }
            },
            {
              "docs": {
                "summary": "The secret store that contains the username and password for the serverless cluster."
              },
              "name": "secretStore",
              "type": {
                "fqn": "@aws-cdk/aws-secretsmanager.ISecret"
              }
            },
            {
              "docs": {
                "summary": "The optional name of the database to use within the cluster."
              },
              "name": "databaseName",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.RdsDataSource"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add schema dependency if not imported."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 300
          },
          "name": "addSchemaDependency",
          "overrides": "@aws-cdk/aws-appsync.IGraphqlApi",
          "parameters": [
            {
              "docs": {
                "summary": "the dependee."
              },
              "name": "construct",
              "type": {
                "fqn": "@aws-cdk/core.CfnResource"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "creates a new resolver for this datasource and API using the given properties."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 288
          },
          "name": "createResolver",
          "overrides": "@aws-cdk/aws-appsync.IGraphqlApi",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.ExtendedResolverProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.Resolver"
            }
          }
        }
      ],
      "name": "GraphqlApiBase",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "an unique AWS AppSync GraphQL API identifier i.e. 'lxz775lwdrgcndgz3nurvac7oa'."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 156
          },
          "name": "apiId",
          "overrides": "@aws-cdk/aws-appsync.IGraphqlApi",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the ARN of the API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 161
          },
          "name": "arn",
          "overrides": "@aws-cdk/aws-appsync.IGraphqlApi",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graphqlapi-base:GraphqlApiBase"
    },
    "@aws-cdk/aws-appsync.GraphqlApiProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for an AppSync GraphQL API.",
        "example": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.GraphqlApiProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 276
      },
      "name": "GraphqlApiProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the name of the GraphQL API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 280
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- API Key authorization",
            "stability": "experimental",
            "summary": "Optional authorization configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 287
          },
          "name": "authorizationConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.AuthorizationConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no domain name",
            "remarks": "The Route 53 hosted zone and CName DNS record must be configured in addition to this setting to\nenable custom domain URL",
            "stability": "experimental",
            "summary": "The domain name configuration for the GraphQL API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 320
          },
          "name": "domainName",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.DomainOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "experimental",
            "summary": "Logging configuration for this api."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 294
          },
          "name": "logConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.LogConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- schema will be generated code-first (i.e. addType, addObjectType, etc.)",
            "remarks": "Schema.fromFile(filePath: string) allows schema definition through schema.graphql file",
            "stability": "experimental",
            "summary": "GraphQL schema definition. Specify how you want to define your schema."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 304
          },
          "name": "schema",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.Schema"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "experimental",
            "summary": "A flag indicating whether or not X-Ray tracing is enabled for the GraphQL API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 310
          },
          "name": "xrayEnabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:GraphqlApiProps"
    },
    "@aws-cdk/aws-appsync.GraphqlType": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "remarks": "GraphQL Types are the\nbuilding blocks for object types, queries, mutations, etc. They are\ntypes like String, Int, Id or even Object Types you create.\n\ni.e. `String`, `String!`, `[String]`, `[String!]`, `[String]!`\n\nGraphQL Types are used to define the entirety of schema.",
        "stability": "experimental",
        "summary": "The GraphQL Types in AppSync's GraphQL.",
        "example": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.GraphqlType",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/schema-field.ts",
          "line": 295
        },
        "parameters": [
          {
            "name": "type",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.Type"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlTypeOptions"
            }
          }
        ],
        "protected": true
      },
      "interfaces": [
        "@aws-cdk/aws-appsync.IField"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/schema-field.ts",
        "line": 68
      },
      "methods": [
        {
          "docs": {
            "remarks": "In other words, accepts date strings in the form of `YYYY-MM-DD`. It accepts time zone offsets.",
            "stability": "experimental",
            "summary": "`AWSDate` scalar type represents a valid extended `ISO 8601 Date` string."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 137
          },
          "name": "awsDate",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute - isList - isRequired - isRequiredList."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "In other words, accepts date strings in the form of `YYYY-MM-DDThh:mm:ss.sssZ`. It accepts time zone offsets.",
            "stability": "experimental",
            "summary": "`AWSDateTime` scalar type represents a valid extended `ISO 8601 DateTime` string."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 163
          },
          "name": "awsDateTime",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute - isList - isRequired - isRequiredList."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "`AWSEmail` scalar type represents an email address string (i.e.`username@example.com`)."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 187
          },
          "name": "awsEmail",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute - isList - isRequired - isRequiredList."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "`AWSIPAddress` scalar type respresents a valid `IPv4` of `IPv6` address string."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 235
          },
          "name": "awsIpAddress",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute - isList - isRequired - isRequiredList."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "`AWSJson` scalar type represents a JSON string."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 198
          },
          "name": "awsJson",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute - isList - isRequired - isRequiredList."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "The number can specify a country code at the beginning, but is not required for US phone numbers.",
            "stability": "experimental",
            "summary": "`AWSPhone` scalar type represents a valid phone number. Phone numbers maybe be whitespace delimited or hyphenated."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 224
          },
          "name": "awsPhone",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute - isList - isRequired - isRequiredList."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "In other words, accepts date strings in the form of `hh:mm:ss.sss`. It accepts time zone offsets.",
            "stability": "experimental",
            "summary": "`AWSTime` scalar type represents a valid extended `ISO 8601 Time` string."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 150
          },
          "name": "awsTime",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute - isList - isRequired - isRequiredList."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Timestamps are serialized and deserialized as numbers.",
            "stability": "experimental",
            "summary": "`AWSTimestamp` scalar type represents the number of seconds since `1970-01-01T00:00Z`."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 176
          },
          "name": "awsTimestamp",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute - isList - isRequired - isRequiredList."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "URLs wihtout schemes or contain double slashes are considered invalid.",
            "stability": "experimental",
            "summary": "`AWSURL` scalar type represetns a valid URL string."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 211
          },
          "name": "awsUrl",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute - isList - isRequired - isRequiredList."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "`Boolean` scalar type is a boolean value: true or false."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 123
          },
          "name": "boolean",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute - isList - isRequired - isRequiredList."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "`Float` scalar type is a signed double-precision fractional value."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 112
          },
          "name": "float",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute - isList - isRequired - isRequiredList."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Often used as a key for a cache and not intended to be human-readable.",
            "stability": "experimental",
            "summary": "`ID` scalar type is a unique identifier. `ID` type is serialized similar to `String`."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 79
          },
          "name": "id",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute - isList - isRequired - isRequiredList."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "`Int` scalar type is a signed non-fractional numerical value."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 101
          },
          "name": "int",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute - isList - isRequired - isRequiredList."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "an intermediate type to be added as an attribute (i.e. an interface or an object type)."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 249
          },
          "name": "intermediate",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute - isList - isRequired - isRequiredList - intermediateType."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.GraphqlTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "`String` scalar type is a free-form human-readable text."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 90
          },
          "name": "string",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute - isList - isRequired - isRequiredList."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the arguments for this field."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 321
          },
          "name": "argsToString",
          "overrides": "@aws-cdk/aws-appsync.IField",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the directives for this field."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 328
          },
          "name": "directivesToString",
          "overrides": "@aws-cdk/aws-appsync.IField",
          "parameters": [
            {
              "name": "_modes",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-appsync.AuthorizationType"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the string for this attribute."
          },
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 306
          },
          "name": "toString",
          "overrides": "@aws-cdk/aws-appsync.IField",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "GraphqlType",
      "properties": [
        {
          "docs": {
            "default": "- false",
            "stability": "experimental",
            "summary": "property determining if this attribute is a list i.e. if true, attribute would be `[Type]`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 267
          },
          "name": "isList",
          "overrides": "@aws-cdk/aws-appsync.IField",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "default": "- false",
            "stability": "experimental",
            "summary": "property determining if this attribute is non-nullable i.e. if true, attribute would be `Type!` and this attribute must always have a value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 276
          },
          "name": "isRequired",
          "overrides": "@aws-cdk/aws-appsync.IField",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "default": "- false",
            "stability": "experimental",
            "summary": "property determining if this attribute is a non-nullable list i.e. if true, attribute would be `[ Type ]!` and this attribute's list must always have a value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 285
          },
          "name": "isRequiredList",
          "overrides": "@aws-cdk/aws-appsync.IField",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the type of attribute."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 259
          },
          "name": "type",
          "overrides": "@aws-cdk/aws-appsync.IField",
          "type": {
            "fqn": "@aws-cdk/aws-appsync.Type"
          }
        },
        {
          "docs": {
            "default": "- no intermediate type",
            "stability": "experimental",
            "summary": "the intermediate type linked to this attribute (i.e. an interface or an object)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 293
          },
          "name": "intermediateType",
          "optional": true,
          "overrides": "@aws-cdk/aws-appsync.IField",
          "type": {
            "fqn": "@aws-cdk/aws-appsync.IIntermediateType"
          }
        }
      ],
      "symbolId": "lib/schema-field:GraphqlType"
    },
    "@aws-cdk/aws-appsync.GraphqlTypeOptions": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "option": "objectType - the object type linked to this attribute",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "experimental",
        "summary": "Options for GraphQL Types.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const intermediateType: appsync.IIntermediateType;\nconst graphqlTypeOptions: appsync.GraphqlTypeOptions = {\n  intermediateType: intermediateType,\n  isList: false,\n  isRequired: false,\n  isRequiredList: false,\n};"
      },
      "fqn": "@aws-cdk/aws-appsync.GraphqlTypeOptions",
      "interfaces": [
        "@aws-cdk/aws-appsync.BaseTypeOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/schema-field.ts",
        "line": 51
      },
      "name": "GraphqlTypeOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no intermediate type",
            "stability": "experimental",
            "summary": "the intermediate type linked to this attribute."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 56
          },
          "name": "intermediateType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.IIntermediateType"
          }
        }
      ],
      "symbolId": "lib/schema-field:GraphqlTypeOptions"
    },
    "@aws-cdk/aws-appsync.HttpDataSource": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/aws-appsync.BackedDataSource",
      "docs": {
        "stability": "experimental",
        "summary": "An AppSync datasource backed by a http endpoint.",
        "example": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.HttpDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 271
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.HttpDataSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 270
      },
      "name": "HttpDataSource",
      "symbolId": "lib/data-source:HttpDataSource"
    },
    "@aws-cdk/aws-appsync.HttpDataSourceOptions": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Optional configuration for Http data sources.",
        "example": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.HttpDataSourceOptions",
      "interfaces": [
        "@aws-cdk/aws-appsync.DataSourceOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi-base.ts",
        "line": 33
      },
      "name": "HttpDataSourceOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "experimental",
            "summary": "The authorization config in case the HTTP endpoint requires authorization."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 39
          },
          "name": "authorizationConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.AwsIamConfig"
          }
        }
      ],
      "symbolId": "lib/graphqlapi-base:HttpDataSourceOptions"
    },
    "@aws-cdk/aws-appsync.HttpDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for an AppSync http datasource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\nconst httpDataSourceProps: appsync.HttpDataSourceProps = {\n  api: graphqlApi,\n  endpoint: 'endpoint',\n\n  // the properties below are optional\n  authorizationConfig: {\n    signingRegion: 'signingRegion',\n    signingServiceName: 'signingServiceName',\n  },\n  description: 'description',\n  name: 'name',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.HttpDataSourceProps",
      "interfaces": [
        "@aws-cdk/aws-appsync.BaseDataSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 252
      },
      "name": "HttpDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The http endpoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 256
          },
          "name": "endpoint",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "experimental",
            "summary": "The authorization config in case the HTTP endpoint requires authorization."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 264
          },
          "name": "authorizationConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.AwsIamConfig"
          }
        }
      ],
      "symbolId": "lib/data-source:HttpDataSourceProps"
    },
    "@aws-cdk/aws-appsync.IAppsyncFunction": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for AppSync Functions."
      },
      "fqn": "@aws-cdk/aws-appsync.IAppsyncFunction",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync-function.ts",
        "line": 63
      },
      "name": "IAppsyncFunction",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "the ARN of the AppSync function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 75
          },
          "name": "functionArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "the name of this AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 69
          },
          "name": "functionId",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync-function:IAppsyncFunction"
    },
    "@aws-cdk/aws-appsync.IField": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "A Graphql Field."
      },
      "fqn": "@aws-cdk/aws-appsync.IField",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/schema-base.ts",
        "line": 9
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Generate the arguments for this field."
          },
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 64
          },
          "name": "argsToString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no authorization modes",
            "stability": "experimental",
            "summary": "Generate the directives for this field."
          },
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 73
          },
          "name": "directivesToString",
          "parameters": [
            {
              "docs": {
                "summary": "the authorization modes of the graphql api."
              },
              "name": "modes",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-appsync.AuthorizationType"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Generate the string for this attribute."
          },
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 59
          },
          "name": "toString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IField",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "property determining if this attribute is a list i.e. if true, attribute would be `[Type]`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 21
          },
          "name": "isList",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "property determining if this attribute is non-nullable i.e. if true, attribute would be `Type!` and this attribute must always have a value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 30
          },
          "name": "isRequired",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "property determining if this attribute is a non-nullable list i.e. if true, attribute would be `[ Type ]!` and this attribute's list must always have a value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 39
          },
          "name": "isRequiredList",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the type of attribute."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 13
          },
          "name": "type",
          "type": {
            "fqn": "@aws-cdk/aws-appsync.Type"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- not a resolvable field",
            "stability": "experimental",
            "summary": "The options to make this field resolvable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 46
          },
          "name": "fieldOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.ResolvableFieldOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no intermediate type",
            "stability": "experimental",
            "summary": "the intermediate type linked to this attribute (i.e. an interface or an object)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 54
          },
          "name": "intermediateType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.IIntermediateType"
          }
        }
      ],
      "symbolId": "lib/schema-base:IField"
    },
    "@aws-cdk/aws-appsync.IGraphqlApi": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for GraphQL."
      },
      "fqn": "@aws-cdk/aws-appsync.IGraphqlApi",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi-base.ts",
        "line": 45
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "add a new DynamoDB data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 78
          },
          "name": "addDynamoDbDataSource",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The DynamoDB table backing this data source."
              },
              "name": "table",
              "type": {
                "fqn": "@aws-cdk/aws-dynamodb.ITable"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.DynamoDbDataSource"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "- use `addOpenSearchDataSource`",
            "stability": "deprecated",
            "summary": "add a new elasticsearch data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 123
          },
          "name": "addElasticsearchDataSource",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The elasticsearch domain for this data source."
              },
              "name": "domain",
              "type": {
                "fqn": "@aws-cdk/aws-elasticsearch.IDomain"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.ElasticsearchDataSource"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "add a new http data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 87
          },
          "name": "addHttpDataSource",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The http endpoint."
              },
              "name": "endpoint",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.HttpDataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.HttpDataSource"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "add a new Lambda data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 96
          },
          "name": "addLambdaDataSource",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The Lambda function to call to interact with this data source."
              },
              "name": "lambdaFunction",
              "type": {
                "fqn": "@aws-cdk/aws-lambda.IFunction"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.LambdaDataSource"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Useful for pipeline resolvers\nand for backend changes that don't require a data source.",
            "stability": "experimental",
            "summary": "add a new dummy data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 69
          },
          "name": "addNoneDataSource",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.NoneDataSource"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Add a new OpenSearch data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 132
          },
          "name": "addOpenSearchDataSource",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The OpenSearch domain for this data source."
              },
              "name": "domain",
              "type": {
                "fqn": "@aws-cdk/aws-opensearchservice.IDomain"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.OpenSearchDataSource"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "add a new Rds data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 107
          },
          "name": "addRdsDataSource",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The serverless cluster to interact with this data source."
              },
              "name": "serverlessCluster",
              "type": {
                "fqn": "@aws-cdk/aws-rds.IServerlessCluster"
              }
            },
            {
              "docs": {
                "summary": "The secret store that contains the username and password for the serverless cluster."
              },
              "name": "secretStore",
              "type": {
                "fqn": "@aws-cdk/aws-secretsmanager.ISecret"
              }
            },
            {
              "docs": {
                "summary": "The optional name of the database to use within the cluster."
              },
              "name": "databaseName",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.RdsDataSource"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Add schema dependency if not imported."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 144
          },
          "name": "addSchemaDependency",
          "parameters": [
            {
              "docs": {
                "summary": "the dependee."
              },
              "name": "construct",
              "type": {
                "fqn": "@aws-cdk/core.CfnResource"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "creates a new resolver for this datasource and API using the given properties."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 137
          },
          "name": "createResolver",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.ExtendedResolverProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.Resolver"
            }
          }
        }
      ],
      "name": "IGraphqlApi",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "an unique AWS AppSync GraphQL API identifier i.e. 'lxz775lwdrgcndgz3nurvac7oa'."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 53
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "the ARN of the API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 60
          },
          "name": "arn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graphqlapi-base:IGraphqlApi"
    },
    "@aws-cdk/aws-appsync.IIntermediateType": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "Intermediate Types are types that includes a certain set of fields that define the entirety of your schema."
      },
      "fqn": "@aws-cdk/aws-appsync.IIntermediateType",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/schema-base.ts",
        "line": 104
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Add a field to this Intermediate Type."
          },
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 169
          },
          "name": "addField",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.AddFieldOptions"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Create an GraphQL Type representing this Intermediate Type."
          },
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 159
          },
          "name": "attribute",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute - isList - isRequired - isRequiredList."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Generate the string of this object type."
          },
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 164
          },
          "name": "toString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IIntermediateType",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the attributes of this type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 113
          },
          "name": "definition",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.IField"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the name of this type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 108
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no directives",
            "stability": "experimental",
            "summary": "the directives for this object type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 127
          },
          "name": "directives",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.Directive"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no interface types",
            "stability": "experimental",
            "summary": "The Interface Types this Intermediate Type implements."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 120
          },
          "name": "interfaceTypes",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.InterfaceType"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no intermediate type",
            "stability": "experimental",
            "summary": "the intermediate type linked to this attribute (i.e. an interface or an object)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 140
          },
          "name": "intermediateType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.IIntermediateType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The resolvers linked to this data source."
          },
          "locationInModule": {
            "filename": "lib/schema-base.ts",
            "line": 132
          },
          "name": "resolvers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.Resolver"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/schema-base:IIntermediateType"
    },
    "@aws-cdk/aws-appsync.IamResource": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "A class used to generate resource arns for AppSync.",
        "example": "const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\ndeclare const api: appsync.GraphqlApi;\n\napi.grant(role, appsync.IamResource.custom('types/Mutation/fields/updateExample'), 'appsync:GraphQL');",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.IamResource",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 326
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the resource names that accepts all types: `*`."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 357
          },
          "name": "all",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.IamResource"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the resource names given custom arns."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 334
          },
          "name": "custom",
          "parameters": [
            {
              "docs": {
                "remarks": "Example: custom('/types/Query/fields/getExample')",
                "summary": "The custom arns that need to be permissioned."
              },
              "name": "arns",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.IamResource"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the resource names given a type and fields."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 349
          },
          "name": "ofType",
          "parameters": [
            {
              "docs": {
                "summary": "The type that needs to be allowed."
              },
              "name": "type",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "Example: ofType('Query', 'GetExample')",
                "summary": "The fields that need to be allowed, if empty grant permissions to ALL fields."
              },
              "name": "fields",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.IamResource"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return the Resource ARN."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 372
          },
          "name": "resourceArns",
          "parameters": [
            {
              "docs": {
                "summary": "The GraphQL API to give permissions."
              },
              "name": "api",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.GraphqlApi"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "IamResource",
      "symbolId": "lib/graphqlapi:IamResource"
    },
    "@aws-cdk/aws-appsync.InputType": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "remarks": "They are used in arguments to represent",
        "stability": "experimental",
        "summary": "Input Types are abstract types that define complex objects.",
        "example": "declare const api: appsync.GraphqlApi;\nconst review = new appsync.InputType('Review', {\n  definition: {\n    stars: appsync.GraphqlType.int({ isRequired: true }),\n    commentary: appsync.GraphqlType.string(),\n  },\n});\napi.addType(review);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.InputType",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/schema-intermediate.ts",
          "line": 247
        },
        "parameters": [
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.IntermediateTypeOptions"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-appsync.IIntermediateType"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/schema-intermediate.ts",
        "line": 233
      },
      "methods": [
        {
          "docs": {
            "remarks": "Input Types must have both fieldName and field options.",
            "stability": "experimental",
            "summary": "Add a field to this Input Type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 286
          },
          "name": "addField",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "parameters": [
            {
              "docs": {
                "summary": "the options to add a field."
              },
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.AddFieldOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Create a GraphQL Type representing this Input Type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 257
          },
          "name": "attribute",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the string of this input type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 269
          },
          "name": "toString",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "InputType",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "the attributes of this type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 241
          },
          "name": "definition",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.IField"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the name of this type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 237
          },
          "name": "name",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the authorization modes for this intermediate type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 245
          },
          "name": "modes",
          "optional": true,
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.AuthorizationType"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/schema-intermediate:InputType"
    },
    "@aws-cdk/aws-appsync.InterfaceType": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "Interface Types are abstract types that includes a certain set of fields that other types must include if they implement the interface.",
        "example": "const node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\nconst demo = new appsync.ObjectType('Demo', {\n  interfaceTypes: [ node ],\n  definition: {\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.InterfaceType",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/schema-intermediate.ts",
          "line": 54
        },
        "parameters": [
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.IntermediateTypeOptions"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-appsync.IIntermediateType"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/schema-intermediate.ts",
        "line": 34
      },
      "methods": [
        {
          "docs": {
            "remarks": "Interface Types must have both fieldName and field options.",
            "stability": "experimental",
            "summary": "Add a field to this Interface Type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 97
          },
          "name": "addField",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "parameters": [
            {
              "docs": {
                "summary": "the options to add a field."
              },
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.AddFieldOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Create a GraphQL Type representing this Intermediate Type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 65
          },
          "name": "attribute",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the string of this object type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 77
          },
          "name": "toString",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "InterfaceType",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "the attributes of this type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 42
          },
          "name": "definition",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.IField"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the name of this type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 38
          },
          "name": "name",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "default": "- no directives",
            "stability": "experimental",
            "summary": "the directives for this object type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 48
          },
          "name": "directives",
          "optional": true,
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.Directive"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the authorization modes for this intermediate type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 52
          },
          "name": "modes",
          "optional": true,
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.AuthorizationType"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/schema-intermediate:InterfaceType"
    },
    "@aws-cdk/aws-appsync.IntermediateTypeOptions": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for configuring an Intermediate Type.",
        "example": "const node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\nconst demo = new appsync.ObjectType('Demo', {\n  interfaceTypes: [ node ],\n  definition: {\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.IntermediateTypeOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/schema-intermediate.ts",
        "line": 16
      },
      "name": "IntermediateTypeOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the attributes of this type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 20
          },
          "name": "definition",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.IField"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no directives",
            "stability": "experimental",
            "summary": "the directives for this object type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 26
          },
          "name": "directives",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.Directive"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/schema-intermediate:IntermediateTypeOptions"
    },
    "@aws-cdk/aws-appsync.KeyCondition": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "Factory class for DynamoDB key conditions.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst keyCondition = appsync.KeyCondition.beginsWith('keyName', 'arg');",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.KeyCondition",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "remarks": "True if the key attribute k begins with the Query argument.",
            "stability": "experimental",
            "summary": "Condition (k, arg)."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 46
          },
          "name": "beginsWith",
          "parameters": [
            {
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.KeyCondition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Condition k BETWEEN arg1 AND arg2, true if k >= arg1 and k <= arg2."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 53
          },
          "name": "between",
          "parameters": [
            {
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg1",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg2",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.KeyCondition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Condition k = arg, true if the key attribute k is equal to the Query argument."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 11
          },
          "name": "eq",
          "parameters": [
            {
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.KeyCondition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Condition k >= arg, true if the key attribute k is greater or equal to the Query argument."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 39
          },
          "name": "ge",
          "parameters": [
            {
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.KeyCondition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Condition k > arg, true if the key attribute k is greater than the the Query argument."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 32
          },
          "name": "gt",
          "parameters": [
            {
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.KeyCondition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Condition k <= arg, true if the key attribute k is less than or equal to the Query argument."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 25
          },
          "name": "le",
          "parameters": [
            {
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.KeyCondition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Condition k < arg, true if the key attribute k is less than the Query argument."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 18
          },
          "name": "lt",
          "parameters": [
            {
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.KeyCondition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Conjunction between two conditions."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 62
          },
          "name": "and",
          "parameters": [
            {
              "name": "keyCond",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.KeyCondition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.KeyCondition"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders the key condition to a VTL string."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 69
          },
          "name": "renderTemplate",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "KeyCondition",
      "symbolId": "lib/key:KeyCondition"
    },
    "@aws-cdk/aws-appsync.LambdaAuthorizerConfig": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "remarks": "Note that you can only have a single AWS Lambda function configured to authorize your API.",
        "stability": "experimental",
        "summary": "Configuration for Lambda authorization in AppSync.",
        "example": "import * as lambda from '@aws-cdk/aws-lambda';\ndeclare const authFunction: lambda.Function;\n\nnew appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'appsync.test.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.LAMBDA,\n      lambdaAuthorizerConfig: {\n        handler: authFunction,\n        // can also specify `resultsCacheTtl` and `validationRegex`.\n      },\n    },\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.LambdaAuthorizerConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 167
      },
      "name": "LambdaAuthorizerConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Note: This Lambda function must have the following resource-based policy assigned to it.\nWhen configuring Lambda authorizers in the console, this is done for you.\nTo do so with the AWS CLI, run the following:\n\n`aws lambda add-permission --function-name \"arn:aws:lambda:us-east-2:111122223333:function:my-function\" --statement-id \"appsync\" --principal appsync.amazonaws.com --action lambda:InvokeFunction`",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-lambdaauthorizerconfig.html",
            "stability": "experimental",
            "summary": "The authorizer lambda function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 178
          },
          "name": "handler",
          "type": {
            "fqn": "@aws-cdk/aws-lambda.IFunction"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.minutes(5)",
            "remarks": "Disable caching by setting this to 0.",
            "stability": "experimental",
            "summary": "How long the results are cached."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 186
          },
          "name": "resultsCacheTtl",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no regex filter will be applied.",
            "stability": "experimental",
            "summary": "A regular expression for validation of tokens before the Lambda function is called."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 193
          },
          "name": "validationRegex",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:LambdaAuthorizerConfig"
    },
    "@aws-cdk/aws-appsync.LambdaDataSource": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/aws-appsync.BackedDataSource",
      "docs": {
        "stability": "experimental",
        "summary": "An AppSync datasource backed by a Lambda function.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const function_: lambda.Function;\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\nconst lambdaDataSource = new appsync.LambdaDataSource(this, 'MyLambdaDataSource', {\n  api: graphqlApi,\n  lambdaFunction: function_,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.LambdaDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 300
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.LambdaDataSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 299
      },
      "name": "LambdaDataSource",
      "symbolId": "lib/data-source:LambdaDataSource"
    },
    "@aws-cdk/aws-appsync.LambdaDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for an AppSync Lambda datasource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const function_: lambda.Function;\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\nconst lambdaDataSourceProps: appsync.LambdaDataSourceProps = {\n  api: graphqlApi,\n  lambdaFunction: function_,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.LambdaDataSourceProps",
      "interfaces": [
        "@aws-cdk/aws-appsync.BackedDataSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 289
      },
      "name": "LambdaDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The Lambda function to call to interact with this data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 293
          },
          "name": "lambdaFunction",
          "type": {
            "fqn": "@aws-cdk/aws-lambda.IFunction"
          }
        }
      ],
      "symbolId": "lib/data-source:LambdaDataSourceProps"
    },
    "@aws-cdk/aws-appsync.LogConfig": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Logging configuration for AppSync.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst logConfig: appsync.LogConfig = {\n  excludeVerboseContent: false,\n  fieldLogLevel: appsync.FieldLogLevel.NONE,\n  role: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.LogConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 236
      },
      "name": "LogConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "exclude verbose content."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 242
          },
          "name": "excludeVerboseContent",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Use AppSync default",
            "stability": "experimental",
            "summary": "log level for fields."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 248
          },
          "name": "fieldLogLevel",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.FieldLogLevel"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "experimental",
            "summary": "The role for CloudWatch Logs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 255
          },
          "name": "role",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:LogConfig"
    },
    "@aws-cdk/aws-appsync.MappingTemplate": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "MappingTemplates for AppSync resolvers.",
        "example": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.MappingTemplate",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/mapping-template.ts",
        "line": 7
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template to delete a single item from a DynamoDB table."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 68
          },
          "name": "dynamoDbDeleteItem",
          "parameters": [
            {
              "docs": {
                "summary": "the name of the hash key field."
              },
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the name of the Mutation argument."
              },
              "name": "idArg",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template to get a single item from a DynamoDB table."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 58
          },
          "name": "dynamoDbGetItem",
          "parameters": [
            {
              "docs": {
                "summary": "the name of the hash key field."
              },
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the name of the Query argument."
              },
              "name": "idArg",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template to save a single item to a DynamoDB table."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 78
          },
          "name": "dynamoDbPutItem",
          "parameters": [
            {
              "docs": {
                "summary": "the assigment of Mutation values to the primary key."
              },
              "name": "key",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.PrimaryKey"
              }
            },
            {
              "docs": {
                "summary": "the assignment of Mutation values to the table attributes."
              },
              "name": "values",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.AttributeValues"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template to query a set of items from a DynamoDB table."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 48
          },
          "name": "dynamoDbQuery",
          "parameters": [
            {
              "docs": {
                "summary": "the key condition for the query."
              },
              "name": "cond",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.KeyCondition"
              }
            },
            {
              "name": "indexName",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template for a single result item from DynamoDB."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 32
          },
          "name": "dynamoDbResultItem",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template for a result list from DynamoDB."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 25
          },
          "name": "dynamoDbResultList",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template to scan a DynamoDB table to fetch all entries."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 39
          },
          "name": "dynamoDbScanTable",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Create a mapping template from the given file."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 18
          },
          "name": "fromFile",
          "parameters": [
            {
              "name": "fileName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Create a mapping template from the given string."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 11
          },
          "name": "fromString",
          "parameters": [
            {
              "name": "template",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template to invoke a Lambda function."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 96
          },
          "name": "lambdaRequest",
          "parameters": [
            {
              "docs": {
                "remarks": "If no payload is provided all available context fields are sent to the Lambda function",
                "summary": "the VTL template snippet of the payload to send to the lambda."
              },
              "name": "payload",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the type of operation AppSync should perform on the data source."
              },
              "name": "operation",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template to return the Lambda result to the caller."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 103
          },
          "name": "lambdaResult",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "this is called to render the mapping template to a VTL string."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 110
          },
          "name": "renderTemplate",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "MappingTemplate",
      "symbolId": "lib/mapping-template:MappingTemplate"
    },
    "@aws-cdk/aws-appsync.NoneDataSource": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/aws-appsync.BaseDataSource",
      "docs": {
        "stability": "experimental",
        "summary": "An AppSync dummy datasource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\nconst noneDataSource = new appsync.NoneDataSource(this, 'MyNoneDataSource', {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.NoneDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 184
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.NoneDataSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 183
      },
      "name": "NoneDataSource",
      "symbolId": "lib/data-source:NoneDataSource"
    },
    "@aws-cdk/aws-appsync.NoneDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for an AppSync dummy datasource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\nconst noneDataSourceProps: appsync.NoneDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.NoneDataSourceProps",
      "interfaces": [
        "@aws-cdk/aws-appsync.BaseDataSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 177
      },
      "name": "NoneDataSourceProps",
      "symbolId": "lib/data-source:NoneDataSourceProps"
    },
    "@aws-cdk/aws-appsync.ObjectType": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/aws-appsync.InterfaceType",
      "docs": {
        "stability": "experimental",
        "summary": "Object Types are types declared by you.",
        "example": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.ObjectType",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/schema-intermediate.ts",
          "line": 149
        },
        "parameters": [
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.ObjectTypeOptions"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-appsync.IIntermediateType"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/schema-intermediate.ts",
        "line": 137
      },
      "methods": [
        {
          "docs": {
            "remarks": "Object Types must have both fieldName and field options.",
            "stability": "experimental",
            "summary": "Add a field to this Object Type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 189
          },
          "name": "addField",
          "overrides": "@aws-cdk/aws-appsync.InterfaceType",
          "parameters": [
            {
              "docs": {
                "summary": "the options to add a field."
              },
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.AddFieldOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the resolvers linked to this Object Type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 216
          },
          "name": "generateResolver",
          "parameters": [
            {
              "name": "api",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.IGraphqlApi"
              }
            },
            {
              "name": "fieldName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.ResolvableFieldOptions"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.Resolver"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the string of this object type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 199
          },
          "name": "toString",
          "overrides": "@aws-cdk/aws-appsync.InterfaceType",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "ObjectType",
      "properties": [
        {
          "docs": {
            "default": "- no interface types",
            "stability": "experimental",
            "summary": "The Interface Types this Object Type implements."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 143
          },
          "name": "interfaceTypes",
          "optional": true,
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.InterfaceType"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The resolvers linked to this data source."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 147
          },
          "name": "resolvers",
          "optional": true,
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.Resolver"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/schema-intermediate:ObjectType"
    },
    "@aws-cdk/aws-appsync.ObjectTypeOptions": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for configuring an Object Type.",
        "example": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.ObjectTypeOptions",
      "interfaces": [
        "@aws-cdk/aws-appsync.IntermediateTypeOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/schema-intermediate.ts",
        "line": 124
      },
      "name": "ObjectTypeOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no interface types",
            "stability": "experimental",
            "summary": "The Interface Types this Object Type implements."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 130
          },
          "name": "interfaceTypes",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.InterfaceType"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/schema-intermediate:ObjectTypeOptions"
    },
    "@aws-cdk/aws-appsync.OpenIdConnectConfig": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Configuration for OpenID Connect authorization in AppSync.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst openIdConnectConfig: appsync.OpenIdConnectConfig = {\n  oidcProvider: 'oidcProvider',\n\n  // the properties below are optional\n  clientId: 'clientId',\n  tokenExpiryFromAuth: 123,\n  tokenExpiryFromIssue: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.OpenIdConnectConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 138
      },
      "name": "OpenIdConnectConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The issuer returned by discovery must exactly match the value of `iss` in the OIDC token.",
            "stability": "experimental",
            "summary": "The issuer for the OIDC configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 161
          },
          "name": "oidcProvider",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- * (All)",
            "example": "- 'ABCD|CDEF' // where ABCD and CDEF are two different clientId",
            "remarks": "A regular expression can be specified so AppSync can validate against multiple client identifiers at a time.",
            "stability": "experimental",
            "summary": "The client identifier of the Relying party at the OpenID identity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 157
          },
          "name": "clientId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no validation",
            "remarks": "`auth_time` claim in OIDC token is required for this validation to work.",
            "stability": "experimental",
            "summary": "The number of milliseconds an OIDC token is valid after being authenticated by OIDC provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 144
          },
          "name": "tokenExpiryFromAuth",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no validation",
            "remarks": "This validation uses `iat` claim of OIDC token.",
            "stability": "experimental",
            "summary": "The number of milliseconds an OIDC token is valid after being issued to a user."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 150
          },
          "name": "tokenExpiryFromIssue",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:OpenIdConnectConfig"
    },
    "@aws-cdk/aws-appsync.OpenSearchDataSource": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/aws-appsync.BackedDataSource",
      "docs": {
        "stability": "experimental",
        "summary": "An Appsync datasource backed by OpenSearch.",
        "example": "import * as opensearch from '@aws-cdk/aws-opensearchservice';\n\nconst user = new iam.User(this, 'User');\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_2,\n  removalPolicy: RemovalPolicy.DESTROY,\n  fineGrainedAccessControl: { masterUserArn: user.userArn },\n  encryptionAtRest: { enabled: true },\n  nodeToNodeEncryption: true,\n  enforceHttps: true,\n});\n\ndeclare const api: appsync.GraphqlApi;\nconst ds = api.addOpenSearchDataSource('ds', domain);\n\nds.createResolver({\n  typeName: 'Query',\n  fieldName: 'getTests',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(JSON.stringify({\n    version: '2017-02-28',\n    operation: 'GET',\n    path: '/id/post/_search',\n    params: {\n      headers: {},\n      queryString: {},\n      body: { from: 0, size: 50 },\n    },\n  })),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`[\n    #foreach($entry in $context.result.hits.hits)\n    #if( $velocityCount > 1 ) , #end\n    $utils.toJson($entry.get(\"_source\"))\n    #end\n  ]`),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.OpenSearchDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 425
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.OpenSearchDataSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 424
      },
      "name": "OpenSearchDataSource",
      "symbolId": "lib/data-source:OpenSearchDataSource"
    },
    "@aws-cdk/aws-appsync.OpenSearchDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for the OpenSearch Data Source.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n\ndeclare const domain: opensearchservice.Domain;\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\nconst openSearchDataSourceProps: appsync.OpenSearchDataSourceProps = {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.OpenSearchDataSourceProps",
      "interfaces": [
        "@aws-cdk/aws-appsync.BackedDataSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 414
      },
      "name": "OpenSearchDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The OpenSearch domain containing the endpoint for the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 418
          },
          "name": "domain",
          "type": {
            "fqn": "@aws-cdk/aws-opensearchservice.IDomain"
          }
        }
      ],
      "symbolId": "lib/data-source:OpenSearchDataSourceProps"
    },
    "@aws-cdk/aws-appsync.PartitionKey": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/aws-appsync.PrimaryKey",
      "docs": {
        "remarks": "It can be\nenhanced with the assignment of the sort key.",
        "stability": "experimental",
        "summary": "Specifies the assignment to the partition key.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const assign: appsync.Assign;\nconst partitionKey = new appsync.PartitionKey(assign);",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.PartitionKey",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/key.ts",
          "line": 180
        },
        "parameters": [
          {
            "name": "pkey",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.Assign"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 179
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Allows assigning a value to the sort key."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 187
          },
          "name": "sort",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.SortKeyStep"
            }
          }
        }
      ],
      "name": "PartitionKey",
      "symbolId": "lib/key:PartitionKey"
    },
    "@aws-cdk/aws-appsync.PartitionKeyStep": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "Utility class to allow assigning a value or an auto-generated id to a partition key.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst partitionKeyStep = new appsync.PartitionKeyStep('key');",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.PartitionKeyStep",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/key.ts",
          "line": 108
        },
        "parameters": [
          {
            "name": "key",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 107
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Assign an auto-generated value to the partition key."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 120
          },
          "name": "auto",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.PartitionKey"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Assign an auto-generated value to the partition key."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 113
          },
          "name": "is",
          "parameters": [
            {
              "name": "val",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.PartitionKey"
            }
          }
        }
      ],
      "name": "PartitionKeyStep",
      "symbolId": "lib/key:PartitionKeyStep"
    },
    "@aws-cdk/aws-appsync.PrimaryKey": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "remarks": "It either\ncontains the full primary key or only the partition key.",
        "stability": "experimental",
        "summary": "Specifies the assignment to the primary key.",
        "example": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.PrimaryKey",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/key.ts",
          "line": 159
        },
        "parameters": [
          {
            "name": "pkey",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.Assign"
            }
          },
          {
            "name": "skey",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-appsync.Assign"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 151
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Allows assigning a value to the partition key."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 155
          },
          "name": "partition",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.PartitionKeyStep"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders the key assignment to a VTL string."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 164
          },
          "name": "renderTemplate",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "PrimaryKey",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 159
          },
          "name": "pkey",
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.Assign"
          }
        }
      ],
      "symbolId": "lib/key:PrimaryKey"
    },
    "@aws-cdk/aws-appsync.RdsDataSource": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/aws-appsync.BackedDataSource",
      "docs": {
        "stability": "experimental",
        "summary": "An AppSync datasource backed by RDS.",
        "example": "// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.RdsDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 335
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.RdsDataSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 334
      },
      "name": "RdsDataSource",
      "symbolId": "lib/data-source:RdsDataSource"
    },
    "@aws-cdk/aws-appsync.RdsDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for an AppSync RDS datasource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\ndeclare const secret: secretsmanager.Secret;\ndeclare const serverlessCluster: rds.ServerlessCluster;\nconst rdsDataSourceProps: appsync.RdsDataSourceProps = {\n  api: graphqlApi,\n  secretStore: secret,\n  serverlessCluster: serverlessCluster,\n\n  // the properties below are optional\n  databaseName: 'databaseName',\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.RdsDataSourceProps",
      "interfaces": [
        "@aws-cdk/aws-appsync.BackedDataSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 314
      },
      "name": "RdsDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The secret containing the credentials for the database."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 322
          },
          "name": "secretStore",
          "type": {
            "fqn": "@aws-cdk/aws-secretsmanager.ISecret"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The serverless cluster to call to interact with this data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 318
          },
          "name": "serverlessCluster",
          "type": {
            "fqn": "@aws-cdk/aws-rds.IServerlessCluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "experimental",
            "summary": "The name of the database to use within the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 328
          },
          "name": "databaseName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/data-source:RdsDataSourceProps"
    },
    "@aws-cdk/aws-appsync.ResolvableField": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/aws-appsync.Field",
      "docs": {
        "stability": "experimental",
        "summary": "Resolvable Fields build upon Graphql Types and provide fields that can resolve into operations on a data source.",
        "example": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.ResolvableField",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/schema-field.ts",
          "line": 452
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.ResolvableFieldOptions"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-appsync.IField"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/schema-field.ts",
        "line": 444
      },
      "name": "ResolvableField",
      "properties": [
        {
          "docs": {
            "default": "- not a resolvable field",
            "stability": "experimental",
            "summary": "The options to make this field resolvable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 450
          },
          "name": "fieldOptions",
          "optional": true,
          "overrides": "@aws-cdk/aws-appsync.Field",
          "type": {
            "fqn": "@aws-cdk/aws-appsync.ResolvableFieldOptions"
          }
        }
      ],
      "symbolId": "lib/schema-field:ResolvableField"
    },
    "@aws-cdk/aws-appsync.ResolvableFieldOptions": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "custom": {
          "options": "responseMappingTemplate - the mapping template for responses from this resolver",
          "exampleMetadata": "infused"
        },
        "stability": "experimental",
        "summary": "Properties for configuring a resolvable field.",
        "example": "declare const api: appsync.GraphqlApi;\ndeclare const filmNode: appsync.ObjectType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst string = appsync.GraphqlType.string();\nconst int = appsync.GraphqlType.int();\napi.addMutation('addFilm', new appsync.ResolvableField({\n  returnType: filmNode.attribute(),\n  args: { name: string, film_number: int },\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));"
      },
      "fqn": "@aws-cdk/aws-appsync.ResolvableFieldOptions",
      "interfaces": [
        "@aws-cdk/aws-appsync.FieldOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/schema-field.ts",
        "line": 412
      },
      "name": "ResolvableFieldOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no data source",
            "stability": "experimental",
            "summary": "The data source creating linked to this resolvable field."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 418
          },
          "name": "dataSource",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.BaseDataSource"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no pipeline resolver configuration\nAn empty array or undefined prop will set resolver to be of type unit",
            "stability": "experimental",
            "summary": "configuration of the pipeline resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 425
          },
          "name": "pipelineConfig",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.IAppsyncFunction"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No mapping template",
            "stability": "experimental",
            "summary": "The request mapping template for this resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 431
          },
          "name": "requestMappingTemplate",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No mapping template",
            "stability": "experimental",
            "summary": "The response mapping template for this resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-field.ts",
            "line": 437
          },
          "name": "responseMappingTemplate",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
          }
        }
      ],
      "symbolId": "lib/schema-field:ResolvableFieldOptions"
    },
    "@aws-cdk/aws-appsync.Resolver": {
      "assembly": "@aws-cdk/aws-appsync",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "An AppSync resolver.",
        "example": "declare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.Resolver",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/resolver.ts",
          "line": 86
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.ResolverProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/resolver.ts",
        "line": 78
      },
      "name": "Resolver",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "the ARN of the resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 82
          },
          "name": "arn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/resolver:Resolver"
    },
    "@aws-cdk/aws-appsync.ResolverProps": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Additional property for an AppSync resolver for GraphQL API reference.",
        "example": "declare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.ResolverProps",
      "interfaces": [
        "@aws-cdk/aws-appsync.ExtendedResolverProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/resolver.ts",
        "line": 68
      },
      "name": "ResolverProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The API this resolver is attached to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 72
          },
          "name": "api",
          "type": {
            "fqn": "@aws-cdk/aws-appsync.IGraphqlApi"
          }
        }
      ],
      "symbolId": "lib/resolver:ResolverProps"
    },
    "@aws-cdk/aws-appsync.Schema": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "remarks": "If no options are configured, schema will be generated\ncode-first.",
        "stability": "experimental",
        "summary": "The Schema for a GraphQL Api.",
        "example": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.Schema",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/schema.ts",
          "line": 61
        },
        "parameters": [
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-appsync.SchemaOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/schema.ts",
        "line": 33
      },
      "methods": [
        {
          "docs": {
            "returns": "`SchemaAsset` with immutable schema defintion",
            "stability": "experimental",
            "summary": "Generate a Schema from file."
          },
          "locationInModule": {
            "filename": "lib/schema.ts",
            "line": 40
          },
          "name": "fromAsset",
          "parameters": [
            {
              "docs": {
                "summary": "the file path of the schema file."
              },
              "name": "filePath",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.Schema"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "type Mutation {\n   fieldName: Field.returnType\n}",
            "stability": "experimental",
            "summary": "Add a mutation field to the schema's Mutation. CDK will create an Object Type called 'Mutation'. For example,."
          },
          "locationInModule": {
            "filename": "lib/schema.ts",
            "line": 144
          },
          "name": "addMutation",
          "parameters": [
            {
              "docs": {
                "summary": "the name of the Mutation."
              },
              "name": "fieldName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the resolvable field to for this Mutation."
              },
              "name": "field",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.ResolvableField"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.ObjectType"
            }
          }
        },
        {
          "docs": {
            "remarks": "type Query {\n   fieldName: Field.returnType\n}",
            "stability": "experimental",
            "summary": "Add a query field to the schema's Query. CDK will create an Object Type called 'Query'. For example,."
          },
          "locationInModule": {
            "filename": "lib/schema.ts",
            "line": 121
          },
          "name": "addQuery",
          "parameters": [
            {
              "docs": {
                "summary": "the name of the query."
              },
              "name": "fieldName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the resolvable field to for this query."
              },
              "name": "field",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.ResolvableField"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.ObjectType"
            }
          }
        },
        {
          "docs": {
            "remarks": "type Subscription {\n   fieldName: Field.returnType\n}",
            "stability": "experimental",
            "summary": "Add a subscription field to the schema's Subscription. CDK will create an Object Type called 'Subscription'. For example,."
          },
          "locationInModule": {
            "filename": "lib/schema.ts",
            "line": 167
          },
          "name": "addSubscription",
          "parameters": [
            {
              "docs": {
                "summary": "the name of the Subscription."
              },
              "name": "fieldName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the resolvable field to for this Subscription."
              },
              "name": "field",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.Field"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.ObjectType"
            }
          }
        },
        {
          "docs": {
            "default": "- ''",
            "remarks": "Will always result\nin a newline.",
            "stability": "experimental",
            "summary": "Escape hatch to add to Schema as desired."
          },
          "locationInModule": {
            "filename": "lib/schema.ts",
            "line": 102
          },
          "name": "addToSchema",
          "parameters": [
            {
              "docs": {
                "summary": "the addition to add to schema."
              },
              "name": "addition",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the delimiter between schema and addition."
              },
              "name": "delimiter",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add type to the schema."
          },
          "locationInModule": {
            "filename": "lib/schema.ts",
            "line": 189
          },
          "name": "addType",
          "parameters": [
            {
              "docs": {
                "summary": "the intermediate type to add to the schema."
              },
              "name": "type",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.IIntermediateType"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.IIntermediateType"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Called when the GraphQL Api is initialized to allow this object to bind to the stack."
          },
          "locationInModule": {
            "filename": "lib/schema.ts",
            "line": 78
          },
          "name": "bind",
          "parameters": [
            {
              "docs": {
                "summary": "The binding GraphQL Api."
              },
              "name": "api",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.GraphqlApi"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.CfnGraphQLSchema"
            }
          }
        }
      ],
      "name": "Schema",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The definition for this schema."
          },
          "locationInModule": {
            "filename": "lib/schema.ts",
            "line": 47
          },
          "name": "definition",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/schema:Schema"
    },
    "@aws-cdk/aws-appsync.SchemaOptions": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "remarks": "If no options are specified, then the schema will\nbe generated code-first.",
        "stability": "experimental",
        "summary": "The options for configuring a schema.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst schemaOptions: appsync.SchemaOptions = {\n  filePath: 'filePath',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.SchemaOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/schema.ts",
        "line": 16
      },
      "name": "SchemaOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- schema not configured through disk asset",
            "remarks": "When this option is\nconfigured, then the schema will be generated from an\nexisting file from disk.",
            "stability": "experimental",
            "summary": "The file path for the schema."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema.ts",
            "line": 24
          },
          "name": "filePath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/schema:SchemaOptions"
    },
    "@aws-cdk/aws-appsync.SortKeyStep": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "Utility class to allow assigning a value or an auto-generated id to a sort key.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const assign: appsync.Assign;\nconst sortKeyStep = new appsync.SortKeyStep(assign, 'skey');",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.SortKeyStep",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/key.ts",
          "line": 130
        },
        "parameters": [
          {
            "name": "pkey",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.Assign"
            }
          },
          {
            "name": "skey",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 129
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Assign an auto-generated value to the sort key."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 142
          },
          "name": "auto",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.PrimaryKey"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Assign an auto-generated value to the sort key."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 135
          },
          "name": "is",
          "parameters": [
            {
              "name": "val",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.PrimaryKey"
            }
          }
        }
      ],
      "name": "SortKeyStep",
      "symbolId": "lib/key:SortKeyStep"
    },
    "@aws-cdk/aws-appsync.Type": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "Enum containing the Types that can be used to define ObjectTypes."
      },
      "fqn": "@aws-cdk/aws-appsync.Type",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/schema-base.ts",
        "line": 312
      },
      "members": [
        {
          "docs": {
            "remarks": "Often used as a key for a cache and not intended to be human-readable.",
            "stability": "experimental",
            "summary": "`ID` scalar type is a unique identifier. `ID` type is serialized similar to `String`."
          },
          "name": "ID"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "`String` scalar type is a free-form human-readable text."
          },
          "name": "STRING"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "`Int` scalar type is a signed non-fractional numerical value."
          },
          "name": "INT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "`Float` scalar type is a signed double-precision fractional value."
          },
          "name": "FLOAT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "`Boolean` scalar type is a boolean value: true or false."
          },
          "name": "BOOLEAN"
        },
        {
          "docs": {
            "remarks": "In other words, accepts date strings in the form of `YYYY-MM-DD`. It accepts time zone offsets.",
            "see": "https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates",
            "stability": "experimental",
            "summary": "`AWSDate` scalar type represents a valid extended `ISO 8601 Date` string."
          },
          "name": "AWS_DATE"
        },
        {
          "docs": {
            "remarks": "In other words, accepts date strings in the form of `hh:mm:ss.sss`. It accepts time zone offsets.",
            "see": "https://en.wikipedia.org/wiki/ISO_8601#Times",
            "stability": "experimental",
            "summary": "`AWSTime` scalar type represents a valid extended `ISO 8601 Time` string."
          },
          "name": "AWS_TIME"
        },
        {
          "docs": {
            "remarks": "In other words, accepts date strings in the form of `YYYY-MM-DDThh:mm:ss.sssZ`. It accepts time zone offsets.",
            "see": "https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations",
            "stability": "experimental",
            "summary": "`AWSDateTime` scalar type represents a valid extended `ISO 8601 DateTime` string."
          },
          "name": "AWS_DATE_TIME"
        },
        {
          "docs": {
            "remarks": "Timestamps are serialized and deserialized as numbers.",
            "stability": "experimental",
            "summary": "`AWSTimestamp` scalar type represents the number of seconds since `1970-01-01T00:00Z`."
          },
          "name": "AWS_TIMESTAMP"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "`AWSEmail` scalar type represents an email address string (i.e.`username@example.com`)."
          },
          "name": "AWS_EMAIL"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "`AWSJson` scalar type represents a JSON string."
          },
          "name": "AWS_JSON"
        },
        {
          "docs": {
            "remarks": "URLs wihtout schemes or contain double slashes are considered invalid.",
            "stability": "experimental",
            "summary": "`AWSURL` scalar type represetns a valid URL string."
          },
          "name": "AWS_URL"
        },
        {
          "docs": {
            "remarks": "The number can specify a country code at the beginning, but is not required for US phone numbers.",
            "stability": "experimental",
            "summary": "`AWSPhone` scalar type represents a valid phone number. Phone numbers maybe be whitespace delimited or hyphenated."
          },
          "name": "AWS_PHONE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "`AWSIPAddress` scalar type respresents a valid `IPv4` of `IPv6` address string."
          },
          "name": "AWS_IP_ADDRESS"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Type used for Intermediate Types (i.e. an interface or an object type)."
          },
          "name": "INTERMEDIATE"
        }
      ],
      "name": "Type",
      "symbolId": "lib/schema-base:Type"
    },
    "@aws-cdk/aws-appsync.UnionType": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "remarks": "Note that fields of a union type need to be object types. In other words,\nyou can't create a union type out of interfaces, other unions, or inputs.",
        "stability": "experimental",
        "summary": "Union Types are abstract types that are similar to Interface Types, but they cannot to specify any common fields between types.",
        "example": "declare const api: appsync.GraphqlApi;\nconst string = appsync.GraphqlType.string();\nconst human = new appsync.ObjectType('Human', { definition: { name: string } });\nconst droid = new appsync.ObjectType('Droid', { definition: { name: string } });\nconst starship = new appsync.ObjectType('Starship', { definition: { name: string } }););\nconst search = new appsync.UnionType('Search', {\n  definition: [ human, droid, starship ],\n});\napi.addType(search);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.UnionType",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/schema-intermediate.ts",
          "line": 337
        },
        "parameters": [
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "@aws-cdk/aws-appsync.UnionTypeOptions"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-appsync.IIntermediateType"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/schema-intermediate.ts",
        "line": 323
      },
      "methods": [
        {
          "docs": {
            "remarks": "Input Types must have field options and the IField must be an Object Type.",
            "stability": "experimental",
            "summary": "Add a field to this Union Type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 374
          },
          "name": "addField",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "parameters": [
            {
              "docs": {
                "summary": "the options to add a field."
              },
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-appsync.AddFieldOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Create a GraphQL Type representing this Union Type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 348
          },
          "name": "attribute",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "parameters": [
            {
              "docs": {
                "summary": "the options to configure this attribute."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.GraphqlType"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the string of this Union type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 360
          },
          "name": "toString",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "UnionType",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "the attributes of this type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 331
          },
          "name": "definition",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.IField"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the name of this type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 327
          },
          "name": "name",
          "overrides": "@aws-cdk/aws-appsync.IIntermediateType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the authorization modes supported by this intermediate type."
          },
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 335
          },
          "name": "modes",
          "optional": true,
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.AuthorizationType"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/schema-intermediate:UnionType"
    },
    "@aws-cdk/aws-appsync.UnionTypeOptions": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for configuring an Union Type.",
        "example": "declare const api: appsync.GraphqlApi;\nconst string = appsync.GraphqlType.string();\nconst human = new appsync.ObjectType('Human', { definition: { name: string } });\nconst droid = new appsync.ObjectType('Droid', { definition: { name: string } });\nconst starship = new appsync.ObjectType('Starship', { definition: { name: string } }););\nconst search = new appsync.UnionType('Search', {\n  definition: [ human, droid, starship ],\n});\napi.addType(search);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.UnionTypeOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/schema-intermediate.ts",
        "line": 308
      },
      "name": "UnionTypeOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the object types for this union type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema-intermediate.ts",
            "line": 312
          },
          "name": "definition",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync.IIntermediateType"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/schema-intermediate:UnionTypeOptions"
    },
    "@aws-cdk/aws-appsync.UserPoolConfig": {
      "assembly": "@aws-cdk/aws-appsync",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Configuration for Cognito user-pools in AppSync.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as cognito from '@aws-cdk/aws-cognito';\n\ndeclare const userPool: cognito.UserPool;\nconst userPoolConfig: appsync.UserPoolConfig = {\n  userPool: userPool,\n\n  // the properties below are optional\n  appIdClientRegex: 'appIdClientRegex',\n  defaultAction: appsync.UserPoolDefaultAction.ALLOW,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.UserPoolConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 91
      },
      "name": "UserPoolConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The Cognito user pool to use as identity source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 95
          },
          "name": "userPool",
          "type": {
            "fqn": "@aws-cdk/aws-cognito.IUserPool"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "-  None",
            "stability": "experimental",
            "summary": "the optional app id regex."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 101
          },
          "name": "appIdClientRegex",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "ALLOW",
            "stability": "experimental",
            "summary": "Default auth action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 107
          },
          "name": "defaultAction",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync.UserPoolDefaultAction"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:UserPoolConfig"
    },
    "@aws-cdk/aws-appsync.UserPoolDefaultAction": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "enum with all possible values for Cognito user-pool default actions."
      },
      "fqn": "@aws-cdk/aws-appsync.UserPoolDefaultAction",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 77
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "ALLOW access to API."
          },
          "name": "ALLOW"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "DENY access to API."
          },
          "name": "DENY"
        }
      ],
      "name": "UserPoolDefaultAction",
      "symbolId": "lib/graphqlapi:UserPoolDefaultAction"
    },
    "@aws-cdk/aws-appsync.Values": {
      "assembly": "@aws-cdk/aws-appsync",
      "docs": {
        "stability": "experimental",
        "summary": "Factory class for attribute value assignments.",
        "example": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync.Values",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 239
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Allows assigning a value to the specified attribute."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 253
          },
          "name": "attribute",
          "parameters": [
            {
              "name": "attr",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.AttributeValuesStep"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "It’s opinionated about how it represents\nsome of the nested objects: e.g., it will use lists (“L”) rather than sets\n(“SS”, “NS”, “BS”). By default it projects the argument container (\"$ctx.args\").",
            "stability": "experimental",
            "summary": "Treats the specified object as a map of assignments, where the property names represent attribute names."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 246
          },
          "name": "projecting",
          "parameters": [
            {
              "name": "arg",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync.AttributeValues"
            }
          },
          "static": true
        }
      ],
      "name": "Values",
      "symbolId": "lib/key:Values"
    }
  },
  "version": "1.172.0",
  "fingerprint": "**********"
}