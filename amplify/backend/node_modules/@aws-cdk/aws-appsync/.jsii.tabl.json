{
  "version": "2",
  "toolVersion": "1.67.0",
  "snippets": {
    "53b45b708ca4431c0c9dc96a523bafafa326dd4932890d50c9c0b4983f06b087": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_appsync as appsync",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AppSync;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.appsync.*;",
          "version": "1"
        },
        "go": {
          "source": "import appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"",
          "version": "1"
        },
        "$": {
          "source": "import * as appsync from '@aws-cdk/aws-appsync';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 27
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as appsync from '@aws-cdk/aws-appsync';",
      "syntaxKindCounter": {
        "10": 1,
        "75": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "f1d937a699cc9c2b50096e5b816fafbee4bb222982a8dc5a91ee68d759bfaf81": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.IAM\n        )\n    ),\n    xray_enabled=True\n)\n\ndemo_table = dynamodb.Table(self, \"DemoTable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\ndemo_dS = api.add_dynamo_db_data_source(\"demoDataSource\", demo_table)\n\n# Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemo_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemos\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_list()\n)\n\n# Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemo_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemo\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_put_item(\n        appsync.PrimaryKey.partition(\"id\").auto(),\n        appsync.Values.projecting(\"input\")),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_item()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.IAM\n        }\n    },\n    XrayEnabled = true\n});\n\nTable demoTable = new Table(this, \"DemoTable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nDynamoDbDataSource demoDS = api.AddDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemos\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbScanTable(),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultList()\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemo\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbPutItem(PrimaryKey.Partition(\"id\").Auto(), Values.Projecting(\"input\")),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultItem()\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.IAM)\n                        .build())\n                .build())\n        .xrayEnabled(true)\n        .build();\n\nTable demoTable = Table.Builder.create(this, \"DemoTable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nDynamoDbDataSource demoDS = api.addDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemos\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbScanTable())\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultList())\n        .build());\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemo\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbPutItem(PrimaryKey.partition(\"id\").auto(), Values.projecting(\"input\")))\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultItem())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_IAM,\n\t\t},\n\t},\n\txrayEnabled: jsii.Boolean(true),\n})\n\ndemoTable := dynamodb.NewTable(this, jsii.String(\"DemoTable\"), &tableProps{\n\tpartitionKey: &attribute{\n\t\tname: jsii.String(\"id\"),\n\t\ttype: dynamodb.attributeType_STRING,\n\t},\n})\n\ndemoDS := api.addDynamoDbDataSource(jsii.String(\"demoDataSource\"), demoTable)\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemos\"),\n\trequestMappingTemplate: appsync.mappingTemplate.dynamoDbScanTable(),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultList(),\n})\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemo\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.dynamoDbPutItem(appsync.primaryKey.partition(jsii.String(\"id\")).auto(), appsync.values.projecting(jsii.String(\"input\"))),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultItem(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 58
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AttributeValues",
        "@aws-cdk/aws-appsync.AuthorizationConfig",
        "@aws-cdk/aws-appsync.AuthorizationMode",
        "@aws-cdk/aws-appsync.AuthorizationType",
        "@aws-cdk/aws-appsync.AuthorizationType#IAM",
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.DynamoDbDataSource",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addDynamoDbDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbPutItem",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbResultItem",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbResultList",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbScanTable",
        "@aws-cdk/aws-appsync.PartitionKeyStep#auto",
        "@aws-cdk/aws-appsync.PrimaryKey",
        "@aws-cdk/aws-appsync.PrimaryKey#partition",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#fromAsset",
        "@aws-cdk/aws-appsync.Values",
        "@aws-cdk/aws-appsync.Values#projecting",
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 62,
        "104": 2,
        "106": 1,
        "193": 7,
        "194": 25,
        "196": 12,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 17
      },
      "fqnsFingerprint": "7337b04f973e903939f6c7bb1b76cfa36d36eb00ba694263e7981c95b7b1a65b"
    },
    "138c8164a8b060e5b0a997558f7a9a9ba4860516795b2c5dfe2b156472a4c602": {
      "translations": {
        "python": {
          "source": "# Build a data source for AppSync to access the database.\n# api: appsync.GraphqlApi\n# Create username and password secret for DB Cluster\nsecret = rds.DatabaseSecret(self, \"AuroraSecret\",\n    username=\"clusteradmin\"\n)\n\n# The VPC to place the cluster in\nvpc = ec2.Vpc(self, \"AuroraVpc\")\n\n# Create the serverless cluster, provide all values needed to customise the database.\ncluster = rds.ServerlessCluster(self, \"AuroraCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,\n    credentials={\"username\": \"clusteradmin\"},\n    cluster_identifier=\"db-endpoint-test\",\n    default_database_name=\"demos\"\n)\nrds_dS = api.add_rds_data_source(\"rds\", cluster, secret, \"demos\")\n\n# Set up a resolver for an RDS query.\nrds_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemosRds\",\n    request_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"SELECT * FROM demos\"\n            ]\n          }\n          \"\"\"),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n            $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n          \"\"\")\n)\n\n# Set up a resolver for an RDS mutation.\nrds_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemoRds\",\n    request_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"INSERT INTO demos VALUES (:id, :version)\",\n              \"SELECT * WHERE id = :id\"\n            ],\n            \"variableMap\": {\n              \":id\": $util.toJson($util.autoId()),\n              \":version\": $util.toJson($ctx.args.version)\n            }\n          }\n          \"\"\"),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n            $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n          \"\"\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Build a data source for AppSync to access the database.\nGraphqlApi api;\n// Create username and password secret for DB Cluster\nDatabaseSecret secret = new DatabaseSecret(this, \"AuroraSecret\", new DatabaseSecretProps {\n    Username = \"clusteradmin\"\n});\n\n// The VPC to place the cluster in\nVpc vpc = new Vpc(this, \"AuroraVpc\");\n\n// Create the serverless cluster, provide all values needed to customise the database.\nServerlessCluster cluster = new ServerlessCluster(this, \"AuroraCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,\n    Credentials = new Dictionary<string, string> { { \"username\", \"clusteradmin\" } },\n    ClusterIdentifier = \"db-endpoint-test\",\n    DefaultDatabaseName = \"demos\"\n});\nRdsDataSource rdsDS = api.AddRdsDataSource(\"rds\", cluster, secret, \"demos\");\n\n// Set up a resolver for an RDS query.\nrdsDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemosRds\",\n    RequestMappingTemplate = MappingTemplate.FromString(@\"\n      {\n        \"\"version\"\": \"\"2018-05-29\"\",\n        \"\"statements\"\": [\n          \"\"SELECT * FROM demos\"\"\n        ]\n      }\n      \"),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"\n        $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n      \")\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemoRds\",\n    RequestMappingTemplate = MappingTemplate.FromString(@\"\n      {\n        \"\"version\"\": \"\"2018-05-29\"\",\n        \"\"statements\"\": [\n          \"\"INSERT INTO demos VALUES (:id, :version)\"\",\n          \"\"SELECT * WHERE id = :id\"\"\n        ],\n        \"\"variableMap\"\": {\n          \"\":id\"\": $util.toJson($util.autoId()),\n          \"\":version\"\": $util.toJson($ctx.args.version)\n        }\n      }\n      \"),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"\n        $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n      \")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Build a data source for AppSync to access the database.\nGraphqlApi api;\n// Create username and password secret for DB Cluster\nDatabaseSecret secret = DatabaseSecret.Builder.create(this, \"AuroraSecret\")\n        .username(\"clusteradmin\")\n        .build();\n\n// The VPC to place the cluster in\nVpc vpc = new Vpc(this, \"AuroraVpc\");\n\n// Create the serverless cluster, provide all values needed to customise the database.\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AuroraCluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc)\n        .credentials(Map.of(\"username\", \"clusteradmin\"))\n        .clusterIdentifier(\"db-endpoint-test\")\n        .defaultDatabaseName(\"demos\")\n        .build();\nRdsDataSource rdsDS = api.addRdsDataSource(\"rds\", cluster, secret, \"demos\");\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemosRds\")\n        .requestMappingTemplate(MappingTemplate.fromString(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"SELECT * FROM demos\\\"\\n    ]\\n  }\\n  \"))\n        .responseMappingTemplate(MappingTemplate.fromString(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\\n  \"))\n        .build());\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemoRds\")\n        .requestMappingTemplate(MappingTemplate.fromString(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"INSERT INTO demos VALUES (:id, :version)\\\",\\n      \\\"SELECT * WHERE id = :id\\\"\\n    ],\\n    \\\"variableMap\\\": {\\n      \\\":id\\\": $util.toJson($util.autoId()),\\n      \\\":version\\\": $util.toJson($ctx.args.version)\\n    }\\n  }\\n  \"))\n        .responseMappingTemplate(MappingTemplate.fromString(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\\n  \"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Build a data source for AppSync to access the database.\nvar api graphqlApi\n// Create username and password secret for DB Cluster\nsecret := rds.NewDatabaseSecret(this, jsii.String(\"AuroraSecret\"), &databaseSecretProps{\n\tusername: jsii.String(\"clusteradmin\"),\n})\n\n// The VPC to place the cluster in\nvpc := ec2.NewVpc(this, jsii.String(\"AuroraVpc\"))\n\n// Create the serverless cluster, provide all values needed to customise the database.\ncluster := rds.NewServerlessCluster(this, jsii.String(\"AuroraCluster\"), &serverlessClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA_MYSQL(),\n\tvpc: vpc,\n\tcredentials: map[string]*string{\n\t\t\"username\": jsii.String(\"clusteradmin\"),\n\t},\n\tclusterIdentifier: jsii.String(\"db-endpoint-test\"),\n\tdefaultDatabaseName: jsii.String(\"demos\"),\n})\nrdsDS := api.addRdsDataSource(jsii.String(\"rds\"), cluster, secret, jsii.String(\"demos\"))\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemosRds\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromString(jsii.String(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"SELECT * FROM demos\\\"\\n    ]\\n  }\\n  \")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\\n  \")),\n})\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemoRds\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"INSERT INTO demos VALUES (:id, :version)\\\",\\n      \\\"SELECT * WHERE id = :id\\\"\\n    ],\\n    \\\"variableMap\\\": {\\n      \\\":id\\\": $util.toJson($util.autoId()),\\n      \\\":version\\\": $util.toJson($ctx.args.version)\\n    }\\n  }\\n  \")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\\n  \")),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 105
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addRdsDataSource",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromString",
        "@aws-cdk/aws-appsync.RdsDataSource",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_MYSQL",
        "@aws-cdk/aws-rds.DatabaseSecret",
        "@aws-cdk/aws-rds.DatabaseSecretProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "14": 4,
        "75": 51,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 16,
        "196": 7,
        "197": 3,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 14,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "d13bf58a96ffbb559f3f6e27c0c741533600f613919a428520d372a8183f2ecc"
    },
    "a7ffcbaa287692dec8abe099bc21cc8b3237da6d3601723113be95943a9cc7e5": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"api\",\n    name=\"api\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\"))\n)\n\nhttp_ds = api.add_http_data_source(\"ds\", \"https://states.amazonaws.com\",\n    name=\"httpDsWithStepF\",\n    description=\"from appsync to StepFunctions Workflow\",\n    authorization_config=appsync.AwsIamConfig(\n        signing_region=\"us-east-1\",\n        signing_service_name=\"states\"\n    )\n)\n\nhttp_ds.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"callStepFunction\",\n    request_mapping_template=appsync.MappingTemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.MappingTemplate.from_file(\"response.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"api\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\"))\n});\n\nHttpDataSource httpDs = api.AddHttpDataSource(\"ds\", \"https://states.amazonaws.com\", new HttpDataSourceOptions {\n    Name = \"httpDsWithStepF\",\n    Description = \"from appsync to StepFunctions Workflow\",\n    AuthorizationConfig = new AwsIamConfig {\n        SigningRegion = \"us-east-1\",\n        SigningServiceName = \"states\"\n    }\n});\n\nhttpDs.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"callStepFunction\",\n    RequestMappingTemplate = MappingTemplate.FromFile(\"request.vtl\"),\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"response.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"api\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .build();\n\nHttpDataSource httpDs = api.addHttpDataSource(\"ds\", \"https://states.amazonaws.com\", HttpDataSourceOptions.builder()\n        .name(\"httpDsWithStepF\")\n        .description(\"from appsync to StepFunctions Workflow\")\n        .authorizationConfig(AwsIamConfig.builder()\n                .signingRegion(\"us-east-1\")\n                .signingServiceName(\"states\")\n                .build())\n        .build());\n\nhttpDs.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"callStepFunction\")\n        .requestMappingTemplate(MappingTemplate.fromFile(\"request.vtl\"))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"response.vtl\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"api\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n})\n\nhttpDs := api.addHttpDataSource(jsii.String(\"ds\"), jsii.String(\"https://states.amazonaws.com\"), &httpDataSourceOptions{\n\tname: jsii.String(\"httpDsWithStepF\"),\n\tdescription: jsii.String(\"from appsync to StepFunctions Workflow\"),\n\tauthorizationConfig: &awsIamConfig{\n\t\tsigningRegion: jsii.String(\"us-east-1\"),\n\t\tsigningServiceName: jsii.String(\"states\"),\n\t},\n})\n\nhttpDs.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"callStepFunction\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"request.vtl\")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"response.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 216
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AwsIamConfig",
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addHttpDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.HttpDataSource",
        "@aws-cdk/aws-appsync.HttpDataSourceOptions",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromFile",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#fromAsset",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 31,
        "104": 1,
        "193": 4,
        "194": 10,
        "196": 6,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 11
      },
      "fqnsFingerprint": "91db1b76303125e8cb2d4cc9df0aa26846d1f1ac73592f12fa98caa15d77f537"
    },
    "e4b2db3b4148c5faa110d08a44b0b3578bbe3d5a8c73265f910d632da0ca5e81": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_opensearchservice as opensearch\n\n# api: appsync.GraphqlApi\n\n\nuser = iam.User(self, \"User\")\ndomain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_2,\n    removal_policy=RemovalPolicy.DESTROY,\n    fine_grained_access_control=opensearch.AdvancedSecurityOptions(master_user_arn=user.user_arn),\n    encryption_at_rest=opensearch.EncryptionAtRestOptions(enabled=True),\n    node_to_node_encryption=True,\n    enforce_https=True\n)\nds = api.add_open_search_data_source(\"ds\", domain)\n\nds.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getTests\",\n    request_mapping_template=appsync.MappingTemplate.from_string(JSON.stringify({\n        \"version\": \"2017-02-28\",\n        \"operation\": \"GET\",\n        \"path\": \"/id/post/_search\",\n        \"params\": {\n            \"headers\": {},\n            \"query_string\": {},\n            \"body\": {\"from\": 0, \"size\": 50}\n        }\n    })),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"[\n            #foreach($entry in $context.result.hits.hits)\n            #if( $velocityCount > 1 ) , #end\n            $utils.toJson($entry.get(\"_source\"))\n            #end\n          ]\"\"\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.OpenSearchService;\n\nGraphqlApi api;\n\n\nUser user = new User(this, \"User\");\nDomain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_2,\n    RemovalPolicy = RemovalPolicy.DESTROY,\n    FineGrainedAccessControl = new AdvancedSecurityOptions { MasterUserArn = user.UserArn },\n    EncryptionAtRest = new EncryptionAtRestOptions { Enabled = true },\n    NodeToNodeEncryption = true,\n    EnforceHttps = true\n});\nOpenSearchDataSource ds = api.AddOpenSearchDataSource(\"ds\", domain);\n\nds.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getTests\",\n    RequestMappingTemplate = MappingTemplate.FromString(JSON.Stringify(new Dictionary<string, object> {\n        { \"version\", \"2017-02-28\" },\n        { \"operation\", \"GET\" },\n        { \"path\", \"/id/post/_search\" },\n        { \"params\", new Struct {\n            Headers = new Struct { },\n            QueryString = new Struct { },\n            Body = new Struct { From = 0, Size = 50 }\n        } }\n    })),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"[\n        #foreach($entry in $context.result.hits.hits)\n        #if( $velocityCount > 1 ) , #end\n        $utils.toJson($entry.get(\"\"_source\"\"))\n        #end\n      ]\")\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.opensearchservice.*;\n\nGraphqlApi api;\n\n\nUser user = new User(this, \"User\");\nDomain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_2)\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .fineGrainedAccessControl(AdvancedSecurityOptions.builder().masterUserArn(user.getUserArn()).build())\n        .encryptionAtRest(EncryptionAtRestOptions.builder().enabled(true).build())\n        .nodeToNodeEncryption(true)\n        .enforceHttps(true)\n        .build();\nOpenSearchDataSource ds = api.addOpenSearchDataSource(\"ds\", domain);\n\nds.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getTests\")\n        .requestMappingTemplate(MappingTemplate.fromString(JSON.stringify(Map.of(\n                \"version\", \"2017-02-28\",\n                \"operation\", \"GET\",\n                \"path\", \"/id/post/_search\",\n                \"params\", Map.of(\n                        \"headers\", Map.of(),\n                        \"queryString\", Map.of(),\n                        \"body\", Map.of(\"from\", 0, \"size\", 50))))))\n        .responseMappingTemplate(MappingTemplate.fromString(\"[\\n    #foreach($entry in $context.result.hits.hits)\\n    #if( $velocityCount > 1 ) , #end\\n    $utils.toJson($entry.get(\\\"_source\\\"))\\n    #end\\n  ]\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import opensearch \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\nvar api graphqlApi\n\n\nuser := iam.NewUser(this, jsii.String(\"User\"))\ndomain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_2(),\n\tremovalPolicy: *awscdkcore.RemovalPolicy_DESTROY,\n\tfineGrainedAccessControl: &advancedSecurityOptions{\n\t\tmasterUserArn: user.userArn,\n\t},\n\tencryptionAtRest: &encryptionAtRestOptions{\n\t\tenabled: jsii.Boolean(true),\n\t},\n\tnodeToNodeEncryption: jsii.Boolean(true),\n\tenforceHttps: jsii.Boolean(true),\n})\nds := api.addOpenSearchDataSource(jsii.String(\"ds\"), domain)\n\nds.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getTests\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromString(jSON.stringify(map[string]interface{}{\n\t\t\"version\": jsii.String(\"2017-02-28\"),\n\t\t\"operation\": jsii.String(\"GET\"),\n\t\t\"path\": jsii.String(\"/id/post/_search\"),\n\t\t\"params\": map[string]map[string]interface{}{\n\t\t\t\"headers\": map[string]interface{}{\n\t\t\t},\n\t\t\t\"queryString\": map[string]interface{}{\n\t\t\t},\n\t\t\t\"body\": map[string]*f64{\n\t\t\t\t\"from\": jsii.Number(0),\n\t\t\t\t\"size\": jsii.Number(50),\n\t\t\t},\n\t\t},\n\t})),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"[\\n    #foreach($entry in $context.result.hits.hits)\\n    #if( $velocityCount > 1 ) , #end\\n    $utils.toJson($entry.get(\\\"_source\\\"))\\n    #end\\n  ]\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as opensearch from '@aws-cdk/aws-opensearchservice';\n\nconst user = new iam.User(this, 'User');\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_2,\n  removalPolicy: RemovalPolicy.DESTROY,\n  fineGrainedAccessControl: { masterUserArn: user.userArn },\n  encryptionAtRest: { enabled: true },\n  nodeToNodeEncryption: true,\n  enforceHttps: true,\n});\n\ndeclare const api: appsync.GraphqlApi;\nconst ds = api.addOpenSearchDataSource('ds', domain);\n\nds.createResolver({\n  typeName: 'Query',\n  fieldName: 'getTests',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(JSON.stringify({\n    version: '2017-02-28',\n    operation: 'GET',\n    path: '/id/post/_search',\n    params: {\n      headers: {},\n      queryString: {},\n      body: { from: 0, size: 50 },\n    },\n  })),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`[\n    #foreach($entry in $context.result.hits.hits)\n    #if( $velocityCount > 1 ) , #end\n    $utils.toJson($entry.get(\"_source\"))\n    #end\n  ]`),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 250
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addOpenSearchDataSource",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromString",
        "@aws-cdk/aws-appsync.OpenSearchDataSource",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.User#userArn",
        "@aws-cdk/aws-opensearchservice.AdvancedSecurityOptions",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EncryptionAtRestOptions",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_2",
        "@aws-cdk/aws-opensearchservice.IDomain",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\n\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst user = new iam.User(this, 'User');\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_2,\n  removalPolicy: RemovalPolicy.DESTROY,\n  fineGrainedAccessControl: { masterUserArn: user.userArn },\n  encryptionAtRest: { enabled: true },\n  nodeToNodeEncryption: true,\n  enforceHttps: true,\n});\nconst ds = api.addOpenSearchDataSource('ds', domain);\n\nds.createResolver({\n  typeName: 'Query',\n  fieldName: 'getTests',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(JSON.stringify({\n    version: '2017-02-28',\n    operation: 'GET',\n    path: '/id/post/_search',\n    params: {\n      headers: {},\n      queryString: {},\n      body: { from: 0, size: 50 },\n    },\n  })),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`[\n    #foreach($entry in $context.result.hits.hits)\n    #if( $velocityCount > 1 ) , #end\n    $utils.toJson($entry.get(\"_source\"))\n    #end\n  ]`),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "14": 1,
        "75": 52,
        "104": 2,
        "106": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 9,
        "194": 13,
        "196": 5,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "7dee4537dcc6a2732ca4e36a4c2b81b8ba0c17877ef25e8f85a1f1037c3a823e"
    },
    "78e610459571cedbb760bcd7f3bb587745fbdcc5c5a1643d72ff8c9720e3b1b5": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_certificatemanager as acm\nimport aws_cdk.aws_route53 as route53\n\n# hosted zone and route53 features\n# hosted_zone_id: str\nzone_name = \"example.com\"\n\n\nmy_domain_name = \"api.example.com\"\ncertificate = acm.Certificate(self, \"cert\", domain_name=my_domain_name)\napi = appsync.GraphqlApi(self, \"api\",\n    name=\"myApi\",\n    domain_name=appsync.DomainOptions(\n        certificate=certificate,\n        domain_name=my_domain_name\n    )\n)\n\n# hosted zone for adding appsync domain\nzone = route53.HostedZone.from_hosted_zone_attributes(self, \"HostedZone\",\n    hosted_zone_id=hosted_zone_id,\n    zone_name=zone_name\n)\n\n# create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nroute53.CnameRecord(self, \"CnameApiRecord\",\n    record_name=\"api\",\n    zone=zone,\n    domain_name=my_domain_name\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.Route53;\n\n// hosted zone and route53 features\nstring hostedZoneId;\nstring zoneName = \"example.com\";\n\n\nstring myDomainName = \"api.example.com\";\nCertificate certificate = new Certificate(this, \"cert\", new CertificateProps { DomainName = myDomainName });\nGraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"myApi\",\n    DomainName = new DomainOptions {\n        Certificate = certificate,\n        DomainName = myDomainName\n    }\n});\n\n// hosted zone for adding appsync domain\nIHostedZone zone = HostedZone.FromHostedZoneAttributes(this, \"HostedZone\", new HostedZoneAttributes {\n    HostedZoneId = hostedZoneId,\n    ZoneName = zoneName\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew CnameRecord(this, \"CnameApiRecord\", new CnameRecordProps {\n    RecordName = \"api\",\n    Zone = zone,\n    DomainName = myDomainName\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.route53.*;\n\n// hosted zone and route53 features\nString hostedZoneId;\nString zoneName = \"example.com\";\n\n\nString myDomainName = \"api.example.com\";\nCertificate certificate = Certificate.Builder.create(this, \"cert\").domainName(myDomainName).build();\nGraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"myApi\")\n        .domainName(DomainOptions.builder()\n                .certificate(certificate)\n                .domainName(myDomainName)\n                .build())\n        .build();\n\n// hosted zone for adding appsync domain\nIHostedZone zone = HostedZone.fromHostedZoneAttributes(this, \"HostedZone\", HostedZoneAttributes.builder()\n        .hostedZoneId(hostedZoneId)\n        .zoneName(zoneName)\n        .build());\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nCnameRecord.Builder.create(this, \"CnameApiRecord\")\n        .recordName(\"api\")\n        .zone(zone)\n        .domainName(myDomainName)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import acm \"github.com/aws-samples/dummy/awscdkawscertificatemanager\"\nimport route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\n\n// hosted zone and route53 features\nvar hostedZoneId string\nzoneName := \"example.com\"\n\n\nmyDomainName := \"api.example.com\"\ncertificate := acm.NewCertificate(this, jsii.String(\"cert\"), &certificateProps{\n\tdomainName: myDomainName,\n})\napi := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"myApi\"),\n\tdomainName: &domainOptions{\n\t\tcertificate: certificate,\n\t\tdomainName: myDomainName,\n\t},\n})\n\n// hosted zone for adding appsync domain\nzone := route53.hostedZone.fromHostedZoneAttributes(this, jsii.String(\"HostedZone\"), &hostedZoneAttributes{\n\thostedZoneId: jsii.String(hostedZoneId),\n\tzoneName: jsii.String(zoneName),\n})\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nroute53.NewCnameRecord(this, jsii.String(\"CnameApiRecord\"), &cnameRecordProps{\n\trecordName: jsii.String(\"api\"),\n\tzone: zone,\n\tdomainName: myDomainName,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: myDomainName,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 293
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.DomainOptions",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.CertificateProps",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-route53.CnameRecord",
        "@aws-cdk/aws-route53.CnameRecordProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromHostedZoneAttributes",
        "@aws-cdk/aws-route53.HostedZoneAttributes",
        "@aws-cdk/aws-route53.IHostedZone",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: myDomainName,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "14": 2,
        "75": 30,
        "104": 4,
        "130": 2,
        "143": 1,
        "193": 5,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "282": 4,
        "290": 1
      },
      "fqnsFingerprint": "52f88604d8f7cdaa7e9fc61fb9d21c4b9b8f024885289eee8989faed59fe5ccb"
    },
    "e68c16792437dda32152a7ddba77566143a63ce1bc7fc014a30c628ddf71413f": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"api\", name=\"myApi\")",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps { Name = \"myApi\" });",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"api\").name(\"myApi\").build();",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"myApi\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'api', { name: 'myApi' });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 336
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'api', { name: 'myApi' });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "e408aa47e21f6965df679f3796a30cb42a9e74792e277fdd7ce7d59e87b48201"
    },
    "2723373c79e3f0301bacded27526bcb4a2c51ec69d55105a3543d957d8e2c671": {
      "translations": {
        "python": {
          "source": "schema = appsync.Schema()\nschema.add_type(appsync.ObjectType(\"demo\",\n    definition={\"id\": appsync.GraphqlType.id()}\n))\napi = appsync.GraphqlApi(self, \"api\",\n    name=\"myApi\",\n    schema=schema\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Schema schema = new Schema();\nschema.AddType(new ObjectType(\"demo\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> { { \"id\", GraphqlType.Id() } }\n}));\nGraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"myApi\",\n    Schema = schema\n});",
          "version": "1"
        },
        "java": {
          "source": "Schema schema = new Schema();\nschema.addType(ObjectType.Builder.create(\"demo\")\n        .definition(Map.of(\"id\", GraphqlType.id()))\n        .build());\nGraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"myApi\")\n        .schema(schema)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "schema := appsync.NewSchema()\nschema.addType(appsync.NewObjectType(jsii.String(\"demo\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.id(),\n\t},\n}))\napi := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"myApi\"),\n\tschema: schema,\n})",
          "version": "1"
        },
        "$": {
          "source": "const schema = new appsync.Schema();\nschema.addType(new appsync.ObjectType('demo', {\n  definition: { id: appsync.GraphqlType.id() },\n}));\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  schema,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 346
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#id",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.IIntermediateType",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#addType",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst schema = new appsync.Schema();\nschema.addType(new appsync.ObjectType('demo', {\n  definition: { id: appsync.GraphqlType.id() },\n}));\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  schema,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "193": 3,
        "194": 6,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 1
      },
      "fqnsFingerprint": "541d4e8b1a71d4c42ab6247f2ddc39dc3bd07bcac177894847b943c421df302e"
    },
    "7bfa48ef3b0ca7c84101b5cad0487444279edbe184d98505cfe8778f444f5b51": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"api\",\n    name=\"myApi\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphl\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"myApi\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphl\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"myApi\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphl\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"myApi\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphl\"))),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphl')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 364
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#fromAsset",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphl')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "552f75acb63d229f84ef159954a2b93d62c6308085f05b71e503896bd070b054"
    },
    "3035679664fe970343e4365e7bc65a8755bad84a3daaf2920e3283444ef53b12": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# table: dynamodb.Table\n\nimported_api = appsync.GraphqlApi.from_graphql_api_attributes(self, \"IApi\",\n    graphql_api_id=api.api_id,\n    graphql_api_arn=api.arn\n)\nimported_api.add_dynamo_db_data_source(\"TableDataSource\", table)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nTable table;\n\nIGraphqlApi importedApi = GraphqlApi.FromGraphqlApiAttributes(this, \"IApi\", new GraphqlApiAttributes {\n    GraphqlApiId = api.ApiId,\n    GraphqlApiArn = api.Arn\n});\nimportedApi.AddDynamoDbDataSource(\"TableDataSource\", table);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nTable table;\n\nIGraphqlApi importedApi = GraphqlApi.fromGraphqlApiAttributes(this, \"IApi\", GraphqlApiAttributes.builder()\n        .graphqlApiId(api.getApiId())\n        .graphqlApiArn(api.getArn())\n        .build());\nimportedApi.addDynamoDbDataSource(\"TableDataSource\", table);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar table table\n\nimportedApi := appsync.graphqlApi.fromGraphqlApiAttributes(this, jsii.String(\"IApi\"), &graphqlApiAttributes{\n\tgraphqlApiId: api.apiId,\n\tgraphqlApiArn: api.arn,\n})\nimportedApi.addDynamoDbDataSource(jsii.String(\"TableDataSource\"), table)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const table: dynamodb.Table;\nconst importedApi = appsync.GraphqlApi.fromGraphqlApiAttributes(this, 'IApi', {\n  graphqlApiId: api.apiId,\n  graphqlApiArn: api.arn,\n});\nimportedApi.addDynamoDbDataSource('TableDataSource', table);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 377
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApi#apiId",
        "@aws-cdk/aws-appsync.GraphqlApi#arn",
        "@aws-cdk/aws-appsync.GraphqlApi#fromGraphqlApiAttributes",
        "@aws-cdk/aws-appsync.GraphqlApiAttributes",
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-appsync.IGraphqlApi#addDynamoDbDataSource",
        "@aws-cdk/aws-dynamodb.ITable",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const table: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst importedApi = appsync.GraphqlApi.fromGraphqlApiAttributes(this, 'IApi', {\n  graphqlApiId: api.apiId,\n  graphqlApiArn: api.arn,\n});\nimportedApi.addDynamoDbDataSource('TableDataSource', table);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 19,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 5,
        "196": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8b2ab2e831240f62b58438a477eafdfc73a52772a9ace3f957b80196f4b109d8"
    },
    "f883501a9c107918f8e49ee6395bd580ef63a55887a26c372ad3d48a026ff926": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n# auth_function: lambda.Function\n\n\nappsync.GraphqlApi(self, \"api\",\n    name=\"api\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"appsync.test.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.LAMBDA,\n            lambda_authorizer_config=appsync.LambdaAuthorizerConfig(\n                handler=auth_function\n            )\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\nFunction authFunction;\n\n\nnew GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"api\",\n    Schema = Schema.FromAsset(Join(__dirname, \"appsync.test.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.LAMBDA,\n            LambdaAuthorizerConfig = new LambdaAuthorizerConfig {\n                Handler = authFunction\n            }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\nFunction authFunction;\n\n\nGraphqlApi.Builder.create(this, \"api\")\n        .name(\"api\")\n        .schema(Schema.fromAsset(join(__dirname, \"appsync.test.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.LAMBDA)\n                        .lambdaAuthorizerConfig(LambdaAuthorizerConfig.builder()\n                                .handler(authFunction)\n                                .build())\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\nvar authFunction function\n\n\nappsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"api\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"appsync.test.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_LAMBDA,\n\t\t\tlambdaAuthorizerConfig: &lambdaAuthorizerConfig{\n\t\t\t\thandler: authFunction,\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\ndeclare const authFunction: lambda.Function;\n\nnew appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'appsync.test.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.LAMBDA,\n      lambdaAuthorizerConfig: {\n        handler: authFunction,\n        // can also specify `resultsCacheTtl` and `validationRegex`.\n      },\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 407
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AuthorizationConfig",
        "@aws-cdk/aws-appsync.AuthorizationMode",
        "@aws-cdk/aws-appsync.AuthorizationType",
        "@aws-cdk/aws-appsync.AuthorizationType#LAMBDA",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.LambdaAuthorizerConfig",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#fromAsset",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\ndeclare const authFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'appsync.test.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.LAMBDA,\n      lambdaAuthorizerConfig: {\n        handler: authFunction,\n        // can also specify `resultsCacheTtl` and `validationRegex`.\n      },\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 23,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "5cbe013fc8145978aaa8b5c93888fc24cc996a2fbd3179a35d188e930ddc18d9"
    },
    "7fd5ff0a8cc90a5d7cac948f72ad649333e220e430b6fa5881d08d61d5400afe": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\")\n)\n\napi.grant(role, appsync.IamResource.custom(\"types/Mutation/fields/updateExample\"), \"appsync:GraphQL\")",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\")\n});\n\napi.Grant(role, IamResource.Custom(\"types/Mutation/fields/updateExample\"), \"appsync:GraphQL\");",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .build();\n\napi.grant(role, IamResource.custom(\"types/Mutation/fields/updateExample\"), \"appsync:GraphQL\");",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nrole := iam.NewRole(this, jsii.String(\"Role\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"lambda.amazonaws.com\")),\n})\n\napi.grant(role, appsync.iamResource.custom(jsii.String(\"types/Mutation/fields/updateExample\")), jsii.String(\"appsync:GraphQL\"))",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\ndeclare const api: appsync.GraphqlApi;\n\napi.grant(role, appsync.IamResource.custom('types/Mutation/fields/updateExample'), 'appsync:GraphQL');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 469
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.GraphqlApi#grant",
        "@aws-cdk/aws-appsync.IamResource",
        "@aws-cdk/aws-appsync.IamResource#custom",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\napi.grant(role, appsync.IamResource.custom('types/Mutation/fields/updateExample'), 'appsync:GraphQL');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "1318c205319495115917d408fa5fa1fb01ee41c9821b0eec0fb2c90f6f01bd71"
    },
    "a4db9d7c9a84f4fc3f246a382cf97b1b512aa4a0ff2731b71d0add868ce3d671": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# role: iam.Role\n\n\n# For generic types\napi.grant_mutation(role, \"updateExample\")\n\n# For custom types and granular design\napi.grant(role, appsync.IamResource.of_type(\"Mutation\", \"updateExample\"), \"appsync:GraphQL\")",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nRole role;\n\n\n// For generic types\napi.GrantMutation(role, \"updateExample\");\n\n// For custom types and granular design\napi.Grant(role, IamResource.OfType(\"Mutation\", \"updateExample\"), \"appsync:GraphQL\");",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nRole role;\n\n\n// For generic types\napi.grantMutation(role, \"updateExample\");\n\n// For custom types and granular design\napi.grant(role, IamResource.ofType(\"Mutation\", \"updateExample\"), \"appsync:GraphQL\");",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar role role\n\n\n// For generic types\napi.grantMutation(role, jsii.String(\"updateExample\"))\n\n// For custom types and granular design\napi.grant(role, appsync.iamResource.ofType(jsii.String(\"Mutation\"), jsii.String(\"updateExample\")), jsii.String(\"appsync:GraphQL\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const role: iam.Role;\n\n// For generic types\napi.grantMutation(role, 'updateExample');\n\n// For custom types and granular design\napi.grant(role, appsync.IamResource.ofType('Mutation', 'updateExample'), 'appsync:GraphQL');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 498
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.GraphqlApi#grant",
        "@aws-cdk/aws-appsync.GraphqlApi#grantMutation",
        "@aws-cdk/aws-appsync.IamResource",
        "@aws-cdk/aws-appsync.IamResource#ofType",
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// For generic types\napi.grantMutation(role, 'updateExample');\n\n// For custom types and granular design\napi.grant(role, appsync.IamResource.ofType('Mutation', 'updateExample'), 'appsync:GraphQL');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 4,
        "196": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "38f95dedc07769aaa47721d46d23fa6df14ba9f5f388eb326f56c982e7bda93c"
    },
    "bd627fa53a55d783a291be23d9eb0255bcf588090e0de7fb798035081f2a390b": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\n\nappsync_function = appsync.AppsyncFunction(self, \"function\",\n    name=\"appsync_function\",\n    api=api,\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=appsync.MappingTemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.MappingTemplate.from_file(\"response.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\n\nAppsyncFunction appsyncFunction = new AppsyncFunction(this, \"function\", new AppsyncFunctionProps {\n    Name = \"appsync_function\",\n    Api = api,\n    DataSource = api.AddNoneDataSource(\"none\"),\n    RequestMappingTemplate = MappingTemplate.FromFile(\"request.vtl\"),\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"response.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\n\nAppsyncFunction appsyncFunction = AppsyncFunction.Builder.create(this, \"function\")\n        .name(\"appsync_function\")\n        .api(api)\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .requestMappingTemplate(MappingTemplate.fromFile(\"request.vtl\"))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"response.vtl\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\n\nappsyncFunction := appsync.NewAppsyncFunction(this, jsii.String(\"function\"), &appsyncFunctionProps{\n\tname: jsii.String(\"appsync_function\"),\n\tapi: api,\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"request.vtl\")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"response.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 515
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AppsyncFunction",
        "@aws-cdk/aws-appsync.AppsyncFunctionProps",
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromFile",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "f488042bd74b14299f1af4b1fd2e9cd1d4af7c788959e77f12f932b510c9aa5c"
    },
    "5812d23e7ddbb22efee4bb5a91b5230567150c58e8aff210e2b0f2ae498e0767": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# appsync_function: appsync.AppsyncFunction\n\n\npipeline_resolver = appsync.Resolver(self, \"pipeline\",\n    api=api,\n    data_source=api.add_none_data_source(\"none\"),\n    type_name=\"typeName\",\n    field_name=\"fieldName\",\n    request_mapping_template=appsync.MappingTemplate.from_file(\"beforeRequest.vtl\"),\n    pipeline_config=[appsync_function],\n    response_mapping_template=appsync.MappingTemplate.from_file(\"afterResponse.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nAppsyncFunction appsyncFunction;\n\n\nResolver pipelineResolver = new Resolver(this, \"pipeline\", new ResolverProps {\n    Api = api,\n    DataSource = api.AddNoneDataSource(\"none\"),\n    TypeName = \"typeName\",\n    FieldName = \"fieldName\",\n    RequestMappingTemplate = MappingTemplate.FromFile(\"beforeRequest.vtl\"),\n    PipelineConfig = new [] { appsyncFunction },\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"afterResponse.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nAppsyncFunction appsyncFunction;\n\n\nResolver pipelineResolver = Resolver.Builder.create(this, \"pipeline\")\n        .api(api)\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .typeName(\"typeName\")\n        .fieldName(\"fieldName\")\n        .requestMappingTemplate(MappingTemplate.fromFile(\"beforeRequest.vtl\"))\n        .pipelineConfig(List.of(appsyncFunction))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"afterResponse.vtl\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar appsyncFunction appsyncFunction\n\n\npipelineResolver := appsync.NewResolver(this, jsii.String(\"pipeline\"), &resolverProps{\n\tapi: api,\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\ttypeName: jsii.String(\"typeName\"),\n\tfieldName: jsii.String(\"fieldName\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"beforeRequest.vtl\")),\n\tpipelineConfig: []iAppsyncFunction{\n\t\tappsyncFunction,\n\t},\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"afterResponse.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 530
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromFile",
        "@aws-cdk/aws-appsync.Resolver",
        "@aws-cdk/aws-appsync.ResolverProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "79e3670bab51bf83f6d649b5c6929b368cdb663cefd7df83d9a3dedb3b84ea8c"
    },
    "f75ad801a7964243ed763e9feca3365a717ae1eebf6af9f04edd0a55fb440945": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_appsync as appsync\npluralize = require(\"pluralize\")\n\nargs = {\n    \"after\": appsync.GraphqlType.string(),\n    \"first\": appsync.GraphqlType.int(),\n    \"before\": appsync.GraphqlType.string(),\n    \"last\": appsync.GraphqlType.int()\n}\n\nNode = appsync.InterfaceType(\"Node\",\n    definition={\"id\": appsync.GraphqlType.string()}\n)\nFilmNode = appsync.ObjectType(\"FilmNode\",\n    interface_types=[Node],\n    definition={\"film_name\": appsync.GraphqlType.string()}\n)\n\ndef generate_edge_and_connection(base):\n    edge = appsync.ObjectType(f\"{base.name}Edge\",\n        definition={\"node\": base.attribute(), \"cursor\": appsync.GraphqlType.string()}\n    )\n    connection = appsync.ObjectType(f\"{base.name}Connection\",\n        definition={\n            \"edges\": edge.attribute(is_list=True),\n            \"pluralize(base.name)\": base.attribute(is_list=True),\n            \"total_count\": appsync.GraphqlType.int()\n        }\n    )\n    return {\"edge\": edge, \"connection\": connection}",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AppSync;\nvar pluralize = Require(\"pluralize\");\n\nIDictionary<string, GraphqlType> args = new Dictionary<string, GraphqlType> {\n    { \"after\", GraphqlType.String() },\n    { \"first\", GraphqlType.Int() },\n    { \"before\", GraphqlType.String() },\n    { \"last\", GraphqlType.Int() }\n};\n\nInterfaceType Node = new InterfaceType(\"Node\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> { { \"id\", GraphqlType.String() } }\n});\nObjectType FilmNode = new ObjectType(\"FilmNode\", new ObjectTypeOptions {\n    InterfaceTypes = new [] { Node },\n    Definition = new Dictionary<string, IField> { { \"filmName\", GraphqlType.String() } }\n});\n\npublic IDictionary<string, ObjectType> GenerateEdgeAndConnection(ObjectType base)\n{\n    ObjectType edge = new ObjectType($\"{base.name}Edge\", new ObjectTypeOptions {\n        Definition = new Dictionary<string, IField> { { \"node\", base.Attribute() }, { \"cursor\", GraphqlType.String() } }\n    });\n    ObjectType connection = new ObjectType($\"{base.name}Connection\", new ObjectTypeOptions {\n        Definition = new Dictionary<string, IField> {\n            { \"edges\", edge.Attribute(new BaseTypeOptions { IsList = true }) },\n            { Pluralize(base.Name), base.Attribute(new BaseTypeOptions { IsList = true }) },\n            { \"totalCount\", GraphqlType.Int() }\n        }\n    });\n    return new Struct { Edge = edge, Connection = connection };\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.appsync.*;\nObject pluralize = require(\"pluralize\");\n\nMap<String, GraphqlType> args = Map.of(\n        \"after\", GraphqlType.string(),\n        \"first\", GraphqlType.int(),\n        \"before\", GraphqlType.string(),\n        \"last\", GraphqlType.int());\n\nInterfaceType Node = InterfaceType.Builder.create(\"Node\")\n        .definition(Map.of(\"id\", GraphqlType.string()))\n        .build();\nObjectType FilmNode = ObjectType.Builder.create(\"FilmNode\")\n        .interfaceTypes(List.of(Node))\n        .definition(Map.of(\"filmName\", GraphqlType.string()))\n        .build();\n\npublic Map<String, ObjectType> generateEdgeAndConnection(ObjectType base) {\n    ObjectType edge = ObjectType.Builder.create(String.format(\"%sEdge\", base.getName()))\n            .definition(Map.of(\"node\", base.attribute(), \"cursor\", GraphqlType.string()))\n            .build();\n    ObjectType connection = ObjectType.Builder.create(String.format(\"%sConnection\", base.getName()))\n            .definition(Map.of(\n                    \"edges\", edge.attribute(BaseTypeOptions.builder().isList(true).build()),\n                    pluralize(base.getName()), base.attribute(BaseTypeOptions.builder().isList(true).build()),\n                    \"totalCount\", GraphqlType.int()))\n            .build();\n    return Map.of(\"edge\", edge, \"connection\", connection);\n}",
          "version": "1"
        },
        "go": {
          "source": "import appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\npluralize := require(jsii.String(\"pluralize\"))\n\nargs := map[string]graphqlType{\n\t\"after\": appsync.graphqlType.string(),\n\t\"first\": appsync.graphqlType.int(),\n\t\"before\": appsync.graphqlType.string(),\n\t\"last\": appsync.graphqlType.int(),\n}\n\nnode := appsync.NewInterfaceType(jsii.String(\"Node\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.*graphqlType.string(),\n\t},\n})\nfilmNode := appsync.NewObjectType(jsii.String(\"FilmNode\"), &objectTypeOptions{\n\tinterfaceTypes: []interfaceType{\n\t\t*node,\n\t},\n\tdefinition: map[string]*iField{\n\t\t\"filmName\": appsync.*graphqlType.string(),\n\t},\n})\n\nfunc GenerateEdgeAndConnection(base *objectType) map[string]objectType {\n\tedge := appsync.NewObjectType(fmt.Sprintf(\"%vEdge\", *base.name), &objectTypeOptions{\n\t\tdefinition: map[string]*iField{\n\t\t\t\"node\": base.attribute(),\n\t\t\t\"cursor\": appsync.*graphqlType.string(),\n\t\t},\n\t})\n\tconnection := appsync.NewObjectType(fmt.Sprintf(\"%vConnection\", *base.name), &objectTypeOptions{\n\t\tdefinition: map[string]*iField{\n\t\t\t\"edges\": edge.attribute(&BaseTypeOptions{\n\t\t\t\t\"isList\": jsii.Boolean(true),\n\t\t\t}),\n\t\t\tpluralize(base.name): base.attribute(&BaseTypeOptions{\n\t\t\t\t\"isList\": jsii.Boolean(true),\n\t\t\t}),\n\t\t\t\"totalCount\": appsync.*graphqlType.int(),\n\t\t},\n\t})\n\treturn map[string]objectType{\n\t\t\"edge\": edge,\n\t\t\"connection\": connection,\n\t}\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as appsync from '@aws-cdk/aws-appsync';\nconst pluralize = require('pluralize');\n\nexport const args = {\n  after: appsync.GraphqlType.string(),\n  first: appsync.GraphqlType.int(),\n  before: appsync.GraphqlType.string(),\n  last: appsync.GraphqlType.int(),\n};\n\nexport const Node = new appsync.InterfaceType('Node', {\n  definition: { id: appsync.GraphqlType.string() }\n});\nexport const FilmNode = new appsync.ObjectType('FilmNode', {\n  interfaceTypes: [Node],\n  definition: { filmName: appsync.GraphqlType.string() }\n});\n\nexport function generateEdgeAndConnection(base: appsync.ObjectType) {\n  const edge = new appsync.ObjectType(`${base.name}Edge`, {\n    definition: { node: base.attribute(), cursor: appsync.GraphqlType.string() }\n  });\n  const connection = new appsync.ObjectType(`${base.name}Connection`, {\n    definition: {\n      edges: edge.attribute({ isList: true }),\n      [pluralize(base.name)]: base.attribute({ isList: true }),\n      totalCount: appsync.GraphqlType.int(),\n    }\n  });\n  return { edge: edge, connection: connection };\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 595
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseTypeOptions",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#int",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.InterfaceType",
        "@aws-cdk/aws-appsync.InterfaceType#attribute",
        "@aws-cdk/aws-appsync.InterfaceType#name",
        "@aws-cdk/aws-appsync.IntermediateTypeOptions",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions"
      ],
      "fullSource": "import * as appsync from '@aws-cdk/aws-appsync';\nconst pluralize = require('pluralize');\n\nexport const args = {\n  after: appsync.GraphqlType.string(),\n  first: appsync.GraphqlType.int(),\n  before: appsync.GraphqlType.string(),\n  last: appsync.GraphqlType.int(),\n};\n\nexport const Node = new appsync.InterfaceType('Node', {\n  definition: { id: appsync.GraphqlType.string() }\n});\nexport const FilmNode = new appsync.ObjectType('FilmNode', {\n  interfaceTypes: [Node],\n  definition: { filmName: appsync.GraphqlType.string() }\n});\n\nexport function generateEdgeAndConnection(base: appsync.ObjectType) {\n  const edge = new appsync.ObjectType(`${base.name}Edge`, {\n    definition: { node: base.attribute(), cursor: appsync.GraphqlType.string() }\n  });\n  const connection = new appsync.ObjectType(`${base.name}Connection`, {\n    definition: {\n      edges: edge.attribute({ isList: true }),\n      [pluralize(base.name)]: base.attribute({ isList: true }),\n      totalCount: appsync.GraphqlType.int(),\n    }\n  });\n  return { edge: edge, connection: connection };\n}",
      "syntaxKindCounter": {
        "10": 4,
        "15": 2,
        "17": 2,
        "75": 79,
        "89": 4,
        "106": 2,
        "153": 1,
        "154": 1,
        "156": 1,
        "169": 1,
        "192": 1,
        "193": 12,
        "194": 26,
        "196": 13,
        "197": 4,
        "211": 2,
        "221": 2,
        "223": 1,
        "225": 6,
        "235": 1,
        "242": 6,
        "243": 6,
        "244": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 20,
        "290": 1
      },
      "fqnsFingerprint": "028b4cb5cde93e7848d62078ddc57b180c7a6d13ba800f0e20bcab145174f5f5"
    },
    "7f982a7d4a9199016cfe272a066aeabe9dadb67cc33d0b35acefaa9652304bc7": {
      "translations": {
        "python": {
          "source": "# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\n\napi = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\"\n)\n\nobject_types = [Node, FilmNode]\n\nfilm_connections = generate_edge_and_connection(FilmNode)\n\napi.add_query(\"allFilms\", appsync.ResolvableField(\n    return_type=film_connections.connection.attribute(),\n    args=args,\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=dummy_request,\n    response_mapping_template=dummy_response\n))\n\napi.add_type(Node)\napi.add_type(FilmNode)\napi.add_type(film_connections.edge)\napi.add_type(film_connections.connection)",
          "version": "2"
        },
        "csharp": {
          "source": "MappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\n\nGraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\"\n});\n\nInterfaceType[] objectTypes = new [] { Node, FilmNode };\n\nIDictionary<string, ObjectType> filmConnections = GenerateEdgeAndConnection(FilmNode);\n\napi.AddQuery(\"allFilms\", new ResolvableField(new ResolvableFieldOptions {\n    ReturnType = filmConnections.Connection.Attribute(),\n    Args = args,\n    DataSource = api.AddNoneDataSource(\"none\"),\n    RequestMappingTemplate = dummyRequest,\n    ResponseMappingTemplate = dummyResponse\n}));\n\napi.AddType(Node);\napi.AddType(FilmNode);\napi.AddType(filmConnections.Edge);\napi.AddType(filmConnections.Connection);",
          "version": "1"
        },
        "java": {
          "source": "MappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\n\nGraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .build();\n\nInterfaceType[] objectTypes = List.of(Node, FilmNode);\n\nMap<String, ObjectType> filmConnections = generateEdgeAndConnection(FilmNode);\n\napi.addQuery(\"allFilms\", ResolvableField.Builder.create()\n        .returnType(filmConnections.connection.attribute())\n        .args(args)\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .requestMappingTemplate(dummyRequest)\n        .responseMappingTemplate(dummyResponse)\n        .build());\n\napi.addType(Node);\napi.addType(FilmNode);\napi.addType(filmConnections.getEdge());\napi.addType(filmConnections.getConnection());",
          "version": "1"
        },
        "go": {
          "source": "var dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\n\napi := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n})\n\nobjectTypes := []interfaceType{\n\tnode,\n\tfilmNode,\n}\n\nfilmConnections := generateEdgeAndConnection(filmNode)\n\napi.addQuery(jsii.String(\"allFilms\"), appsync.NewResolvableField(&resolvableFieldOptions{\n\treturnType: filmConnections.connection.attribute(),\n\targs: args,\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\trequestMappingTemplate: dummyRequest,\n\tresponseMappingTemplate: dummyResponse,\n}))\n\napi.addType(node)\napi.addType(filmNode)\napi.addType(filmConnections.edge)\napi.addType(filmConnections.connection)",
          "version": "1"
        },
        "$": {
          "source": "declare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\n\nconst objectTypes = [ Node, FilmNode ];\n\nconst filmConnections = generateEdgeAndConnection(FilmNode);\n\napi.addQuery('allFilms', new appsync.ResolvableField({\n  returnType: filmConnections.connection.attribute(),\n  args: args,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));\n\napi.addType(Node);\napi.addType(FilmNode);\napi.addType(filmConnections.edge);\napi.addType(filmConnections.connection);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 632
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApi#addQuery",
        "@aws-cdk/aws-appsync.GraphqlApi#addType",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.IIntermediateType",
        "@aws-cdk/aws-appsync.InterfaceType#attribute",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ResolvableField",
        "@aws-cdk/aws-appsync.ResolvableFieldOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nconst pluralize = require('pluralize');\n\nconst args = {\n  after: appsync.GraphqlType.string(),\n  first: appsync.GraphqlType.int(),\n  before: appsync.GraphqlType.string(),\n  last: appsync.GraphqlType.int(),\n};\n\nconst Node = new appsync.InterfaceType('Node', {\n  definition: { id: appsync.GraphqlType.string() }\n});\n\nconst FilmNode = new appsync.ObjectType('FilmNode', {\n  interfaceTypes: [Node],\n  definition: { filmName: appsync.GraphqlType.string() }\n});\n\nfunction generateEdgeAndConnection(base: appsync.ObjectType) {\n  const edge = new appsync.ObjectType(`${base.name}Edge`, {\n    definition: { node: base.attribute(), cursor: appsync.GraphqlType.string() }\n  });\n  const connection = new appsync.ObjectType(`${base.name}Connection`, {\n    definition: {\n      edges: edge.attribute({ isList: true }),\n      [pluralize(base.name)]: base.attribute({ isList: true }),\n      totalCount: appsync.GraphqlType.int(),\n    }\n  });\n  return { edge: edge, connection: connection };\n}\n\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\n\nconst objectTypes = [ Node, FilmNode ];\n\nconst filmConnections = generateEdgeAndConnection(FilmNode);\n\napi.addQuery('allFilms', new appsync.ResolvableField({\n  returnType: filmConnections.connection.attribute(),\n  args: args,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));\n\napi.addType(Node);\napi.addType(FilmNode);\napi.addType(filmConnections.edge);\napi.addType(filmConnections.connection);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 47,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 12,
        "196": 8,
        "197": 2,
        "225": 5,
        "226": 5,
        "242": 5,
        "243": 5,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "4ce0c3cb09190415808341313d5fc2d1d67f1175ad31c9e4c715bb9432033d51"
    },
    "31feece0f93e97db7a915d4c3af8c8e7675d2dff36bc48eec8f15dee3efff53e": {
      "translations": {
        "python": {
          "source": "field = appsync.Field(\n    return_type=appsync.GraphqlType.string(),\n    args={\n        \"argument\": appsync.GraphqlType.string()\n    }\n)\ntype = appsync.InterfaceType(\"Node\",\n    definition={\"test\": field}\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Field field = new Field(new FieldOptions {\n    ReturnType = GraphqlType.String(),\n    Args = new Dictionary<string, GraphqlType> {\n        { \"argument\", GraphqlType.String() }\n    }\n});\nInterfaceType type = new InterfaceType(\"Node\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> { { \"test\", field } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Field field = Field.Builder.create()\n        .returnType(GraphqlType.string())\n        .args(Map.of(\n                \"argument\", GraphqlType.string()))\n        .build();\nInterfaceType type = InterfaceType.Builder.create(\"Node\")\n        .definition(Map.of(\"test\", field))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "field := appsync.NewField(&fieldOptions{\n\treturnType: appsync.graphqlType.string(),\n\targs: map[string]*graphqlType{\n\t\t\"argument\": appsync.*graphqlType.string(),\n\t},\n})\ntype := appsync.NewInterfaceType(jsii.String(\"Node\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"test\": field,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const field = new appsync.Field({\n  returnType: appsync.GraphqlType.string(),\n  args: {\n    argument: appsync.GraphqlType.string(),\n  },\n});\nconst type = new appsync.InterfaceType('Node', {\n  definition: { test: field },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 717
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.Field",
        "@aws-cdk/aws-appsync.FieldOptions",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.InterfaceType",
        "@aws-cdk/aws-appsync.IntermediateTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst field = new appsync.Field({\n  returnType: appsync.GraphqlType.string(),\n  args: {\n    argument: appsync.GraphqlType.string(),\n  },\n});\nconst type = new appsync.InterfaceType('Node', {\n  definition: { test: field },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 18,
        "193": 4,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "9c9b822bccebb6ba319176301e18ac072cbea7ee5164ed7a4b97954856825dd5"
    },
    "109ddc68d40bbde8cb635b2d0a7d051cc44cd23fa524f55c7ca63715c73b2f5a": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\ninfo = appsync.ObjectType(\"Info\",\n    definition={\n        \"node\": appsync.ResolvableField(\n            return_type=appsync.GraphqlType.string(),\n            args={\n                \"id\": appsync.GraphqlType.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = new ObjectType(\"Info\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"node\", new ResolvableField(new ResolvableFieldOptions {\n            ReturnType = GraphqlType.String(),\n            Args = new Dictionary<string, GraphqlType> {\n                { \"id\", GraphqlType.String() }\n            },\n            DataSource = api.AddNoneDataSource(\"none\"),\n            RequestMappingTemplate = dummyRequest,\n            ResponseMappingTemplate = dummyResponse\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = ObjectType.Builder.create(\"Info\")\n        .definition(Map.of(\n                \"node\", ResolvableField.Builder.create()\n                        .returnType(GraphqlType.string())\n                        .args(Map.of(\n                                \"id\", GraphqlType.string()))\n                        .dataSource(api.addNoneDataSource(\"none\"))\n                        .requestMappingTemplate(dummyRequest)\n                        .responseMappingTemplate(dummyResponse)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\ninfo := appsync.NewObjectType(jsii.String(\"Info\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"node\": appsync.NewResolvableField(&ResolvableFieldOptions{\n\t\t\t\"returnType\": appsync.GraphqlType.string(),\n\t\t\t\"args\": map[string]GraphqlType{\n\t\t\t\t\"id\": appsync.GraphqlType.string(),\n\t\t\t},\n\t\t\t\"dataSource\": api.addNoneDataSource(jsii.String(\"none\")),\n\t\t\t\"requestMappingTemplate\": dummyRequest,\n\t\t\t\"responseMappingTemplate\": dummyResponse,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 745
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions",
        "@aws-cdk/aws-appsync.ResolvableField",
        "@aws-cdk/aws-appsync.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "b66927a734456c6c5c3ab476f8678b9f5dc4efe72c5850d3fa339e1e5bf4418d"
    },
    "0a8cbcc31338086338e1b1dca55320bf55757cf007d887493f39265d3a94558e": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\nquery = appsync.ObjectType(\"Query\",\n    definition={\n        \"get\": appsync.ResolvableField(\n            return_type=appsync.GraphqlType.string(),\n            args={\n                \"argument\": appsync.GraphqlType.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType query = new ObjectType(\"Query\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"get\", new ResolvableField(new ResolvableFieldOptions {\n            ReturnType = GraphqlType.String(),\n            Args = new Dictionary<string, GraphqlType> {\n                { \"argument\", GraphqlType.String() }\n            },\n            DataSource = api.AddNoneDataSource(\"none\"),\n            RequestMappingTemplate = dummyRequest,\n            ResponseMappingTemplate = dummyResponse\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType query = ObjectType.Builder.create(\"Query\")\n        .definition(Map.of(\n                \"get\", ResolvableField.Builder.create()\n                        .returnType(GraphqlType.string())\n                        .args(Map.of(\n                                \"argument\", GraphqlType.string()))\n                        .dataSource(api.addNoneDataSource(\"none\"))\n                        .requestMappingTemplate(dummyRequest)\n                        .responseMappingTemplate(dummyResponse)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\nquery := appsync.NewObjectType(jsii.String(\"Query\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"get\": appsync.NewResolvableField(&ResolvableFieldOptions{\n\t\t\t\"returnType\": appsync.GraphqlType.string(),\n\t\t\t\"args\": map[string]GraphqlType{\n\t\t\t\t\"argument\": appsync.GraphqlType.string(),\n\t\t\t},\n\t\t\t\"dataSource\": api.addNoneDataSource(jsii.String(\"none\")),\n\t\t\t\"requestMappingTemplate\": dummyRequest,\n\t\t\t\"responseMappingTemplate\": dummyResponse,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst query = new appsync.ObjectType('Query', {\n  definition: {\n    get: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        argument: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 776
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions",
        "@aws-cdk/aws-appsync.ResolvableField",
        "@aws-cdk/aws-appsync.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst query = new appsync.ObjectType('Query', {\n  definition: {\n    get: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        argument: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "b66927a734456c6c5c3ab476f8678b9f5dc4efe72c5850d3fa339e1e5bf4418d"
    },
    "14f00bb535740e516e5673551e34c0981f4c4c1d883e20d063e7cbd725f9837c": {
      "translations": {
        "python": {
          "source": "node = appsync.InterfaceType(\"Node\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True)\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "InterfaceType node = new InterfaceType(\"Node\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "InterfaceType node = InterfaceType.Builder.create(\"Node\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "node := appsync.NewInterfaceType(jsii.String(\"Node\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 819
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseTypeOptions",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.InterfaceType",
        "@aws-cdk/aws-appsync.IntermediateTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "106": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "ee57fef2979cd142cfe03c2aec6257389468595de9a30ea07e892f1a70ebf6dc"
    },
    "080548e11094437697aa2e9a3630f1b340afdac5bf527adf4f4c7566bb643631": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\"\n)\ndemo = appsync.ObjectType(\"Demo\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True),\n        \"version\": appsync.GraphqlType.string(is_required=True)\n    }\n)\n\napi.add_type(demo)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\"\n});\nObjectType demo = new ObjectType(\"Demo\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) },\n        { \"version\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});\n\napi.AddType(demo);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .build();\nObjectType demo = ObjectType.Builder.create(\"Demo\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build()),\n                \"version\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();\n\napi.addType(demo);",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n})\ndemo := appsync.NewObjectType(jsii.String(\"Demo\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t\t\"version\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})\n\napi.addType(demo)",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 839
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseTypeOptions",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApi#addType",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.IIntermediateType",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 21,
        "104": 1,
        "106": 2,
        "193": 5,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6
      },
      "fqnsFingerprint": "900ac626cc8b2b534910339096e8f7951e2f106a22f5fcd1862b4ddc72792485"
    },
    "b5963662b4c838d0a9b0f922feadd0ef8b06959c7b7f2d3d2a25ccd10f61e4e9": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_appsync as appsync\ndemo = appsync.ObjectType(\"Demo\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True),\n        \"version\": appsync.GraphqlType.string(is_required=True)\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AppSync;\nObjectType demo = new ObjectType(\"Demo\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) },\n        { \"version\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.appsync.*;\nObjectType demo = ObjectType.Builder.create(\"Demo\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build()),\n                \"version\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\ndemo := appsync.NewObjectType(jsii.String(\"Demo\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t\t\"version\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as appsync from '@aws-cdk/aws-appsync';\nexport const demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 858
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseTypeOptions",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions"
      ],
      "fullSource": "import * as appsync from '@aws-cdk/aws-appsync';\nexport const demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "89": 1,
        "106": 2,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "c37282c88aaccc8fdb98541c4179dcf82cebbc202754f7b7851d82b7cf97a720"
    },
    "a8749e94035a8cb056b6f337564b009f79b09d7a6e925aa20e16c22d471d5f79": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\napi.add_type(demo)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\napi.AddType(demo);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\napi.addType(demo);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\napi.addType(demo)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\napi.addType(demo);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 870
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.GraphqlApi#addType",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.IIntermediateType",
        "@aws-cdk/aws-appsync.ObjectType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nconst pluralize = require('pluralize');\n\nconst args = {\n  after: appsync.GraphqlType.string(),\n  first: appsync.GraphqlType.int(),\n  before: appsync.GraphqlType.string(),\n  last: appsync.GraphqlType.int(),\n};\n\nconst Node = new appsync.InterfaceType('Node', {\n  definition: { id: appsync.GraphqlType.string() }\n});\n\nconst FilmNode = new appsync.ObjectType('FilmNode', {\n  interfaceTypes: [Node],\n  definition: { filmName: appsync.GraphqlType.string() }\n});\n\nfunction generateEdgeAndConnection(base: appsync.ObjectType) {\n  const edge = new appsync.ObjectType(`${base.name}Edge`, {\n    definition: { node: base.attribute(), cursor: appsync.GraphqlType.string() }\n  });\n  const connection = new appsync.ObjectType(`${base.name}Connection`, {\n    definition: {\n      edges: edge.attribute({ isList: true }),\n      [pluralize(base.name)]: base.attribute({ isList: true }),\n      totalCount: appsync.GraphqlType.int(),\n    }\n  });\n  return { edge: edge, connection: connection };\n}\n\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\napi.addType(demo);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "da4bfc779c260a952a72b2d3c7d64da3f5198d9f2858aedbd3a36f5a2a9c76aa"
    },
    "cdac80e85fa956611d746f8d11d65a503e09f3adabe2ed374661ffbd1ee36c0c": {
      "translations": {
        "python": {
          "source": "node = appsync.InterfaceType(\"Node\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True)\n    }\n)\ndemo = appsync.ObjectType(\"Demo\",\n    interface_types=[node],\n    definition={\n        \"version\": appsync.GraphqlType.string(is_required=True)\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "InterfaceType node = new InterfaceType(\"Node\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});\nObjectType demo = new ObjectType(\"Demo\", new ObjectTypeOptions {\n    InterfaceTypes = new [] { node },\n    Definition = new Dictionary<string, IField> {\n        { \"version\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "InterfaceType node = InterfaceType.Builder.create(\"Node\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();\nObjectType demo = ObjectType.Builder.create(\"Demo\")\n        .interfaceTypes(List.of(node))\n        .definition(Map.of(\n                \"version\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "node := appsync.NewInterfaceType(jsii.String(\"Node\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})\ndemo := appsync.NewObjectType(jsii.String(\"Demo\"), &objectTypeOptions{\n\tinterfaceTypes: []interfaceType{\n\t\tnode,\n\t},\n\tdefinition: map[string]*iField{\n\t\t\"version\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\nconst demo = new appsync.ObjectType('Demo', {\n  interfaceTypes: [ node ],\n  definition: {\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 877
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseTypeOptions",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.InterfaceType",
        "@aws-cdk/aws-appsync.IntermediateTypeOptions",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\nconst demo = new appsync.ObjectType('Demo', {\n  interfaceTypes: [ node ],\n  definition: {\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 20,
        "106": 2,
        "192": 1,
        "193": 6,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7
      },
      "fqnsFingerprint": "73264867c07dc717517a46ac3128f4482c45397122dea5bed327a9647785afad"
    },
    "14f93888ca2a881d4f26492d880d7d77fa1a4bccb8a972ea0fca9535c3047732": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\nepisode = appsync.EnumType(\"Episode\",\n    definition=[\"NEWHOPE\", \"EMPIRE\", \"JEDI\"\n    ]\n)\napi.add_type(episode)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\nEnumType episode = new EnumType(\"Episode\", new EnumTypeOptions {\n    Definition = new [] { \"NEWHOPE\", \"EMPIRE\", \"JEDI\" }\n});\napi.AddType(episode);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\nEnumType episode = EnumType.Builder.create(\"Episode\")\n        .definition(List.of(\"NEWHOPE\", \"EMPIRE\", \"JEDI\"))\n        .build();\napi.addType(episode);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\nepisode := appsync.NewEnumType(jsii.String(\"Episode\"), &enumTypeOptions{\n\tdefinition: []*string{\n\t\tjsii.String(\"NEWHOPE\"),\n\t\tjsii.String(\"EMPIRE\"),\n\t\tjsii.String(\"JEDI\"),\n\t},\n})\napi.addType(episode)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\nconst episode = new appsync.EnumType('Episode', {\n  definition: [\n    'NEWHOPE',\n    'EMPIRE',\n    'JEDI',\n  ],\n});\napi.addType(episode);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 913
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.EnumType",
        "@aws-cdk/aws-appsync.EnumTypeOptions",
        "@aws-cdk/aws-appsync.GraphqlApi#addType",
        "@aws-cdk/aws-appsync.IIntermediateType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst episode = new appsync.EnumType('Episode', {\n  definition: [\n    'NEWHOPE',\n    'EMPIRE',\n    'JEDI',\n  ],\n});\napi.addType(episode);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "a87dbccd6e3e686e3aecb1db8f3b0e64eeace1041ca495c9ed68bee3cbd6f228"
    },
    "95a1396afe2d5efa5b8c77c465fef1ca6a917db066e45bf590d207fe65e085b4": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\nreview = appsync.InputType(\"Review\",\n    definition={\n        \"stars\": appsync.GraphqlType.int(is_required=True),\n        \"commentary\": appsync.GraphqlType.string()\n    }\n)\napi.add_type(review)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\nInputType review = new InputType(\"Review\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"stars\", GraphqlType.Int(new BaseTypeOptions { IsRequired = true }) },\n        { \"commentary\", GraphqlType.String() }\n    }\n});\napi.AddType(review);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\nInputType review = InputType.Builder.create(\"Review\")\n        .definition(Map.of(\n                \"stars\", GraphqlType.int(BaseTypeOptions.builder().isRequired(true).build()),\n                \"commentary\", GraphqlType.string()))\n        .build();\napi.addType(review);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\nreview := appsync.NewInputType(jsii.String(\"Review\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"stars\": appsync.GraphqlType.int(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t\t\"commentary\": appsync.GraphqlType.string(),\n\t},\n})\napi.addType(review)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\nconst review = new appsync.InputType('Review', {\n  definition: {\n    stars: appsync.GraphqlType.int({ isRequired: true }),\n    commentary: appsync.GraphqlType.string(),\n  },\n});\napi.addType(review);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 941
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseTypeOptions",
        "@aws-cdk/aws-appsync.GraphqlApi#addType",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#int",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.IIntermediateType",
        "@aws-cdk/aws-appsync.InputType",
        "@aws-cdk/aws-appsync.IntermediateTypeOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst review = new appsync.InputType('Review', {\n  definition: {\n    stars: appsync.GraphqlType.int({ isRequired: true }),\n    commentary: appsync.GraphqlType.string(),\n  },\n});\napi.addType(review);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 19,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "bc9dd5a628e4e6f39ec09a299f90bb7d6f25c34aab2278ae09c7cdba0b897ad4"
    },
    "89660383eee0205bcd477067a6c92a3f637950959f0794db46ee452a59ea4bed": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\nstring = appsync.GraphqlType.string()\nhuman = appsync.ObjectType(\"Human\", definition={\"name\": string})\ndroid = appsync.ObjectType(\"Droid\", definition={\"name\": string})\nstarship = appsync.ObjectType(\"Starship\", definition={\"name\": string})\nsearch = appsync.UnionType(\"Search\",\n    definition=[human, droid, starship]\n)\napi.add_type(search)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\nGraphqlType string = GraphqlType.String();\nObjectType human = new ObjectType(\"Human\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nObjectType droid = new ObjectType(\"Droid\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nObjectType starship = new ObjectType(\"Starship\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nUnionType search = new UnionType(\"Search\", new UnionTypeOptions {\n    Definition = new [] { human, droid, starship }\n});\napi.AddType(search);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\nGraphqlType string = GraphqlType.string();\nObjectType human = ObjectType.Builder.create(\"Human\").definition(Map.of(\"name\", string)).build();\nObjectType droid = ObjectType.Builder.create(\"Droid\").definition(Map.of(\"name\", string)).build();\nObjectType starship = ObjectType.Builder.create(\"Starship\").definition(Map.of(\"name\", string)).build();\nUnionType search = UnionType.Builder.create(\"Search\")\n        .definition(List.of(human, droid, starship))\n        .build();\napi.addType(search);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\nstring := appsync.graphqlType.string()\nhuman := appsync.NewObjectType(jsii.String(\"Human\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"name\": string,\n\t},\n})\ndroid := appsync.NewObjectType(jsii.String(\"Droid\"), &objectTypeOptions{\n\tdefinition: map[string]*iField{\n\t\t\"name\": string,\n\t},\n})\nstarship := appsync.NewObjectType(jsii.String(\"Starship\"), &objectTypeOptions{\n\tdefinition: map[string]*iField{\n\t\t\"name\": string,\n\t},\n})\nsearch := appsync.NewUnionType(jsii.String(\"Search\"), &unionTypeOptions{\n\tdefinition: []iIntermediateType{\n\t\thuman,\n\t\tdroid,\n\t\tstarship,\n\t},\n})\napi.addType(search)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\nconst string = appsync.GraphqlType.string();\nconst human = new appsync.ObjectType('Human', { definition: { name: string } });\nconst droid = new appsync.ObjectType('Droid', { definition: { name: string } });\nconst starship = new appsync.ObjectType('Starship', { definition: { name: string } }););\nconst search = new appsync.UnionType('Search', {\n  definition: [ human, droid, starship ],\n});\napi.addType(search);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 969
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.GraphqlApi#addType",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.IIntermediateType",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions",
        "@aws-cdk/aws-appsync.UnionType",
        "@aws-cdk/aws-appsync.UnionTypeOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst string = appsync.GraphqlType.string();\nconst human = new appsync.ObjectType('Human', { definition: { name: string } });\nconst droid = new appsync.ObjectType('Droid', { definition: { name: string } });\nconst starship = new appsync.ObjectType('Starship', { definition: { name: string } });;\nconst search = new appsync.UnionType('Search', {\n  definition: [ human, droid, starship ],\n});\napi.addType(search);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 35,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 7,
        "194": 7,
        "196": 2,
        "197": 4,
        "224": 1,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "eb1fab36d9de23d1c3ad71a5be7696c5ea6cd927c20625cc195fea6a056f4d3c"
    },
    "4b6dbe2c3e0c2a9a1edaded721a3376993b5a5b111614e83fd1a6aae4bd55381": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# film_connection: appsync.InterfaceType\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\n\nstring = appsync.GraphqlType.string()\nint = appsync.GraphqlType.int()\napi.add_query(\"allFilms\", appsync.ResolvableField(\n    return_type=film_connection.attribute(),\n    args={\"after\": string, \"first\": int, \"before\": string, \"last\": int},\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=dummy_request,\n    response_mapping_template=dummy_response\n))",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nInterfaceType filmConnection;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\n\nGraphqlType string = GraphqlType.String();\nGraphqlType int = GraphqlType.Int();\napi.AddQuery(\"allFilms\", new ResolvableField(new ResolvableFieldOptions {\n    ReturnType = filmConnection.Attribute(),\n    Args = new Dictionary<string, GraphqlType> { { \"after\", string }, { \"first\", int }, { \"before\", string }, { \"last\", int } },\n    DataSource = api.AddNoneDataSource(\"none\"),\n    RequestMappingTemplate = dummyRequest,\n    ResponseMappingTemplate = dummyResponse\n}));",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nInterfaceType filmConnection;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\n\nGraphqlType string = GraphqlType.string();\nGraphqlType int = GraphqlType.int();\napi.addQuery(\"allFilms\", ResolvableField.Builder.create()\n        .returnType(filmConnection.attribute())\n        .args(Map.of(\"after\", string, \"first\", int, \"before\", string, \"last\", int))\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .requestMappingTemplate(dummyRequest)\n        .responseMappingTemplate(dummyResponse)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar filmConnection interfaceType\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\n\nstring := appsync.graphqlType.string()\nint := appsync.graphqlType.int()\napi.addQuery(jsii.String(\"allFilms\"), appsync.NewResolvableField(&resolvableFieldOptions{\n\treturnType: filmConnection.attribute(),\n\targs: map[string]*graphqlType{\n\t\t\"after\": string,\n\t\t\"first\": int,\n\t\t\"before\": string,\n\t\t\"last\": int,\n\t},\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\trequestMappingTemplate: dummyRequest,\n\tresponseMappingTemplate: dummyResponse,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const filmConnection: appsync.InterfaceType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst string = appsync.GraphqlType.string();\nconst int = appsync.GraphqlType.int();\napi.addQuery('allFilms', new appsync.ResolvableField({\n  returnType: filmConnection.attribute(),\n  args: { after: string, first: int, before: string, last: int},\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 992
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApi#addQuery",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#int",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.InterfaceType#attribute",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.ResolvableField",
        "@aws-cdk/aws-appsync.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const filmConnection: appsync.InterfaceType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst string = appsync.GraphqlType.string();\nconst int = appsync.GraphqlType.int();\napi.addQuery('allFilms', new appsync.ResolvableField({\n  returnType: filmConnection.attribute(),\n  args: { after: string, first: int, before: string, last: int},\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 43,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 2,
        "194": 8,
        "196": 5,
        "197": 1,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "d721e25c188e1b59e777322864dc3c63dca0f0cb94774ff9de5ddd5129d05ca4"
    },
    "a75c8ca04757ea4871132859502bf7268e18d820d7b8122e131027c03ed3e25b": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# film_node: appsync.ObjectType\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\n\nstring = appsync.GraphqlType.string()\nint = appsync.GraphqlType.int()\napi.add_mutation(\"addFilm\", appsync.ResolvableField(\n    return_type=film_node.attribute(),\n    args={\"name\": string, \"film_number\": int},\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=dummy_request,\n    response_mapping_template=dummy_response\n))",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nObjectType filmNode;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\n\nGraphqlType string = GraphqlType.String();\nGraphqlType int = GraphqlType.Int();\napi.AddMutation(\"addFilm\", new ResolvableField(new ResolvableFieldOptions {\n    ReturnType = filmNode.Attribute(),\n    Args = new Dictionary<string, GraphqlType> { { \"name\", string }, { \"film_number\", int } },\n    DataSource = api.AddNoneDataSource(\"none\"),\n    RequestMappingTemplate = dummyRequest,\n    ResponseMappingTemplate = dummyResponse\n}));",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nObjectType filmNode;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\n\nGraphqlType string = GraphqlType.string();\nGraphqlType int = GraphqlType.int();\napi.addMutation(\"addFilm\", ResolvableField.Builder.create()\n        .returnType(filmNode.attribute())\n        .args(Map.of(\"name\", string, \"film_number\", int))\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .requestMappingTemplate(dummyRequest)\n        .responseMappingTemplate(dummyResponse)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar filmNode objectType\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\n\nstring := appsync.graphqlType.string()\nint := appsync.graphqlType.int()\napi.addMutation(jsii.String(\"addFilm\"), appsync.NewResolvableField(&resolvableFieldOptions{\n\treturnType: filmNode.attribute(),\n\targs: map[string]*graphqlType{\n\t\t\"name\": string,\n\t\t\"film_number\": int,\n\t},\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\trequestMappingTemplate: dummyRequest,\n\tresponseMappingTemplate: dummyResponse,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const filmNode: appsync.ObjectType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst string = appsync.GraphqlType.string();\nconst int = appsync.GraphqlType.int();\napi.addMutation('addFilm', new appsync.ResolvableField({\n  returnType: filmNode.attribute(),\n  args: { name: string, film_number: int },\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 1020
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApi#addMutation",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#int",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.InterfaceType#attribute",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.ResolvableField",
        "@aws-cdk/aws-appsync.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const filmNode: appsync.ObjectType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst string = appsync.GraphqlType.string();\nconst int = appsync.GraphqlType.int();\napi.addMutation('addFilm', new appsync.ResolvableField({\n  returnType: filmNode.attribute(),\n  args: { name: string, film_number: int },\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 39,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 2,
        "194": 8,
        "196": 5,
        "197": 1,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "264a72a12c64f55a44ba9805a3f1ba3f09edcd1e061f298a892a0555fb58dc1d"
    },
    "313f79fe791d65256e52604238171baf8c050c57302706717670addcddcf9950": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# film: appsync.InterfaceType\n\n\napi.add_subscription(\"addedFilm\", appsync.Field(\n    return_type=film.attribute(),\n    args={\"id\": appsync.GraphqlType.id(is_required=True)},\n    directives=[appsync.Directive.subscribe(\"addFilm\")]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nInterfaceType film;\n\n\napi.AddSubscription(\"addedFilm\", new Field(new FieldOptions {\n    ReturnType = film.Attribute(),\n    Args = new Dictionary<string, GraphqlType> { { \"id\", GraphqlType.Id(new BaseTypeOptions { IsRequired = true }) } },\n    Directives = new [] { Directive.Subscribe(\"addFilm\") }\n}));",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nInterfaceType film;\n\n\napi.addSubscription(\"addedFilm\", Field.Builder.create()\n        .returnType(film.attribute())\n        .args(Map.of(\"id\", GraphqlType.id(BaseTypeOptions.builder().isRequired(true).build())))\n        .directives(List.of(Directive.subscribe(\"addFilm\")))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar film interfaceType\n\n\napi.addSubscription(jsii.String(\"addedFilm\"), appsync.NewField(&fieldOptions{\n\treturnType: film.attribute(),\n\targs: map[string]graphqlType{\n\t\t\"id\": appsync.*graphqlType.id(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n\tdirectives: []directive{\n\t\tappsync.*directive.subscribe(jsii.String(\"addFilm\")),\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const film: appsync.InterfaceType;\n\napi.addSubscription('addedFilm', new appsync.Field({\n  returnType: film.attribute(),\n  args: { id: appsync.GraphqlType.id({ isRequired: true }) },\n  directives: [appsync.Directive.subscribe('addFilm')],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-appsync"
        },
        "field": {
          "field": "markdown",
          "line": 1051
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseTypeOptions",
        "@aws-cdk/aws-appsync.Directive",
        "@aws-cdk/aws-appsync.Directive#subscribe",
        "@aws-cdk/aws-appsync.Field",
        "@aws-cdk/aws-appsync.FieldOptions",
        "@aws-cdk/aws-appsync.GraphqlApi#addSubscription",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#id",
        "@aws-cdk/aws-appsync.InterfaceType#attribute",
        "@aws-cdk/aws-appsync.ResolvableField"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const film: appsync.InterfaceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\napi.addSubscription('addedFilm', new appsync.Field({\n  returnType: film.attribute(),\n  args: { id: appsync.GraphqlType.id({ isRequired: true }) },\n  directives: [appsync.Directive.subscribe('addFilm')],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 23,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 3,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "df68e03c709ab59c47edc9115613279bb8946c8d9bcdf5e1b3cf7ad288165f71"
    },
    "58857fa7d5e41557e49390fea0fa93ee1ec02a41a7bb2a07bf42c341c85d0320": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\n# field: appsync.Field\n\nadd_field_options = appsync.AddFieldOptions(\n    field=field,\n    field_name=\"fieldName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nField field;\n\nAddFieldOptions addFieldOptions = new AddFieldOptions {\n    Field = field,\n    FieldName = \"fieldName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nField field;\n\nAddFieldOptions addFieldOptions = AddFieldOptions.builder()\n        .field(field)\n        .fieldName(\"fieldName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nvar field field\n\naddFieldOptions := &addFieldOptions{\n\tfield: field,\n\tfieldName: jsii.String(\"fieldName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const field: appsync.Field;\nconst addFieldOptions: appsync.AddFieldOptions = {\n  field: field,\n  fieldName: 'fieldName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.AddFieldOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AddFieldOptions",
        "@aws-cdk/aws-appsync.IField"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const field: appsync.Field;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst addFieldOptions: appsync.AddFieldOptions = {\n  field: field,\n  fieldName: 'fieldName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "aebc02df333d8c207d5f814ad97b8ee260bde275b8c6a6f6f11d41f8c69d7a42"
    },
    "fdaa47ed653ec73b6c78d676c73044af7ac83760596701de21f7b1522fadb197": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\nimport aws_cdk.core as cdk\n\n# expiration: cdk.Expiration\n\napi_key_config = appsync.ApiKeyConfig(\n    description=\"description\",\n    expires=expiration,\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\nusing Amazon.CDK;\n\nExpiration expiration;\nApiKeyConfig apiKeyConfig = new ApiKeyConfig {\n    Description = \"description\",\n    Expires = expiration,\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\nimport software.amazon.awscdk.core.*;\n\nExpiration expiration;\n\nApiKeyConfig apiKeyConfig = ApiKeyConfig.builder()\n        .description(\"description\")\n        .expires(expiration)\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar expiration expiration\n\napiKeyConfig := &apiKeyConfig{\n\tdescription: jsii.String(\"description\"),\n\texpires: expiration,\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const expiration: cdk.Expiration;\nconst apiKeyConfig: appsync.ApiKeyConfig = {\n  description: 'description',\n  expires: expiration,\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.ApiKeyConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.ApiKeyConfig",
        "@aws-cdk/core.Expiration"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const expiration: cdk.Expiration;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiKeyConfig: appsync.ApiKeyConfig = {\n  description: 'description',\n  expires: expiration,\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "bcb3bd8d93e0d75242c79194ff7cc60032d70d598bba2b91be4f5505a6898f90"
    },
    "a1deec016d5b2ec9f2148ba2c5af9193f96e421eaa29807db250a734d1dae106": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\n\nappsync_function = appsync.AppsyncFunction(self, \"function\",\n    name=\"appsync_function\",\n    api=api,\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=appsync.MappingTemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.MappingTemplate.from_file(\"response.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\n\nAppsyncFunction appsyncFunction = new AppsyncFunction(this, \"function\", new AppsyncFunctionProps {\n    Name = \"appsync_function\",\n    Api = api,\n    DataSource = api.AddNoneDataSource(\"none\"),\n    RequestMappingTemplate = MappingTemplate.FromFile(\"request.vtl\"),\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"response.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\n\nAppsyncFunction appsyncFunction = AppsyncFunction.Builder.create(this, \"function\")\n        .name(\"appsync_function\")\n        .api(api)\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .requestMappingTemplate(MappingTemplate.fromFile(\"request.vtl\"))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"response.vtl\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\n\nappsyncFunction := appsync.NewAppsyncFunction(this, jsii.String(\"function\"), &appsyncFunctionProps{\n\tname: jsii.String(\"appsync_function\"),\n\tapi: api,\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"request.vtl\")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"response.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.AppsyncFunction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AppsyncFunction",
        "@aws-cdk/aws-appsync.AppsyncFunctionProps",
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromFile",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "f488042bd74b14299f1af4b1fd2e9cd1d4af7c788959e77f12f932b510c9aa5c"
    },
    "1c3a9019bbadae43466d0a42ad5f974f3b8f2843556626222d27638948923537": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nappsync_function_attributes = appsync.AppsyncFunctionAttributes(\n    function_arn=\"functionArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nAppsyncFunctionAttributes appsyncFunctionAttributes = new AppsyncFunctionAttributes {\n    FunctionArn = \"functionArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nAppsyncFunctionAttributes appsyncFunctionAttributes = AppsyncFunctionAttributes.builder()\n        .functionArn(\"functionArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nappsyncFunctionAttributes := &appsyncFunctionAttributes{\n\tfunctionArn: jsii.String(\"functionArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst appsyncFunctionAttributes: appsync.AppsyncFunctionAttributes = {\n  functionArn: 'functionArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.AppsyncFunctionAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AppsyncFunctionAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst appsyncFunctionAttributes: appsync.AppsyncFunctionAttributes = {\n  functionArn: 'functionArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "fe332a774a4ea79533d723ba6a87fcacfdb1c9e00beb1c130488a54e789c6fb0"
    },
    "3f9cab12f60994cf006980105d5f9311c7f74f9fab0755539f3a696650994766": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\n\nappsync_function = appsync.AppsyncFunction(self, \"function\",\n    name=\"appsync_function\",\n    api=api,\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=appsync.MappingTemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.MappingTemplate.from_file(\"response.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\n\nAppsyncFunction appsyncFunction = new AppsyncFunction(this, \"function\", new AppsyncFunctionProps {\n    Name = \"appsync_function\",\n    Api = api,\n    DataSource = api.AddNoneDataSource(\"none\"),\n    RequestMappingTemplate = MappingTemplate.FromFile(\"request.vtl\"),\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"response.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\n\nAppsyncFunction appsyncFunction = AppsyncFunction.Builder.create(this, \"function\")\n        .name(\"appsync_function\")\n        .api(api)\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .requestMappingTemplate(MappingTemplate.fromFile(\"request.vtl\"))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"response.vtl\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\n\nappsyncFunction := appsync.NewAppsyncFunction(this, jsii.String(\"function\"), &appsyncFunctionProps{\n\tname: jsii.String(\"appsync_function\"),\n\tapi: api,\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"request.vtl\")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"response.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.AppsyncFunctionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AppsyncFunction",
        "@aws-cdk/aws-appsync.AppsyncFunctionProps",
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromFile",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "f488042bd74b14299f1af4b1fd2e9cd1d4af7c788959e77f12f932b510c9aa5c"
    },
    "a923c9df49d72ce0d6ab24a9020334c7e8c35006e67c8ef61000b74ad702db97": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nassign = appsync.Assign(\"attr\", \"arg\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nAssign assign = new Assign(\"attr\", \"arg\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nAssign assign = new Assign(\"attr\", \"arg\");",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nassign := appsync.NewAssign(jsii.String(\"attr\"), jsii.String(\"arg\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst assign = new appsync.Assign('attr', 'arg');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.Assign"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.Assign"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst assign = new appsync.Assign('attr', 'arg');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "57445a044ee25ea0dfba11fcd4fa80f939fded915392d66a2f400e363a2c08f0"
    },
    "1e81fb31f13d84f87293153c24701c8ed6a316981bb16694388d27d04579d2a4": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.IAM\n        )\n    ),\n    xray_enabled=True\n)\n\ndemo_table = dynamodb.Table(self, \"DemoTable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\ndemo_dS = api.add_dynamo_db_data_source(\"demoDataSource\", demo_table)\n\n# Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemo_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemos\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_list()\n)\n\n# Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemo_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemo\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_put_item(\n        appsync.PrimaryKey.partition(\"id\").auto(),\n        appsync.Values.projecting(\"input\")),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_item()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.IAM\n        }\n    },\n    XrayEnabled = true\n});\n\nTable demoTable = new Table(this, \"DemoTable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nDynamoDbDataSource demoDS = api.AddDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemos\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbScanTable(),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultList()\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemo\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbPutItem(PrimaryKey.Partition(\"id\").Auto(), Values.Projecting(\"input\")),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultItem()\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.IAM)\n                        .build())\n                .build())\n        .xrayEnabled(true)\n        .build();\n\nTable demoTable = Table.Builder.create(this, \"DemoTable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nDynamoDbDataSource demoDS = api.addDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemos\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbScanTable())\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultList())\n        .build());\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemo\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbPutItem(PrimaryKey.partition(\"id\").auto(), Values.projecting(\"input\")))\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultItem())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_IAM,\n\t\t},\n\t},\n\txrayEnabled: jsii.Boolean(true),\n})\n\ndemoTable := dynamodb.NewTable(this, jsii.String(\"DemoTable\"), &tableProps{\n\tpartitionKey: &attribute{\n\t\tname: jsii.String(\"id\"),\n\t\ttype: dynamodb.attributeType_STRING,\n\t},\n})\n\ndemoDS := api.addDynamoDbDataSource(jsii.String(\"demoDataSource\"), demoTable)\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemos\"),\n\trequestMappingTemplate: appsync.mappingTemplate.dynamoDbScanTable(),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultList(),\n})\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemo\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.dynamoDbPutItem(appsync.primaryKey.partition(jsii.String(\"id\")).auto(), appsync.values.projecting(jsii.String(\"input\"))),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultItem(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.AttributeValues"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AttributeValues",
        "@aws-cdk/aws-appsync.AuthorizationConfig",
        "@aws-cdk/aws-appsync.AuthorizationMode",
        "@aws-cdk/aws-appsync.AuthorizationType",
        "@aws-cdk/aws-appsync.AuthorizationType#IAM",
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.DynamoDbDataSource",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addDynamoDbDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbPutItem",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbResultItem",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbResultList",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbScanTable",
        "@aws-cdk/aws-appsync.PartitionKeyStep#auto",
        "@aws-cdk/aws-appsync.PrimaryKey",
        "@aws-cdk/aws-appsync.PrimaryKey#partition",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#fromAsset",
        "@aws-cdk/aws-appsync.Values",
        "@aws-cdk/aws-appsync.Values#projecting",
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 62,
        "104": 2,
        "106": 1,
        "193": 7,
        "194": 25,
        "196": 12,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 17
      },
      "fqnsFingerprint": "7337b04f973e903939f6c7bb1b76cfa36d36eb00ba694263e7981c95b7b1a65b"
    },
    "f81b12d4c51b39019fec39f85cc306a760fe2d1ebacaddadf8c28ea8e24b07af": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\n# assign: appsync.Assign\n\nattribute_values_step = appsync.AttributeValuesStep(\"attr\", \"container\", [assign])",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nAssign assign;\n\nAttributeValuesStep attributeValuesStep = new AttributeValuesStep(\"attr\", \"container\", new [] { assign });",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nAssign assign;\n\nAttributeValuesStep attributeValuesStep = new AttributeValuesStep(\"attr\", \"container\", List.of(assign));",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nvar assign assign\n\nattributeValuesStep := appsync.NewAttributeValuesStep(jsii.String(\"attr\"), jsii.String(\"container\"), []assign{\n\tassign,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const assign: appsync.Assign;\nconst attributeValuesStep = new appsync.AttributeValuesStep('attr', 'container', [assign]);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.AttributeValuesStep"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AttributeValuesStep"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const assign: appsync.Assign;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst attributeValuesStep = new appsync.AttributeValuesStep('attr', 'container', [assign]);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "bf7f4d0acb3bd22e5c32139ca5a96a3a174def662a4d9c567ab7a24af2643f82"
    },
    "6adbb24aec4f8c0adc9d9b60d069cc0b7573d9b0e1a6d3a6663a917463d5d8bc": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.IAM\n        )\n    ),\n    xray_enabled=True\n)\n\ndemo_table = dynamodb.Table(self, \"DemoTable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\ndemo_dS = api.add_dynamo_db_data_source(\"demoDataSource\", demo_table)\n\n# Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemo_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemos\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_list()\n)\n\n# Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemo_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemo\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_put_item(\n        appsync.PrimaryKey.partition(\"id\").auto(),\n        appsync.Values.projecting(\"input\")),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_item()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.IAM\n        }\n    },\n    XrayEnabled = true\n});\n\nTable demoTable = new Table(this, \"DemoTable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nDynamoDbDataSource demoDS = api.AddDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemos\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbScanTable(),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultList()\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemo\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbPutItem(PrimaryKey.Partition(\"id\").Auto(), Values.Projecting(\"input\")),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultItem()\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.IAM)\n                        .build())\n                .build())\n        .xrayEnabled(true)\n        .build();\n\nTable demoTable = Table.Builder.create(this, \"DemoTable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nDynamoDbDataSource demoDS = api.addDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemos\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbScanTable())\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultList())\n        .build());\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemo\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbPutItem(PrimaryKey.partition(\"id\").auto(), Values.projecting(\"input\")))\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultItem())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_IAM,\n\t\t},\n\t},\n\txrayEnabled: jsii.Boolean(true),\n})\n\ndemoTable := dynamodb.NewTable(this, jsii.String(\"DemoTable\"), &tableProps{\n\tpartitionKey: &attribute{\n\t\tname: jsii.String(\"id\"),\n\t\ttype: dynamodb.attributeType_STRING,\n\t},\n})\n\ndemoDS := api.addDynamoDbDataSource(jsii.String(\"demoDataSource\"), demoTable)\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemos\"),\n\trequestMappingTemplate: appsync.mappingTemplate.dynamoDbScanTable(),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultList(),\n})\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemo\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.dynamoDbPutItem(appsync.primaryKey.partition(jsii.String(\"id\")).auto(), appsync.values.projecting(jsii.String(\"input\"))),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultItem(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.AuthorizationConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AttributeValues",
        "@aws-cdk/aws-appsync.AuthorizationConfig",
        "@aws-cdk/aws-appsync.AuthorizationMode",
        "@aws-cdk/aws-appsync.AuthorizationType",
        "@aws-cdk/aws-appsync.AuthorizationType#IAM",
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.DynamoDbDataSource",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addDynamoDbDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbPutItem",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbResultItem",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbResultList",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbScanTable",
        "@aws-cdk/aws-appsync.PartitionKeyStep#auto",
        "@aws-cdk/aws-appsync.PrimaryKey",
        "@aws-cdk/aws-appsync.PrimaryKey#partition",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#fromAsset",
        "@aws-cdk/aws-appsync.Values",
        "@aws-cdk/aws-appsync.Values#projecting",
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 62,
        "104": 2,
        "106": 1,
        "193": 7,
        "194": 25,
        "196": 12,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 17
      },
      "fqnsFingerprint": "7337b04f973e903939f6c7bb1b76cfa36d36eb00ba694263e7981c95b7b1a65b"
    },
    "615a6d24b9c08e07de97a3e2eb5b77fc44da9760f175a26b6e99a094897a6dff": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.IAM\n        )\n    ),\n    xray_enabled=True\n)\n\ndemo_table = dynamodb.Table(self, \"DemoTable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\ndemo_dS = api.add_dynamo_db_data_source(\"demoDataSource\", demo_table)\n\n# Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemo_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemos\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_list()\n)\n\n# Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemo_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemo\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_put_item(\n        appsync.PrimaryKey.partition(\"id\").auto(),\n        appsync.Values.projecting(\"input\")),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_item()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.IAM\n        }\n    },\n    XrayEnabled = true\n});\n\nTable demoTable = new Table(this, \"DemoTable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nDynamoDbDataSource demoDS = api.AddDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemos\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbScanTable(),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultList()\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemo\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbPutItem(PrimaryKey.Partition(\"id\").Auto(), Values.Projecting(\"input\")),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultItem()\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.IAM)\n                        .build())\n                .build())\n        .xrayEnabled(true)\n        .build();\n\nTable demoTable = Table.Builder.create(this, \"DemoTable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nDynamoDbDataSource demoDS = api.addDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemos\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbScanTable())\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultList())\n        .build());\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemo\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbPutItem(PrimaryKey.partition(\"id\").auto(), Values.projecting(\"input\")))\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultItem())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_IAM,\n\t\t},\n\t},\n\txrayEnabled: jsii.Boolean(true),\n})\n\ndemoTable := dynamodb.NewTable(this, jsii.String(\"DemoTable\"), &tableProps{\n\tpartitionKey: &attribute{\n\t\tname: jsii.String(\"id\"),\n\t\ttype: dynamodb.attributeType_STRING,\n\t},\n})\n\ndemoDS := api.addDynamoDbDataSource(jsii.String(\"demoDataSource\"), demoTable)\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemos\"),\n\trequestMappingTemplate: appsync.mappingTemplate.dynamoDbScanTable(),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultList(),\n})\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemo\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.dynamoDbPutItem(appsync.primaryKey.partition(jsii.String(\"id\")).auto(), appsync.values.projecting(jsii.String(\"input\"))),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultItem(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.AuthorizationMode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AttributeValues",
        "@aws-cdk/aws-appsync.AuthorizationConfig",
        "@aws-cdk/aws-appsync.AuthorizationMode",
        "@aws-cdk/aws-appsync.AuthorizationType",
        "@aws-cdk/aws-appsync.AuthorizationType#IAM",
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.DynamoDbDataSource",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addDynamoDbDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbPutItem",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbResultItem",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbResultList",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbScanTable",
        "@aws-cdk/aws-appsync.PartitionKeyStep#auto",
        "@aws-cdk/aws-appsync.PrimaryKey",
        "@aws-cdk/aws-appsync.PrimaryKey#partition",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#fromAsset",
        "@aws-cdk/aws-appsync.Values",
        "@aws-cdk/aws-appsync.Values#projecting",
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 62,
        "104": 2,
        "106": 1,
        "193": 7,
        "194": 25,
        "196": 12,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 17
      },
      "fqnsFingerprint": "7337b04f973e903939f6c7bb1b76cfa36d36eb00ba694263e7981c95b7b1a65b"
    },
    "f88041cec316bbe48b4dcba96f342637ff752b17ef94ab7b381a7f362d695983": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.IAM\n        )\n    ),\n    xray_enabled=True\n)\n\ndemo_table = dynamodb.Table(self, \"DemoTable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\ndemo_dS = api.add_dynamo_db_data_source(\"demoDataSource\", demo_table)\n\n# Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemo_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemos\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_list()\n)\n\n# Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemo_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemo\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_put_item(\n        appsync.PrimaryKey.partition(\"id\").auto(),\n        appsync.Values.projecting(\"input\")),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_item()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.IAM\n        }\n    },\n    XrayEnabled = true\n});\n\nTable demoTable = new Table(this, \"DemoTable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nDynamoDbDataSource demoDS = api.AddDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemos\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbScanTable(),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultList()\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemo\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbPutItem(PrimaryKey.Partition(\"id\").Auto(), Values.Projecting(\"input\")),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultItem()\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.IAM)\n                        .build())\n                .build())\n        .xrayEnabled(true)\n        .build();\n\nTable demoTable = Table.Builder.create(this, \"DemoTable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nDynamoDbDataSource demoDS = api.addDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemos\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbScanTable())\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultList())\n        .build());\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemo\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbPutItem(PrimaryKey.partition(\"id\").auto(), Values.projecting(\"input\")))\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultItem())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_IAM,\n\t\t},\n\t},\n\txrayEnabled: jsii.Boolean(true),\n})\n\ndemoTable := dynamodb.NewTable(this, jsii.String(\"DemoTable\"), &tableProps{\n\tpartitionKey: &attribute{\n\t\tname: jsii.String(\"id\"),\n\t\ttype: dynamodb.attributeType_STRING,\n\t},\n})\n\ndemoDS := api.addDynamoDbDataSource(jsii.String(\"demoDataSource\"), demoTable)\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemos\"),\n\trequestMappingTemplate: appsync.mappingTemplate.dynamoDbScanTable(),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultList(),\n})\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemo\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.dynamoDbPutItem(appsync.primaryKey.partition(jsii.String(\"id\")).auto(), appsync.values.projecting(jsii.String(\"input\"))),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultItem(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.AuthorizationType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AttributeValues",
        "@aws-cdk/aws-appsync.AuthorizationConfig",
        "@aws-cdk/aws-appsync.AuthorizationMode",
        "@aws-cdk/aws-appsync.AuthorizationType",
        "@aws-cdk/aws-appsync.AuthorizationType#IAM",
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.DynamoDbDataSource",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addDynamoDbDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbPutItem",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbResultItem",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbResultList",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbScanTable",
        "@aws-cdk/aws-appsync.PartitionKeyStep#auto",
        "@aws-cdk/aws-appsync.PrimaryKey",
        "@aws-cdk/aws-appsync.PrimaryKey#partition",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#fromAsset",
        "@aws-cdk/aws-appsync.Values",
        "@aws-cdk/aws-appsync.Values#projecting",
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 62,
        "104": 2,
        "106": 1,
        "193": 7,
        "194": 25,
        "196": 12,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 17
      },
      "fqnsFingerprint": "7337b04f973e903939f6c7bb1b76cfa36d36eb00ba694263e7981c95b7b1a65b"
    },
    "d79a1f95803ca1cc7186cd72dddbaab8db51de27a0d251f840ff8d9f76b0bdf3": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"api\",\n    name=\"api\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\"))\n)\n\nhttp_ds = api.add_http_data_source(\"ds\", \"https://states.amazonaws.com\",\n    name=\"httpDsWithStepF\",\n    description=\"from appsync to StepFunctions Workflow\",\n    authorization_config=appsync.AwsIamConfig(\n        signing_region=\"us-east-1\",\n        signing_service_name=\"states\"\n    )\n)\n\nhttp_ds.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"callStepFunction\",\n    request_mapping_template=appsync.MappingTemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.MappingTemplate.from_file(\"response.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"api\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\"))\n});\n\nHttpDataSource httpDs = api.AddHttpDataSource(\"ds\", \"https://states.amazonaws.com\", new HttpDataSourceOptions {\n    Name = \"httpDsWithStepF\",\n    Description = \"from appsync to StepFunctions Workflow\",\n    AuthorizationConfig = new AwsIamConfig {\n        SigningRegion = \"us-east-1\",\n        SigningServiceName = \"states\"\n    }\n});\n\nhttpDs.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"callStepFunction\",\n    RequestMappingTemplate = MappingTemplate.FromFile(\"request.vtl\"),\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"response.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"api\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .build();\n\nHttpDataSource httpDs = api.addHttpDataSource(\"ds\", \"https://states.amazonaws.com\", HttpDataSourceOptions.builder()\n        .name(\"httpDsWithStepF\")\n        .description(\"from appsync to StepFunctions Workflow\")\n        .authorizationConfig(AwsIamConfig.builder()\n                .signingRegion(\"us-east-1\")\n                .signingServiceName(\"states\")\n                .build())\n        .build());\n\nhttpDs.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"callStepFunction\")\n        .requestMappingTemplate(MappingTemplate.fromFile(\"request.vtl\"))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"response.vtl\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"api\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n})\n\nhttpDs := api.addHttpDataSource(jsii.String(\"ds\"), jsii.String(\"https://states.amazonaws.com\"), &httpDataSourceOptions{\n\tname: jsii.String(\"httpDsWithStepF\"),\n\tdescription: jsii.String(\"from appsync to StepFunctions Workflow\"),\n\tauthorizationConfig: &awsIamConfig{\n\t\tsigningRegion: jsii.String(\"us-east-1\"),\n\t\tsigningServiceName: jsii.String(\"states\"),\n\t},\n})\n\nhttpDs.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"callStepFunction\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"request.vtl\")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"response.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.AwsIamConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AwsIamConfig",
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addHttpDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.HttpDataSource",
        "@aws-cdk/aws-appsync.HttpDataSourceOptions",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromFile",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#fromAsset",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 31,
        "104": 1,
        "193": 4,
        "194": 10,
        "196": 6,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 11
      },
      "fqnsFingerprint": "91db1b76303125e8cb2d4cc9df0aa26846d1f1ac73592f12fa98caa15d77f537"
    },
    "d7b8ee87f59610da305bb034a53e5a5ede60c6daf171f63d72083a31e003aebd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\nimport aws_cdk.aws_iam as iam\n\n# graphql_api: appsync.GraphqlApi\n# role: iam.Role\n\nbacked_data_source_props = appsync.BackedDataSourceProps(\n    api=graphql_api,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\",\n    service_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\nusing Amazon.CDK.AWS.IAM;\n\nGraphqlApi graphqlApi;\nRole role;\n\nBackedDataSourceProps backedDataSourceProps = new BackedDataSourceProps {\n    Api = graphqlApi,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\",\n    ServiceRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\nimport software.amazon.awscdk.services.iam.*;\n\nGraphqlApi graphqlApi;\nRole role;\n\nBackedDataSourceProps backedDataSourceProps = BackedDataSourceProps.builder()\n        .api(graphqlApi)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .serviceRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar graphqlApi graphqlApi\nvar role role\n\nbackedDataSourceProps := &backedDataSourceProps{\n\tapi: graphqlApi,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\tserviceRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\nconst backedDataSourceProps: appsync.BackedDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.BackedDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BackedDataSourceProps",
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst backedDataSourceProps: appsync.BackedDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "a7ea62d9c296fc50433149ffbbdfc1822fd5053a7898993fe84b47f3e7f86df9"
    },
    "c2b3b320bb0788283aa351dd0378b9502d4b3e922b40f621ff0ee5c4240955d0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\n# mapping_template: appsync.MappingTemplate\n\nbase_appsync_function_props = appsync.BaseAppsyncFunctionProps(\n    name=\"name\",\n\n    # the properties below are optional\n    description=\"description\",\n    request_mapping_template=mapping_template,\n    response_mapping_template=mapping_template\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nMappingTemplate mappingTemplate;\n\nBaseAppsyncFunctionProps baseAppsyncFunctionProps = new BaseAppsyncFunctionProps {\n    Name = \"name\",\n\n    // the properties below are optional\n    Description = \"description\",\n    RequestMappingTemplate = mappingTemplate,\n    ResponseMappingTemplate = mappingTemplate\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nMappingTemplate mappingTemplate;\n\nBaseAppsyncFunctionProps baseAppsyncFunctionProps = BaseAppsyncFunctionProps.builder()\n        .name(\"name\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .requestMappingTemplate(mappingTemplate)\n        .responseMappingTemplate(mappingTemplate)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nvar mappingTemplate mappingTemplate\n\nbaseAppsyncFunctionProps := &baseAppsyncFunctionProps{\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\trequestMappingTemplate: mappingTemplate,\n\tresponseMappingTemplate: mappingTemplate,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const mappingTemplate: appsync.MappingTemplate;\nconst baseAppsyncFunctionProps: appsync.BaseAppsyncFunctionProps = {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  requestMappingTemplate: mappingTemplate,\n  responseMappingTemplate: mappingTemplate,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.BaseAppsyncFunctionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseAppsyncFunctionProps",
        "@aws-cdk/aws-appsync.MappingTemplate"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const mappingTemplate: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst baseAppsyncFunctionProps: appsync.BaseAppsyncFunctionProps = {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  requestMappingTemplate: mappingTemplate,\n  responseMappingTemplate: mappingTemplate,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "b2846679cfc07dcf9d738fbf03f5a30f4b3ddf79c92c4775d61f801a6d63c630"
    },
    "22bbb2d3d8cdc5a2129cbb5d2f89b132c8419d51ce9c816e1f56747e17969cd0": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\ninfo = appsync.ObjectType(\"Info\",\n    definition={\n        \"node\": appsync.ResolvableField(\n            return_type=appsync.GraphqlType.string(),\n            args={\n                \"id\": appsync.GraphqlType.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = new ObjectType(\"Info\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"node\", new ResolvableField(new ResolvableFieldOptions {\n            ReturnType = GraphqlType.String(),\n            Args = new Dictionary<string, GraphqlType> {\n                { \"id\", GraphqlType.String() }\n            },\n            DataSource = api.AddNoneDataSource(\"none\"),\n            RequestMappingTemplate = dummyRequest,\n            ResponseMappingTemplate = dummyResponse\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = ObjectType.Builder.create(\"Info\")\n        .definition(Map.of(\n                \"node\", ResolvableField.Builder.create()\n                        .returnType(GraphqlType.string())\n                        .args(Map.of(\n                                \"id\", GraphqlType.string()))\n                        .dataSource(api.addNoneDataSource(\"none\"))\n                        .requestMappingTemplate(dummyRequest)\n                        .responseMappingTemplate(dummyResponse)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\ninfo := appsync.NewObjectType(jsii.String(\"Info\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"node\": appsync.NewResolvableField(&ResolvableFieldOptions{\n\t\t\t\"returnType\": appsync.GraphqlType.string(),\n\t\t\t\"args\": map[string]GraphqlType{\n\t\t\t\t\"id\": appsync.GraphqlType.string(),\n\t\t\t},\n\t\t\t\"dataSource\": api.addNoneDataSource(jsii.String(\"none\")),\n\t\t\t\"requestMappingTemplate\": dummyRequest,\n\t\t\t\"responseMappingTemplate\": dummyResponse,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.BaseDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions",
        "@aws-cdk/aws-appsync.ResolvableField",
        "@aws-cdk/aws-appsync.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "b66927a734456c6c5c3ab476f8678b9f5dc4efe72c5850d3fa339e1e5bf4418d"
    },
    "1f8ce8d9b45034af68bc7ca5f4ceba3fe3bc5e1a7fead8f93270bd1ae41e8161": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\n# graphql_api: appsync.GraphqlApi\n\nbase_data_source_props = appsync.BaseDataSourceProps(\n    api=graphql_api,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nGraphqlApi graphqlApi;\n\nBaseDataSourceProps baseDataSourceProps = new BaseDataSourceProps {\n    Api = graphqlApi,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nGraphqlApi graphqlApi;\n\nBaseDataSourceProps baseDataSourceProps = BaseDataSourceProps.builder()\n        .api(graphqlApi)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nvar graphqlApi graphqlApi\n\nbaseDataSourceProps := &baseDataSourceProps{\n\tapi: graphqlApi,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\nconst baseDataSourceProps: appsync.BaseDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.BaseDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSourceProps",
        "@aws-cdk/aws-appsync.IGraphqlApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst baseDataSourceProps: appsync.BaseDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "9fc9ee834448ad2868c494f4d9408a3f4686b1e48edd47ac9d6c689d9e47db8f"
    },
    "5951a09c10036a94721337dcbcc7c56d2662bee0cfdf0078d240d7f12656c95b": {
      "translations": {
        "python": {
          "source": "# Build a data source for AppSync to access the database.\n# api: appsync.GraphqlApi\n# Create username and password secret for DB Cluster\nsecret = rds.DatabaseSecret(self, \"AuroraSecret\",\n    username=\"clusteradmin\"\n)\n\n# The VPC to place the cluster in\nvpc = ec2.Vpc(self, \"AuroraVpc\")\n\n# Create the serverless cluster, provide all values needed to customise the database.\ncluster = rds.ServerlessCluster(self, \"AuroraCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,\n    credentials={\"username\": \"clusteradmin\"},\n    cluster_identifier=\"db-endpoint-test\",\n    default_database_name=\"demos\"\n)\nrds_dS = api.add_rds_data_source(\"rds\", cluster, secret, \"demos\")\n\n# Set up a resolver for an RDS query.\nrds_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemosRds\",\n    request_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"SELECT * FROM demos\"\n            ]\n          }\n          \"\"\"),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n            $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n          \"\"\")\n)\n\n# Set up a resolver for an RDS mutation.\nrds_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemoRds\",\n    request_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"INSERT INTO demos VALUES (:id, :version)\",\n              \"SELECT * WHERE id = :id\"\n            ],\n            \"variableMap\": {\n              \":id\": $util.toJson($util.autoId()),\n              \":version\": $util.toJson($ctx.args.version)\n            }\n          }\n          \"\"\"),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n            $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n          \"\"\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Build a data source for AppSync to access the database.\nGraphqlApi api;\n// Create username and password secret for DB Cluster\nDatabaseSecret secret = new DatabaseSecret(this, \"AuroraSecret\", new DatabaseSecretProps {\n    Username = \"clusteradmin\"\n});\n\n// The VPC to place the cluster in\nVpc vpc = new Vpc(this, \"AuroraVpc\");\n\n// Create the serverless cluster, provide all values needed to customise the database.\nServerlessCluster cluster = new ServerlessCluster(this, \"AuroraCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,\n    Credentials = new Dictionary<string, string> { { \"username\", \"clusteradmin\" } },\n    ClusterIdentifier = \"db-endpoint-test\",\n    DefaultDatabaseName = \"demos\"\n});\nRdsDataSource rdsDS = api.AddRdsDataSource(\"rds\", cluster, secret, \"demos\");\n\n// Set up a resolver for an RDS query.\nrdsDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemosRds\",\n    RequestMappingTemplate = MappingTemplate.FromString(@\"\n      {\n        \"\"version\"\": \"\"2018-05-29\"\",\n        \"\"statements\"\": [\n          \"\"SELECT * FROM demos\"\"\n        ]\n      }\n      \"),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"\n        $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n      \")\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemoRds\",\n    RequestMappingTemplate = MappingTemplate.FromString(@\"\n      {\n        \"\"version\"\": \"\"2018-05-29\"\",\n        \"\"statements\"\": [\n          \"\"INSERT INTO demos VALUES (:id, :version)\"\",\n          \"\"SELECT * WHERE id = :id\"\"\n        ],\n        \"\"variableMap\"\": {\n          \"\":id\"\": $util.toJson($util.autoId()),\n          \"\":version\"\": $util.toJson($ctx.args.version)\n        }\n      }\n      \"),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"\n        $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n      \")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Build a data source for AppSync to access the database.\nGraphqlApi api;\n// Create username and password secret for DB Cluster\nDatabaseSecret secret = DatabaseSecret.Builder.create(this, \"AuroraSecret\")\n        .username(\"clusteradmin\")\n        .build();\n\n// The VPC to place the cluster in\nVpc vpc = new Vpc(this, \"AuroraVpc\");\n\n// Create the serverless cluster, provide all values needed to customise the database.\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AuroraCluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc)\n        .credentials(Map.of(\"username\", \"clusteradmin\"))\n        .clusterIdentifier(\"db-endpoint-test\")\n        .defaultDatabaseName(\"demos\")\n        .build();\nRdsDataSource rdsDS = api.addRdsDataSource(\"rds\", cluster, secret, \"demos\");\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemosRds\")\n        .requestMappingTemplate(MappingTemplate.fromString(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"SELECT * FROM demos\\\"\\n    ]\\n  }\\n  \"))\n        .responseMappingTemplate(MappingTemplate.fromString(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\\n  \"))\n        .build());\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemoRds\")\n        .requestMappingTemplate(MappingTemplate.fromString(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"INSERT INTO demos VALUES (:id, :version)\\\",\\n      \\\"SELECT * WHERE id = :id\\\"\\n    ],\\n    \\\"variableMap\\\": {\\n      \\\":id\\\": $util.toJson($util.autoId()),\\n      \\\":version\\\": $util.toJson($ctx.args.version)\\n    }\\n  }\\n  \"))\n        .responseMappingTemplate(MappingTemplate.fromString(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\\n  \"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Build a data source for AppSync to access the database.\nvar api graphqlApi\n// Create username and password secret for DB Cluster\nsecret := rds.NewDatabaseSecret(this, jsii.String(\"AuroraSecret\"), &databaseSecretProps{\n\tusername: jsii.String(\"clusteradmin\"),\n})\n\n// The VPC to place the cluster in\nvpc := ec2.NewVpc(this, jsii.String(\"AuroraVpc\"))\n\n// Create the serverless cluster, provide all values needed to customise the database.\ncluster := rds.NewServerlessCluster(this, jsii.String(\"AuroraCluster\"), &serverlessClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA_MYSQL(),\n\tvpc: vpc,\n\tcredentials: map[string]*string{\n\t\t\"username\": jsii.String(\"clusteradmin\"),\n\t},\n\tclusterIdentifier: jsii.String(\"db-endpoint-test\"),\n\tdefaultDatabaseName: jsii.String(\"demos\"),\n})\nrdsDS := api.addRdsDataSource(jsii.String(\"rds\"), cluster, secret, jsii.String(\"demos\"))\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemosRds\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromString(jsii.String(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"SELECT * FROM demos\\\"\\n    ]\\n  }\\n  \")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\\n  \")),\n})\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemoRds\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"INSERT INTO demos VALUES (:id, :version)\\\",\\n      \\\"SELECT * WHERE id = :id\\\"\\n    ],\\n    \\\"variableMap\\\": {\\n      \\\":id\\\": $util.toJson($util.autoId()),\\n      \\\":version\\\": $util.toJson($ctx.args.version)\\n    }\\n  }\\n  \")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\\n  \")),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.BaseResolverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addRdsDataSource",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromString",
        "@aws-cdk/aws-appsync.RdsDataSource",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_MYSQL",
        "@aws-cdk/aws-rds.DatabaseSecret",
        "@aws-cdk/aws-rds.DatabaseSecretProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "14": 4,
        "75": 51,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 16,
        "196": 7,
        "197": 3,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 14,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "d13bf58a96ffbb559f3f6e27c0c741533600f613919a428520d372a8183f2ecc"
    },
    "6065cec40376e695e4c68062cb628d5930692ecbad0de05b232f468d8ac6d2cf": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\"\n)\ndemo = appsync.ObjectType(\"Demo\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True),\n        \"version\": appsync.GraphqlType.string(is_required=True)\n    }\n)\n\napi.add_type(demo)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\"\n});\nObjectType demo = new ObjectType(\"Demo\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) },\n        { \"version\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});\n\napi.AddType(demo);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .build();\nObjectType demo = ObjectType.Builder.create(\"Demo\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build()),\n                \"version\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();\n\napi.addType(demo);",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n})\ndemo := appsync.NewObjectType(jsii.String(\"Demo\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t\t\"version\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})\n\napi.addType(demo)",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.BaseTypeOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseTypeOptions",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApi#addType",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.IIntermediateType",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 21,
        "104": 1,
        "106": 2,
        "193": 5,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6
      },
      "fqnsFingerprint": "900ac626cc8b2b534910339096e8f7951e2f106a22f5fcd1862b4ddc72792485"
    },
    "eedd7b7003c347175b2959d510051868bd8da111e722542e56bb7d27ea20ef08": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\nimport aws_cdk.core as cdk\n\ncaching_config = appsync.CachingConfig(\n    ttl=cdk.Duration.minutes(30),\n\n    # the properties below are optional\n    caching_keys=[\"cachingKeys\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\nusing Amazon.CDK;\nCachingConfig cachingConfig = new CachingConfig {\n    Ttl = Duration.Minutes(30),\n\n    // the properties below are optional\n    CachingKeys = new [] { \"cachingKeys\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\nimport software.amazon.awscdk.core.*;\n\nCachingConfig cachingConfig = CachingConfig.builder()\n        .ttl(Duration.minutes(30))\n\n        // the properties below are optional\n        .cachingKeys(List.of(\"cachingKeys\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\ncachingConfig := &cachingConfig{\n\tttl: cdk.duration.minutes(jsii.Number(30)),\n\n\t// the properties below are optional\n\tcachingKeys: []*string{\n\t\tjsii.String(\"cachingKeys\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as cdk from '@aws-cdk/core';\nconst cachingConfig: appsync.CachingConfig = {\n  ttl: cdk.Duration.minutes(30),\n\n  // the properties below are optional\n  cachingKeys: ['cachingKeys'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CachingConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CachingConfig",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cachingConfig: appsync.CachingConfig = {\n  ttl: cdk.Duration.minutes(30),\n\n  // the properties below are optional\n  cachingKeys: ['cachingKeys'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "42bd698ef929fce427a437802bf84556822d7f873247aa57f6037a03bed8f3d6"
    },
    "9155bf8c894eb96f9381d473a4244f30c4c42341fde07dac88105083e07d6018": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_api_cache = appsync.CfnApiCache(self, \"MyCfnApiCache\",\n    api_caching_behavior=\"apiCachingBehavior\",\n    api_id=\"apiId\",\n    ttl=123,\n    type=\"type\",\n\n    # the properties below are optional\n    at_rest_encryption_enabled=False,\n    transit_encryption_enabled=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnApiCache cfnApiCache = new CfnApiCache(this, \"MyCfnApiCache\", new CfnApiCacheProps {\n    ApiCachingBehavior = \"apiCachingBehavior\",\n    ApiId = \"apiId\",\n    Ttl = 123,\n    Type = \"type\",\n\n    // the properties below are optional\n    AtRestEncryptionEnabled = false,\n    TransitEncryptionEnabled = false\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnApiCache cfnApiCache = CfnApiCache.Builder.create(this, \"MyCfnApiCache\")\n        .apiCachingBehavior(\"apiCachingBehavior\")\n        .apiId(\"apiId\")\n        .ttl(123)\n        .type(\"type\")\n\n        // the properties below are optional\n        .atRestEncryptionEnabled(false)\n        .transitEncryptionEnabled(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnApiCache := appsync.NewCfnApiCache(this, jsii.String(\"MyCfnApiCache\"), &cfnApiCacheProps{\n\tapiCachingBehavior: jsii.String(\"apiCachingBehavior\"),\n\tapiId: jsii.String(\"apiId\"),\n\tttl: jsii.Number(123),\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tatRestEncryptionEnabled: jsii.Boolean(false),\n\ttransitEncryptionEnabled: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnApiCache = new appsync.CfnApiCache(this, 'MyCfnApiCache', {\n  apiCachingBehavior: 'apiCachingBehavior',\n  apiId: 'apiId',\n  ttl: 123,\n  type: 'type',\n\n  // the properties below are optional\n  atRestEncryptionEnabled: false,\n  transitEncryptionEnabled: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnApiCache"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnApiCache",
        "@aws-cdk/aws-appsync.CfnApiCacheProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiCache = new appsync.CfnApiCache(this, 'MyCfnApiCache', {\n  apiCachingBehavior: 'apiCachingBehavior',\n  apiId: 'apiId',\n  ttl: 123,\n  type: 'type',\n\n  // the properties below are optional\n  atRestEncryptionEnabled: false,\n  transitEncryptionEnabled: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 10,
        "91": 2,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "56923c9f5f49e8514045c6552af5ec3f388f927348912c75f9ef10859031befd"
    },
    "240ab4c2475e34619ee8e4cbee45aa65ee25f1af69b8e27f0eb3a29de06609d9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_api_cache_props = appsync.CfnApiCacheProps(\n    api_caching_behavior=\"apiCachingBehavior\",\n    api_id=\"apiId\",\n    ttl=123,\n    type=\"type\",\n\n    # the properties below are optional\n    at_rest_encryption_enabled=False,\n    transit_encryption_enabled=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnApiCacheProps cfnApiCacheProps = new CfnApiCacheProps {\n    ApiCachingBehavior = \"apiCachingBehavior\",\n    ApiId = \"apiId\",\n    Ttl = 123,\n    Type = \"type\",\n\n    // the properties below are optional\n    AtRestEncryptionEnabled = false,\n    TransitEncryptionEnabled = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnApiCacheProps cfnApiCacheProps = CfnApiCacheProps.builder()\n        .apiCachingBehavior(\"apiCachingBehavior\")\n        .apiId(\"apiId\")\n        .ttl(123)\n        .type(\"type\")\n\n        // the properties below are optional\n        .atRestEncryptionEnabled(false)\n        .transitEncryptionEnabled(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnApiCacheProps := &cfnApiCacheProps{\n\tapiCachingBehavior: jsii.String(\"apiCachingBehavior\"),\n\tapiId: jsii.String(\"apiId\"),\n\tttl: jsii.Number(123),\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tatRestEncryptionEnabled: jsii.Boolean(false),\n\ttransitEncryptionEnabled: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnApiCacheProps: appsync.CfnApiCacheProps = {\n  apiCachingBehavior: 'apiCachingBehavior',\n  apiId: 'apiId',\n  ttl: 123,\n  type: 'type',\n\n  // the properties below are optional\n  atRestEncryptionEnabled: false,\n  transitEncryptionEnabled: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnApiCacheProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnApiCacheProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiCacheProps: appsync.CfnApiCacheProps = {\n  apiCachingBehavior: 'apiCachingBehavior',\n  apiId: 'apiId',\n  ttl: 123,\n  type: 'type',\n\n  // the properties below are optional\n  atRestEncryptionEnabled: false,\n  transitEncryptionEnabled: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 10,
        "91": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "32f6c1fac6f0f5631a37b01ff224c5178b62d3fa2e5e759f625a28ec423d42d2"
    },
    "04b466eed0c654d0967d4ae80765bcbdee91cc2be564cc72e45af16df0bce4df": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_api_key = appsync.CfnApiKey(self, \"MyCfnApiKey\",\n    api_id=\"apiId\",\n\n    # the properties below are optional\n    api_key_id=\"apiKeyId\",\n    description=\"description\",\n    expires=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnApiKey cfnApiKey = new CfnApiKey(this, \"MyCfnApiKey\", new CfnApiKeyProps {\n    ApiId = \"apiId\",\n\n    // the properties below are optional\n    ApiKeyId = \"apiKeyId\",\n    Description = \"description\",\n    Expires = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnApiKey cfnApiKey = CfnApiKey.Builder.create(this, \"MyCfnApiKey\")\n        .apiId(\"apiId\")\n\n        // the properties below are optional\n        .apiKeyId(\"apiKeyId\")\n        .description(\"description\")\n        .expires(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnApiKey := appsync.NewCfnApiKey(this, jsii.String(\"MyCfnApiKey\"), &cfnApiKeyProps{\n\tapiId: jsii.String(\"apiId\"),\n\n\t// the properties below are optional\n\tapiKeyId: jsii.String(\"apiKeyId\"),\n\tdescription: jsii.String(\"description\"),\n\texpires: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnApiKey = new appsync.CfnApiKey(this, 'MyCfnApiKey', {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  apiKeyId: 'apiKeyId',\n  description: 'description',\n  expires: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnApiKey"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnApiKey",
        "@aws-cdk/aws-appsync.CfnApiKeyProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiKey = new appsync.CfnApiKey(this, 'MyCfnApiKey', {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  apiKeyId: 'apiKeyId',\n  description: 'description',\n  expires: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "cae483db7ba2014d16480c94b81eb41a5b6cead8ca311ca8c290fd77e12d2623"
    },
    "8d7ac87643e667aa78e534c17ab40e4de0651a6cab7920b75fa4076641156966": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_api_key_props = appsync.CfnApiKeyProps(\n    api_id=\"apiId\",\n\n    # the properties below are optional\n    api_key_id=\"apiKeyId\",\n    description=\"description\",\n    expires=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnApiKeyProps cfnApiKeyProps = new CfnApiKeyProps {\n    ApiId = \"apiId\",\n\n    // the properties below are optional\n    ApiKeyId = \"apiKeyId\",\n    Description = \"description\",\n    Expires = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnApiKeyProps cfnApiKeyProps = CfnApiKeyProps.builder()\n        .apiId(\"apiId\")\n\n        // the properties below are optional\n        .apiKeyId(\"apiKeyId\")\n        .description(\"description\")\n        .expires(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnApiKeyProps := &cfnApiKeyProps{\n\tapiId: jsii.String(\"apiId\"),\n\n\t// the properties below are optional\n\tapiKeyId: jsii.String(\"apiKeyId\"),\n\tdescription: jsii.String(\"description\"),\n\texpires: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnApiKeyProps: appsync.CfnApiKeyProps = {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  apiKeyId: 'apiKeyId',\n  description: 'description',\n  expires: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnApiKeyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnApiKeyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiKeyProps: appsync.CfnApiKeyProps = {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  apiKeyId: 'apiKeyId',\n  description: 'description',\n  expires: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "72902fe51dfa6a67c65a64064cd072d251fdca074683203a072ea3d7f722b660"
    },
    "cf3f3ab457d0f648db9eb80b5d13cab5cea63458cbef2a7f53008281abccee25": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_data_source = appsync.CfnDataSource(self, \"MyCfnDataSource\",\n    api_id=\"apiId\",\n    name=\"name\",\n    type=\"type\",\n\n    # the properties below are optional\n    description=\"description\",\n    dynamo_db_config=appsync.CfnDataSource.DynamoDBConfigProperty(\n        aws_region=\"awsRegion\",\n        table_name=\"tableName\",\n\n        # the properties below are optional\n        delta_sync_config=appsync.CfnDataSource.DeltaSyncConfigProperty(\n            base_table_ttl=\"baseTableTtl\",\n            delta_sync_table_name=\"deltaSyncTableName\",\n            delta_sync_table_ttl=\"deltaSyncTableTtl\"\n        ),\n        use_caller_credentials=False,\n        versioned=False\n    ),\n    elasticsearch_config=appsync.CfnDataSource.ElasticsearchConfigProperty(\n        aws_region=\"awsRegion\",\n        endpoint=\"endpoint\"\n    ),\n    http_config=appsync.CfnDataSource.HttpConfigProperty(\n        endpoint=\"endpoint\",\n\n        # the properties below are optional\n        authorization_config=appsync.CfnDataSource.AuthorizationConfigProperty(\n            authorization_type=\"authorizationType\",\n\n            # the properties below are optional\n            aws_iam_config=appsync.CfnDataSource.AwsIamConfigProperty(\n                signing_region=\"signingRegion\",\n                signing_service_name=\"signingServiceName\"\n            )\n        )\n    ),\n    lambda_config=appsync.CfnDataSource.LambdaConfigProperty(\n        lambda_function_arn=\"lambdaFunctionArn\"\n    ),\n    open_search_service_config=appsync.CfnDataSource.OpenSearchServiceConfigProperty(\n        aws_region=\"awsRegion\",\n        endpoint=\"endpoint\"\n    ),\n    relational_database_config=appsync.CfnDataSource.RelationalDatabaseConfigProperty(\n        relational_database_source_type=\"relationalDatabaseSourceType\",\n\n        # the properties below are optional\n        rds_http_endpoint_config=appsync.CfnDataSource.RdsHttpEndpointConfigProperty(\n            aws_region=\"awsRegion\",\n            aws_secret_store_arn=\"awsSecretStoreArn\",\n            db_cluster_identifier=\"dbClusterIdentifier\",\n\n            # the properties below are optional\n            database_name=\"databaseName\",\n            schema=\"schema\"\n        )\n    ),\n    service_role_arn=\"serviceRoleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnDataSource cfnDataSource = new CfnDataSource(this, \"MyCfnDataSource\", new CfnDataSourceProps {\n    ApiId = \"apiId\",\n    Name = \"name\",\n    Type = \"type\",\n\n    // the properties below are optional\n    Description = \"description\",\n    DynamoDbConfig = new DynamoDBConfigProperty {\n        AwsRegion = \"awsRegion\",\n        TableName = \"tableName\",\n\n        // the properties below are optional\n        DeltaSyncConfig = new DeltaSyncConfigProperty {\n            BaseTableTtl = \"baseTableTtl\",\n            DeltaSyncTableName = \"deltaSyncTableName\",\n            DeltaSyncTableTtl = \"deltaSyncTableTtl\"\n        },\n        UseCallerCredentials = false,\n        Versioned = false\n    },\n    ElasticsearchConfig = new ElasticsearchConfigProperty {\n        AwsRegion = \"awsRegion\",\n        Endpoint = \"endpoint\"\n    },\n    HttpConfig = new HttpConfigProperty {\n        Endpoint = \"endpoint\",\n\n        // the properties below are optional\n        AuthorizationConfig = new AuthorizationConfigProperty {\n            AuthorizationType = \"authorizationType\",\n\n            // the properties below are optional\n            AwsIamConfig = new AwsIamConfigProperty {\n                SigningRegion = \"signingRegion\",\n                SigningServiceName = \"signingServiceName\"\n            }\n        }\n    },\n    LambdaConfig = new LambdaConfigProperty {\n        LambdaFunctionArn = \"lambdaFunctionArn\"\n    },\n    OpenSearchServiceConfig = new OpenSearchServiceConfigProperty {\n        AwsRegion = \"awsRegion\",\n        Endpoint = \"endpoint\"\n    },\n    RelationalDatabaseConfig = new RelationalDatabaseConfigProperty {\n        RelationalDatabaseSourceType = \"relationalDatabaseSourceType\",\n\n        // the properties below are optional\n        RdsHttpEndpointConfig = new RdsHttpEndpointConfigProperty {\n            AwsRegion = \"awsRegion\",\n            AwsSecretStoreArn = \"awsSecretStoreArn\",\n            DbClusterIdentifier = \"dbClusterIdentifier\",\n\n            // the properties below are optional\n            DatabaseName = \"databaseName\",\n            Schema = \"schema\"\n        }\n    },\n    ServiceRoleArn = \"serviceRoleArn\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnDataSource cfnDataSource = CfnDataSource.Builder.create(this, \"MyCfnDataSource\")\n        .apiId(\"apiId\")\n        .name(\"name\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .dynamoDbConfig(DynamoDBConfigProperty.builder()\n                .awsRegion(\"awsRegion\")\n                .tableName(\"tableName\")\n\n                // the properties below are optional\n                .deltaSyncConfig(DeltaSyncConfigProperty.builder()\n                        .baseTableTtl(\"baseTableTtl\")\n                        .deltaSyncTableName(\"deltaSyncTableName\")\n                        .deltaSyncTableTtl(\"deltaSyncTableTtl\")\n                        .build())\n                .useCallerCredentials(false)\n                .versioned(false)\n                .build())\n        .elasticsearchConfig(ElasticsearchConfigProperty.builder()\n                .awsRegion(\"awsRegion\")\n                .endpoint(\"endpoint\")\n                .build())\n        .httpConfig(HttpConfigProperty.builder()\n                .endpoint(\"endpoint\")\n\n                // the properties below are optional\n                .authorizationConfig(AuthorizationConfigProperty.builder()\n                        .authorizationType(\"authorizationType\")\n\n                        // the properties below are optional\n                        .awsIamConfig(AwsIamConfigProperty.builder()\n                                .signingRegion(\"signingRegion\")\n                                .signingServiceName(\"signingServiceName\")\n                                .build())\n                        .build())\n                .build())\n        .lambdaConfig(LambdaConfigProperty.builder()\n                .lambdaFunctionArn(\"lambdaFunctionArn\")\n                .build())\n        .openSearchServiceConfig(OpenSearchServiceConfigProperty.builder()\n                .awsRegion(\"awsRegion\")\n                .endpoint(\"endpoint\")\n                .build())\n        .relationalDatabaseConfig(RelationalDatabaseConfigProperty.builder()\n                .relationalDatabaseSourceType(\"relationalDatabaseSourceType\")\n\n                // the properties below are optional\n                .rdsHttpEndpointConfig(RdsHttpEndpointConfigProperty.builder()\n                        .awsRegion(\"awsRegion\")\n                        .awsSecretStoreArn(\"awsSecretStoreArn\")\n                        .dbClusterIdentifier(\"dbClusterIdentifier\")\n\n                        // the properties below are optional\n                        .databaseName(\"databaseName\")\n                        .schema(\"schema\")\n                        .build())\n                .build())\n        .serviceRoleArn(\"serviceRoleArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnDataSource := appsync.NewCfnDataSource(this, jsii.String(\"MyCfnDataSource\"), &cfnDataSourceProps{\n\tapiId: jsii.String(\"apiId\"),\n\tname: jsii.String(\"name\"),\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tdynamoDbConfig: &dynamoDBConfigProperty{\n\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\ttableName: jsii.String(\"tableName\"),\n\n\t\t// the properties below are optional\n\t\tdeltaSyncConfig: &deltaSyncConfigProperty{\n\t\t\tbaseTableTtl: jsii.String(\"baseTableTtl\"),\n\t\t\tdeltaSyncTableName: jsii.String(\"deltaSyncTableName\"),\n\t\t\tdeltaSyncTableTtl: jsii.String(\"deltaSyncTableTtl\"),\n\t\t},\n\t\tuseCallerCredentials: jsii.Boolean(false),\n\t\tversioned: jsii.Boolean(false),\n\t},\n\telasticsearchConfig: &elasticsearchConfigProperty{\n\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\tendpoint: jsii.String(\"endpoint\"),\n\t},\n\thttpConfig: &httpConfigProperty{\n\t\tendpoint: jsii.String(\"endpoint\"),\n\n\t\t// the properties below are optional\n\t\tauthorizationConfig: &authorizationConfigProperty{\n\t\t\tauthorizationType: jsii.String(\"authorizationType\"),\n\n\t\t\t// the properties below are optional\n\t\t\tawsIamConfig: &awsIamConfigProperty{\n\t\t\t\tsigningRegion: jsii.String(\"signingRegion\"),\n\t\t\t\tsigningServiceName: jsii.String(\"signingServiceName\"),\n\t\t\t},\n\t\t},\n\t},\n\tlambdaConfig: &lambdaConfigProperty{\n\t\tlambdaFunctionArn: jsii.String(\"lambdaFunctionArn\"),\n\t},\n\topenSearchServiceConfig: &openSearchServiceConfigProperty{\n\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\tendpoint: jsii.String(\"endpoint\"),\n\t},\n\trelationalDatabaseConfig: &relationalDatabaseConfigProperty{\n\t\trelationalDatabaseSourceType: jsii.String(\"relationalDatabaseSourceType\"),\n\n\t\t// the properties below are optional\n\t\trdsHttpEndpointConfig: &rdsHttpEndpointConfigProperty{\n\t\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\t\tawsSecretStoreArn: jsii.String(\"awsSecretStoreArn\"),\n\t\t\tdbClusterIdentifier: jsii.String(\"dbClusterIdentifier\"),\n\n\t\t\t// the properties below are optional\n\t\t\tdatabaseName: jsii.String(\"databaseName\"),\n\t\t\tschema: jsii.String(\"schema\"),\n\t\t},\n\t},\n\tserviceRoleArn: jsii.String(\"serviceRoleArn\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnDataSource = new appsync.CfnDataSource(this, 'MyCfnDataSource', {\n  apiId: 'apiId',\n  name: 'name',\n  type: 'type',\n\n  // the properties below are optional\n  description: 'description',\n  dynamoDbConfig: {\n    awsRegion: 'awsRegion',\n    tableName: 'tableName',\n\n    // the properties below are optional\n    deltaSyncConfig: {\n      baseTableTtl: 'baseTableTtl',\n      deltaSyncTableName: 'deltaSyncTableName',\n      deltaSyncTableTtl: 'deltaSyncTableTtl',\n    },\n    useCallerCredentials: false,\n    versioned: false,\n  },\n  elasticsearchConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  httpConfig: {\n    endpoint: 'endpoint',\n\n    // the properties below are optional\n    authorizationConfig: {\n      authorizationType: 'authorizationType',\n\n      // the properties below are optional\n      awsIamConfig: {\n        signingRegion: 'signingRegion',\n        signingServiceName: 'signingServiceName',\n      },\n    },\n  },\n  lambdaConfig: {\n    lambdaFunctionArn: 'lambdaFunctionArn',\n  },\n  openSearchServiceConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  relationalDatabaseConfig: {\n    relationalDatabaseSourceType: 'relationalDatabaseSourceType',\n\n    // the properties below are optional\n    rdsHttpEndpointConfig: {\n      awsRegion: 'awsRegion',\n      awsSecretStoreArn: 'awsSecretStoreArn',\n      dbClusterIdentifier: 'dbClusterIdentifier',\n\n      // the properties below are optional\n      databaseName: 'databaseName',\n      schema: 'schema',\n    },\n  },\n  serviceRoleArn: 'serviceRoleArn',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnDataSource",
        "@aws-cdk/aws-appsync.CfnDataSourceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDataSource = new appsync.CfnDataSource(this, 'MyCfnDataSource', {\n  apiId: 'apiId',\n  name: 'name',\n  type: 'type',\n\n  // the properties below are optional\n  description: 'description',\n  dynamoDbConfig: {\n    awsRegion: 'awsRegion',\n    tableName: 'tableName',\n\n    // the properties below are optional\n    deltaSyncConfig: {\n      baseTableTtl: 'baseTableTtl',\n      deltaSyncTableName: 'deltaSyncTableName',\n      deltaSyncTableTtl: 'deltaSyncTableTtl',\n    },\n    useCallerCredentials: false,\n    versioned: false,\n  },\n  elasticsearchConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  httpConfig: {\n    endpoint: 'endpoint',\n\n    // the properties below are optional\n    authorizationConfig: {\n      authorizationType: 'authorizationType',\n\n      // the properties below are optional\n      awsIamConfig: {\n        signingRegion: 'signingRegion',\n        signingServiceName: 'signingServiceName',\n      },\n    },\n  },\n  lambdaConfig: {\n    lambdaFunctionArn: 'lambdaFunctionArn',\n  },\n  openSearchServiceConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  relationalDatabaseConfig: {\n    relationalDatabaseSourceType: 'relationalDatabaseSourceType',\n\n    // the properties below are optional\n    rdsHttpEndpointConfig: {\n      awsRegion: 'awsRegion',\n      awsSecretStoreArn: 'awsSecretStoreArn',\n      dbClusterIdentifier: 'dbClusterIdentifier',\n\n      // the properties below are optional\n      databaseName: 'databaseName',\n      schema: 'schema',\n    },\n  },\n  serviceRoleArn: 'serviceRoleArn',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 27,
        "75": 41,
        "91": 2,
        "104": 1,
        "193": 11,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 37,
        "290": 1
      },
      "fqnsFingerprint": "40764ccdf20c08d8b290921513d4d1bbae47d943f5b4fbd04217ea64db9e05e3"
    },
    "b5a56660f9d925e2efdf5b15bebc20d4140a437af3da5d29e886c8131f672912": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nauthorization_config_property = appsync.CfnDataSource.AuthorizationConfigProperty(\n    authorization_type=\"authorizationType\",\n\n    # the properties below are optional\n    aws_iam_config=appsync.CfnDataSource.AwsIamConfigProperty(\n        signing_region=\"signingRegion\",\n        signing_service_name=\"signingServiceName\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nAuthorizationConfigProperty authorizationConfigProperty = new AuthorizationConfigProperty {\n    AuthorizationType = \"authorizationType\",\n\n    // the properties below are optional\n    AwsIamConfig = new AwsIamConfigProperty {\n        SigningRegion = \"signingRegion\",\n        SigningServiceName = \"signingServiceName\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nAuthorizationConfigProperty authorizationConfigProperty = AuthorizationConfigProperty.builder()\n        .authorizationType(\"authorizationType\")\n\n        // the properties below are optional\n        .awsIamConfig(AwsIamConfigProperty.builder()\n                .signingRegion(\"signingRegion\")\n                .signingServiceName(\"signingServiceName\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nauthorizationConfigProperty := &authorizationConfigProperty{\n\tauthorizationType: jsii.String(\"authorizationType\"),\n\n\t// the properties below are optional\n\tawsIamConfig: &awsIamConfigProperty{\n\t\tsigningRegion: jsii.String(\"signingRegion\"),\n\t\tsigningServiceName: jsii.String(\"signingServiceName\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst authorizationConfigProperty: appsync.CfnDataSource.AuthorizationConfigProperty = {\n  authorizationType: 'authorizationType',\n\n  // the properties below are optional\n  awsIamConfig: {\n    signingRegion: 'signingRegion',\n    signingServiceName: 'signingServiceName',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnDataSource.AuthorizationConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnDataSource.AuthorizationConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst authorizationConfigProperty: appsync.CfnDataSource.AuthorizationConfigProperty = {\n  authorizationType: 'authorizationType',\n\n  // the properties below are optional\n  awsIamConfig: {\n    signingRegion: 'signingRegion',\n    signingServiceName: 'signingServiceName',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "621ebc2ef2d45c4872f7f3dccf5447880e086f56ed5499cc3c14a034810a01d7"
    },
    "0424c6c4ef28a6fa8fec1f88a02b74a722f9f8ae2318b307d33450a79c955257": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\naws_iam_config_property = appsync.CfnDataSource.AwsIamConfigProperty(\n    signing_region=\"signingRegion\",\n    signing_service_name=\"signingServiceName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nAwsIamConfigProperty awsIamConfigProperty = new AwsIamConfigProperty {\n    SigningRegion = \"signingRegion\",\n    SigningServiceName = \"signingServiceName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nAwsIamConfigProperty awsIamConfigProperty = AwsIamConfigProperty.builder()\n        .signingRegion(\"signingRegion\")\n        .signingServiceName(\"signingServiceName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nawsIamConfigProperty := &awsIamConfigProperty{\n\tsigningRegion: jsii.String(\"signingRegion\"),\n\tsigningServiceName: jsii.String(\"signingServiceName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst awsIamConfigProperty: appsync.CfnDataSource.AwsIamConfigProperty = {\n  signingRegion: 'signingRegion',\n  signingServiceName: 'signingServiceName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnDataSource.AwsIamConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnDataSource.AwsIamConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst awsIamConfigProperty: appsync.CfnDataSource.AwsIamConfigProperty = {\n  signingRegion: 'signingRegion',\n  signingServiceName: 'signingServiceName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "adc29330139db123c761170b112767c6b2b1535956c436a6eaac828b3230b7db"
    },
    "3d7d86e1b06e5ffc1978dab7c28314d6bebe0bc89449e1b48fe1e22acc768ab3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ndelta_sync_config_property = appsync.CfnDataSource.DeltaSyncConfigProperty(\n    base_table_ttl=\"baseTableTtl\",\n    delta_sync_table_name=\"deltaSyncTableName\",\n    delta_sync_table_ttl=\"deltaSyncTableTtl\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nDeltaSyncConfigProperty deltaSyncConfigProperty = new DeltaSyncConfigProperty {\n    BaseTableTtl = \"baseTableTtl\",\n    DeltaSyncTableName = \"deltaSyncTableName\",\n    DeltaSyncTableTtl = \"deltaSyncTableTtl\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nDeltaSyncConfigProperty deltaSyncConfigProperty = DeltaSyncConfigProperty.builder()\n        .baseTableTtl(\"baseTableTtl\")\n        .deltaSyncTableName(\"deltaSyncTableName\")\n        .deltaSyncTableTtl(\"deltaSyncTableTtl\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ndeltaSyncConfigProperty := &deltaSyncConfigProperty{\n\tbaseTableTtl: jsii.String(\"baseTableTtl\"),\n\tdeltaSyncTableName: jsii.String(\"deltaSyncTableName\"),\n\tdeltaSyncTableTtl: jsii.String(\"deltaSyncTableTtl\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst deltaSyncConfigProperty: appsync.CfnDataSource.DeltaSyncConfigProperty = {\n  baseTableTtl: 'baseTableTtl',\n  deltaSyncTableName: 'deltaSyncTableName',\n  deltaSyncTableTtl: 'deltaSyncTableTtl',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnDataSource.DeltaSyncConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnDataSource.DeltaSyncConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deltaSyncConfigProperty: appsync.CfnDataSource.DeltaSyncConfigProperty = {\n  baseTableTtl: 'baseTableTtl',\n  deltaSyncTableName: 'deltaSyncTableName',\n  deltaSyncTableTtl: 'deltaSyncTableTtl',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b3bfa97ada56a65db7c217e041ecb8e38642daf4098b6d19e76560c587b8b07c"
    },
    "a5748611de9701a0c48525c86dda98629d494127a217e2d0563eec3397f5526d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ndynamo_dBConfig_property = appsync.CfnDataSource.DynamoDBConfigProperty(\n    aws_region=\"awsRegion\",\n    table_name=\"tableName\",\n\n    # the properties below are optional\n    delta_sync_config=appsync.CfnDataSource.DeltaSyncConfigProperty(\n        base_table_ttl=\"baseTableTtl\",\n        delta_sync_table_name=\"deltaSyncTableName\",\n        delta_sync_table_ttl=\"deltaSyncTableTtl\"\n    ),\n    use_caller_credentials=False,\n    versioned=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nDynamoDBConfigProperty dynamoDBConfigProperty = new DynamoDBConfigProperty {\n    AwsRegion = \"awsRegion\",\n    TableName = \"tableName\",\n\n    // the properties below are optional\n    DeltaSyncConfig = new DeltaSyncConfigProperty {\n        BaseTableTtl = \"baseTableTtl\",\n        DeltaSyncTableName = \"deltaSyncTableName\",\n        DeltaSyncTableTtl = \"deltaSyncTableTtl\"\n    },\n    UseCallerCredentials = false,\n    Versioned = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nDynamoDBConfigProperty dynamoDBConfigProperty = DynamoDBConfigProperty.builder()\n        .awsRegion(\"awsRegion\")\n        .tableName(\"tableName\")\n\n        // the properties below are optional\n        .deltaSyncConfig(DeltaSyncConfigProperty.builder()\n                .baseTableTtl(\"baseTableTtl\")\n                .deltaSyncTableName(\"deltaSyncTableName\")\n                .deltaSyncTableTtl(\"deltaSyncTableTtl\")\n                .build())\n        .useCallerCredentials(false)\n        .versioned(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ndynamoDBConfigProperty := &dynamoDBConfigProperty{\n\tawsRegion: jsii.String(\"awsRegion\"),\n\ttableName: jsii.String(\"tableName\"),\n\n\t// the properties below are optional\n\tdeltaSyncConfig: &deltaSyncConfigProperty{\n\t\tbaseTableTtl: jsii.String(\"baseTableTtl\"),\n\t\tdeltaSyncTableName: jsii.String(\"deltaSyncTableName\"),\n\t\tdeltaSyncTableTtl: jsii.String(\"deltaSyncTableTtl\"),\n\t},\n\tuseCallerCredentials: jsii.Boolean(false),\n\tversioned: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst dynamoDBConfigProperty: appsync.CfnDataSource.DynamoDBConfigProperty = {\n  awsRegion: 'awsRegion',\n  tableName: 'tableName',\n\n  // the properties below are optional\n  deltaSyncConfig: {\n    baseTableTtl: 'baseTableTtl',\n    deltaSyncTableName: 'deltaSyncTableName',\n    deltaSyncTableTtl: 'deltaSyncTableTtl',\n  },\n  useCallerCredentials: false,\n  versioned: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnDataSource.DynamoDBConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnDataSource.DynamoDBConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dynamoDBConfigProperty: appsync.CfnDataSource.DynamoDBConfigProperty = {\n  awsRegion: 'awsRegion',\n  tableName: 'tableName',\n\n  // the properties below are optional\n  deltaSyncConfig: {\n    baseTableTtl: 'baseTableTtl',\n    deltaSyncTableName: 'deltaSyncTableName',\n    deltaSyncTableTtl: 'deltaSyncTableTtl',\n  },\n  useCallerCredentials: false,\n  versioned: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "ef1dbfc3dd1bdcdc7055cb432d99b769fadc6c66e033f09ff9846264b964f3e1"
    },
    "95f0b00f7bda8223abfb1e28731e2fd98ee0abe61f5eb84ea22837c95b8aabd9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nelasticsearch_config_property = appsync.CfnDataSource.ElasticsearchConfigProperty(\n    aws_region=\"awsRegion\",\n    endpoint=\"endpoint\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nElasticsearchConfigProperty elasticsearchConfigProperty = new ElasticsearchConfigProperty {\n    AwsRegion = \"awsRegion\",\n    Endpoint = \"endpoint\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nElasticsearchConfigProperty elasticsearchConfigProperty = ElasticsearchConfigProperty.builder()\n        .awsRegion(\"awsRegion\")\n        .endpoint(\"endpoint\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nelasticsearchConfigProperty := &elasticsearchConfigProperty{\n\tawsRegion: jsii.String(\"awsRegion\"),\n\tendpoint: jsii.String(\"endpoint\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst elasticsearchConfigProperty: appsync.CfnDataSource.ElasticsearchConfigProperty = {\n  awsRegion: 'awsRegion',\n  endpoint: 'endpoint',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnDataSource.ElasticsearchConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnDataSource.ElasticsearchConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst elasticsearchConfigProperty: appsync.CfnDataSource.ElasticsearchConfigProperty = {\n  awsRegion: 'awsRegion',\n  endpoint: 'endpoint',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "0e7bcdc0645f868be8141e36b7c96908c02ab4af71366c62dc45bd742dc6719a"
    },
    "d8f81a50ffac551f604bb78557716939bba9c7d85d7ff5013f4a2adbbc5710d7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nhttp_config_property = appsync.CfnDataSource.HttpConfigProperty(\n    endpoint=\"endpoint\",\n\n    # the properties below are optional\n    authorization_config=appsync.CfnDataSource.AuthorizationConfigProperty(\n        authorization_type=\"authorizationType\",\n\n        # the properties below are optional\n        aws_iam_config=appsync.CfnDataSource.AwsIamConfigProperty(\n            signing_region=\"signingRegion\",\n            signing_service_name=\"signingServiceName\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nHttpConfigProperty httpConfigProperty = new HttpConfigProperty {\n    Endpoint = \"endpoint\",\n\n    // the properties below are optional\n    AuthorizationConfig = new AuthorizationConfigProperty {\n        AuthorizationType = \"authorizationType\",\n\n        // the properties below are optional\n        AwsIamConfig = new AwsIamConfigProperty {\n            SigningRegion = \"signingRegion\",\n            SigningServiceName = \"signingServiceName\"\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nHttpConfigProperty httpConfigProperty = HttpConfigProperty.builder()\n        .endpoint(\"endpoint\")\n\n        // the properties below are optional\n        .authorizationConfig(AuthorizationConfigProperty.builder()\n                .authorizationType(\"authorizationType\")\n\n                // the properties below are optional\n                .awsIamConfig(AwsIamConfigProperty.builder()\n                        .signingRegion(\"signingRegion\")\n                        .signingServiceName(\"signingServiceName\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nhttpConfigProperty := &httpConfigProperty{\n\tendpoint: jsii.String(\"endpoint\"),\n\n\t// the properties below are optional\n\tauthorizationConfig: &authorizationConfigProperty{\n\t\tauthorizationType: jsii.String(\"authorizationType\"),\n\n\t\t// the properties below are optional\n\t\tawsIamConfig: &awsIamConfigProperty{\n\t\t\tsigningRegion: jsii.String(\"signingRegion\"),\n\t\t\tsigningServiceName: jsii.String(\"signingServiceName\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst httpConfigProperty: appsync.CfnDataSource.HttpConfigProperty = {\n  endpoint: 'endpoint',\n\n  // the properties below are optional\n  authorizationConfig: {\n    authorizationType: 'authorizationType',\n\n    // the properties below are optional\n    awsIamConfig: {\n      signingRegion: 'signingRegion',\n      signingServiceName: 'signingServiceName',\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnDataSource.HttpConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnDataSource.HttpConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpConfigProperty: appsync.CfnDataSource.HttpConfigProperty = {\n  endpoint: 'endpoint',\n\n  // the properties below are optional\n  authorizationConfig: {\n    authorizationType: 'authorizationType',\n\n    // the properties below are optional\n    awsIamConfig: {\n      signingRegion: 'signingRegion',\n      signingServiceName: 'signingServiceName',\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 11,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "aff83958337ea021e9c5a746f8581fe58e96e5b76f488f333af9ac3b01533713"
    },
    "3fb353564547598465237c95d5f1b86000ee5eb348f2edf53fcfbadd752ba7ed": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nlambda_config_property = appsync.CfnDataSource.LambdaConfigProperty(\n    lambda_function_arn=\"lambdaFunctionArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nLambdaConfigProperty lambdaConfigProperty = new LambdaConfigProperty {\n    LambdaFunctionArn = \"lambdaFunctionArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nLambdaConfigProperty lambdaConfigProperty = LambdaConfigProperty.builder()\n        .lambdaFunctionArn(\"lambdaFunctionArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nlambdaConfigProperty := &lambdaConfigProperty{\n\tlambdaFunctionArn: jsii.String(\"lambdaFunctionArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst lambdaConfigProperty: appsync.CfnDataSource.LambdaConfigProperty = {\n  lambdaFunctionArn: 'lambdaFunctionArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnDataSource.LambdaConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnDataSource.LambdaConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lambdaConfigProperty: appsync.CfnDataSource.LambdaConfigProperty = {\n  lambdaFunctionArn: 'lambdaFunctionArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "6054570626390898851e3a08d4616cfe28c75a8d10eaf7fd518f56c6384ac34d"
    },
    "96ed4f57866f2c328213fbeed696fb6e932af3647ed871a0421513615390ba55": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nopen_search_service_config_property = appsync.CfnDataSource.OpenSearchServiceConfigProperty(\n    aws_region=\"awsRegion\",\n    endpoint=\"endpoint\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nOpenSearchServiceConfigProperty openSearchServiceConfigProperty = new OpenSearchServiceConfigProperty {\n    AwsRegion = \"awsRegion\",\n    Endpoint = \"endpoint\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nOpenSearchServiceConfigProperty openSearchServiceConfigProperty = OpenSearchServiceConfigProperty.builder()\n        .awsRegion(\"awsRegion\")\n        .endpoint(\"endpoint\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nopenSearchServiceConfigProperty := &openSearchServiceConfigProperty{\n\tawsRegion: jsii.String(\"awsRegion\"),\n\tendpoint: jsii.String(\"endpoint\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst openSearchServiceConfigProperty: appsync.CfnDataSource.OpenSearchServiceConfigProperty = {\n  awsRegion: 'awsRegion',\n  endpoint: 'endpoint',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnDataSource.OpenSearchServiceConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnDataSource.OpenSearchServiceConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst openSearchServiceConfigProperty: appsync.CfnDataSource.OpenSearchServiceConfigProperty = {\n  awsRegion: 'awsRegion',\n  endpoint: 'endpoint',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c493118071b23886dbdeb56e3e9596285b2279067d797419db5f6a280a38dd7f"
    },
    "1e96f6a2108578a9f617ed121e826f596e575b9b9154a96b017310709a135629": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nrds_http_endpoint_config_property = appsync.CfnDataSource.RdsHttpEndpointConfigProperty(\n    aws_region=\"awsRegion\",\n    aws_secret_store_arn=\"awsSecretStoreArn\",\n    db_cluster_identifier=\"dbClusterIdentifier\",\n\n    # the properties below are optional\n    database_name=\"databaseName\",\n    schema=\"schema\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nRdsHttpEndpointConfigProperty rdsHttpEndpointConfigProperty = new RdsHttpEndpointConfigProperty {\n    AwsRegion = \"awsRegion\",\n    AwsSecretStoreArn = \"awsSecretStoreArn\",\n    DbClusterIdentifier = \"dbClusterIdentifier\",\n\n    // the properties below are optional\n    DatabaseName = \"databaseName\",\n    Schema = \"schema\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nRdsHttpEndpointConfigProperty rdsHttpEndpointConfigProperty = RdsHttpEndpointConfigProperty.builder()\n        .awsRegion(\"awsRegion\")\n        .awsSecretStoreArn(\"awsSecretStoreArn\")\n        .dbClusterIdentifier(\"dbClusterIdentifier\")\n\n        // the properties below are optional\n        .databaseName(\"databaseName\")\n        .schema(\"schema\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nrdsHttpEndpointConfigProperty := &rdsHttpEndpointConfigProperty{\n\tawsRegion: jsii.String(\"awsRegion\"),\n\tawsSecretStoreArn: jsii.String(\"awsSecretStoreArn\"),\n\tdbClusterIdentifier: jsii.String(\"dbClusterIdentifier\"),\n\n\t// the properties below are optional\n\tdatabaseName: jsii.String(\"databaseName\"),\n\tschema: jsii.String(\"schema\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst rdsHttpEndpointConfigProperty: appsync.CfnDataSource.RdsHttpEndpointConfigProperty = {\n  awsRegion: 'awsRegion',\n  awsSecretStoreArn: 'awsSecretStoreArn',\n  dbClusterIdentifier: 'dbClusterIdentifier',\n\n  // the properties below are optional\n  databaseName: 'databaseName',\n  schema: 'schema',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnDataSource.RdsHttpEndpointConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnDataSource.RdsHttpEndpointConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst rdsHttpEndpointConfigProperty: appsync.CfnDataSource.RdsHttpEndpointConfigProperty = {\n  awsRegion: 'awsRegion',\n  awsSecretStoreArn: 'awsSecretStoreArn',\n  dbClusterIdentifier: 'dbClusterIdentifier',\n\n  // the properties below are optional\n  databaseName: 'databaseName',\n  schema: 'schema',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "897ff0af50c5e29f25242891d6d5016fa9f0bd47423965ef7a3b1249c10ed160"
    },
    "04be4c61a207daddbb19ca68b7ec25360d39a9b69741c6347ab5b7313e2e4315": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nrelational_database_config_property = appsync.CfnDataSource.RelationalDatabaseConfigProperty(\n    relational_database_source_type=\"relationalDatabaseSourceType\",\n\n    # the properties below are optional\n    rds_http_endpoint_config=appsync.CfnDataSource.RdsHttpEndpointConfigProperty(\n        aws_region=\"awsRegion\",\n        aws_secret_store_arn=\"awsSecretStoreArn\",\n        db_cluster_identifier=\"dbClusterIdentifier\",\n\n        # the properties below are optional\n        database_name=\"databaseName\",\n        schema=\"schema\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nRelationalDatabaseConfigProperty relationalDatabaseConfigProperty = new RelationalDatabaseConfigProperty {\n    RelationalDatabaseSourceType = \"relationalDatabaseSourceType\",\n\n    // the properties below are optional\n    RdsHttpEndpointConfig = new RdsHttpEndpointConfigProperty {\n        AwsRegion = \"awsRegion\",\n        AwsSecretStoreArn = \"awsSecretStoreArn\",\n        DbClusterIdentifier = \"dbClusterIdentifier\",\n\n        // the properties below are optional\n        DatabaseName = \"databaseName\",\n        Schema = \"schema\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nRelationalDatabaseConfigProperty relationalDatabaseConfigProperty = RelationalDatabaseConfigProperty.builder()\n        .relationalDatabaseSourceType(\"relationalDatabaseSourceType\")\n\n        // the properties below are optional\n        .rdsHttpEndpointConfig(RdsHttpEndpointConfigProperty.builder()\n                .awsRegion(\"awsRegion\")\n                .awsSecretStoreArn(\"awsSecretStoreArn\")\n                .dbClusterIdentifier(\"dbClusterIdentifier\")\n\n                // the properties below are optional\n                .databaseName(\"databaseName\")\n                .schema(\"schema\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nrelationalDatabaseConfigProperty := &relationalDatabaseConfigProperty{\n\trelationalDatabaseSourceType: jsii.String(\"relationalDatabaseSourceType\"),\n\n\t// the properties below are optional\n\trdsHttpEndpointConfig: &rdsHttpEndpointConfigProperty{\n\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\tawsSecretStoreArn: jsii.String(\"awsSecretStoreArn\"),\n\t\tdbClusterIdentifier: jsii.String(\"dbClusterIdentifier\"),\n\n\t\t// the properties below are optional\n\t\tdatabaseName: jsii.String(\"databaseName\"),\n\t\tschema: jsii.String(\"schema\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst relationalDatabaseConfigProperty: appsync.CfnDataSource.RelationalDatabaseConfigProperty = {\n  relationalDatabaseSourceType: 'relationalDatabaseSourceType',\n\n  // the properties below are optional\n  rdsHttpEndpointConfig: {\n    awsRegion: 'awsRegion',\n    awsSecretStoreArn: 'awsSecretStoreArn',\n    dbClusterIdentifier: 'dbClusterIdentifier',\n\n    // the properties below are optional\n    databaseName: 'databaseName',\n    schema: 'schema',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnDataSource.RelationalDatabaseConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnDataSource.RelationalDatabaseConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst relationalDatabaseConfigProperty: appsync.CfnDataSource.RelationalDatabaseConfigProperty = {\n  relationalDatabaseSourceType: 'relationalDatabaseSourceType',\n\n  // the properties below are optional\n  rdsHttpEndpointConfig: {\n    awsRegion: 'awsRegion',\n    awsSecretStoreArn: 'awsSecretStoreArn',\n    dbClusterIdentifier: 'dbClusterIdentifier',\n\n    // the properties below are optional\n    databaseName: 'databaseName',\n    schema: 'schema',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 12,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "e0846a7b7ebfe3405f2b45c32526d574b9aa61ac7ec1a7f123689785ec60e505"
    },
    "d2d33efe00fd40c30fcccdc5deddb52003835362e57418ce8984af014ff759e2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_data_source_props = appsync.CfnDataSourceProps(\n    api_id=\"apiId\",\n    name=\"name\",\n    type=\"type\",\n\n    # the properties below are optional\n    description=\"description\",\n    dynamo_db_config=appsync.CfnDataSource.DynamoDBConfigProperty(\n        aws_region=\"awsRegion\",\n        table_name=\"tableName\",\n\n        # the properties below are optional\n        delta_sync_config=appsync.CfnDataSource.DeltaSyncConfigProperty(\n            base_table_ttl=\"baseTableTtl\",\n            delta_sync_table_name=\"deltaSyncTableName\",\n            delta_sync_table_ttl=\"deltaSyncTableTtl\"\n        ),\n        use_caller_credentials=False,\n        versioned=False\n    ),\n    elasticsearch_config=appsync.CfnDataSource.ElasticsearchConfigProperty(\n        aws_region=\"awsRegion\",\n        endpoint=\"endpoint\"\n    ),\n    http_config=appsync.CfnDataSource.HttpConfigProperty(\n        endpoint=\"endpoint\",\n\n        # the properties below are optional\n        authorization_config=appsync.CfnDataSource.AuthorizationConfigProperty(\n            authorization_type=\"authorizationType\",\n\n            # the properties below are optional\n            aws_iam_config=appsync.CfnDataSource.AwsIamConfigProperty(\n                signing_region=\"signingRegion\",\n                signing_service_name=\"signingServiceName\"\n            )\n        )\n    ),\n    lambda_config=appsync.CfnDataSource.LambdaConfigProperty(\n        lambda_function_arn=\"lambdaFunctionArn\"\n    ),\n    open_search_service_config=appsync.CfnDataSource.OpenSearchServiceConfigProperty(\n        aws_region=\"awsRegion\",\n        endpoint=\"endpoint\"\n    ),\n    relational_database_config=appsync.CfnDataSource.RelationalDatabaseConfigProperty(\n        relational_database_source_type=\"relationalDatabaseSourceType\",\n\n        # the properties below are optional\n        rds_http_endpoint_config=appsync.CfnDataSource.RdsHttpEndpointConfigProperty(\n            aws_region=\"awsRegion\",\n            aws_secret_store_arn=\"awsSecretStoreArn\",\n            db_cluster_identifier=\"dbClusterIdentifier\",\n\n            # the properties below are optional\n            database_name=\"databaseName\",\n            schema=\"schema\"\n        )\n    ),\n    service_role_arn=\"serviceRoleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnDataSourceProps cfnDataSourceProps = new CfnDataSourceProps {\n    ApiId = \"apiId\",\n    Name = \"name\",\n    Type = \"type\",\n\n    // the properties below are optional\n    Description = \"description\",\n    DynamoDbConfig = new DynamoDBConfigProperty {\n        AwsRegion = \"awsRegion\",\n        TableName = \"tableName\",\n\n        // the properties below are optional\n        DeltaSyncConfig = new DeltaSyncConfigProperty {\n            BaseTableTtl = \"baseTableTtl\",\n            DeltaSyncTableName = \"deltaSyncTableName\",\n            DeltaSyncTableTtl = \"deltaSyncTableTtl\"\n        },\n        UseCallerCredentials = false,\n        Versioned = false\n    },\n    ElasticsearchConfig = new ElasticsearchConfigProperty {\n        AwsRegion = \"awsRegion\",\n        Endpoint = \"endpoint\"\n    },\n    HttpConfig = new HttpConfigProperty {\n        Endpoint = \"endpoint\",\n\n        // the properties below are optional\n        AuthorizationConfig = new AuthorizationConfigProperty {\n            AuthorizationType = \"authorizationType\",\n\n            // the properties below are optional\n            AwsIamConfig = new AwsIamConfigProperty {\n                SigningRegion = \"signingRegion\",\n                SigningServiceName = \"signingServiceName\"\n            }\n        }\n    },\n    LambdaConfig = new LambdaConfigProperty {\n        LambdaFunctionArn = \"lambdaFunctionArn\"\n    },\n    OpenSearchServiceConfig = new OpenSearchServiceConfigProperty {\n        AwsRegion = \"awsRegion\",\n        Endpoint = \"endpoint\"\n    },\n    RelationalDatabaseConfig = new RelationalDatabaseConfigProperty {\n        RelationalDatabaseSourceType = \"relationalDatabaseSourceType\",\n\n        // the properties below are optional\n        RdsHttpEndpointConfig = new RdsHttpEndpointConfigProperty {\n            AwsRegion = \"awsRegion\",\n            AwsSecretStoreArn = \"awsSecretStoreArn\",\n            DbClusterIdentifier = \"dbClusterIdentifier\",\n\n            // the properties below are optional\n            DatabaseName = \"databaseName\",\n            Schema = \"schema\"\n        }\n    },\n    ServiceRoleArn = \"serviceRoleArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnDataSourceProps cfnDataSourceProps = CfnDataSourceProps.builder()\n        .apiId(\"apiId\")\n        .name(\"name\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .dynamoDbConfig(DynamoDBConfigProperty.builder()\n                .awsRegion(\"awsRegion\")\n                .tableName(\"tableName\")\n\n                // the properties below are optional\n                .deltaSyncConfig(DeltaSyncConfigProperty.builder()\n                        .baseTableTtl(\"baseTableTtl\")\n                        .deltaSyncTableName(\"deltaSyncTableName\")\n                        .deltaSyncTableTtl(\"deltaSyncTableTtl\")\n                        .build())\n                .useCallerCredentials(false)\n                .versioned(false)\n                .build())\n        .elasticsearchConfig(ElasticsearchConfigProperty.builder()\n                .awsRegion(\"awsRegion\")\n                .endpoint(\"endpoint\")\n                .build())\n        .httpConfig(HttpConfigProperty.builder()\n                .endpoint(\"endpoint\")\n\n                // the properties below are optional\n                .authorizationConfig(AuthorizationConfigProperty.builder()\n                        .authorizationType(\"authorizationType\")\n\n                        // the properties below are optional\n                        .awsIamConfig(AwsIamConfigProperty.builder()\n                                .signingRegion(\"signingRegion\")\n                                .signingServiceName(\"signingServiceName\")\n                                .build())\n                        .build())\n                .build())\n        .lambdaConfig(LambdaConfigProperty.builder()\n                .lambdaFunctionArn(\"lambdaFunctionArn\")\n                .build())\n        .openSearchServiceConfig(OpenSearchServiceConfigProperty.builder()\n                .awsRegion(\"awsRegion\")\n                .endpoint(\"endpoint\")\n                .build())\n        .relationalDatabaseConfig(RelationalDatabaseConfigProperty.builder()\n                .relationalDatabaseSourceType(\"relationalDatabaseSourceType\")\n\n                // the properties below are optional\n                .rdsHttpEndpointConfig(RdsHttpEndpointConfigProperty.builder()\n                        .awsRegion(\"awsRegion\")\n                        .awsSecretStoreArn(\"awsSecretStoreArn\")\n                        .dbClusterIdentifier(\"dbClusterIdentifier\")\n\n                        // the properties below are optional\n                        .databaseName(\"databaseName\")\n                        .schema(\"schema\")\n                        .build())\n                .build())\n        .serviceRoleArn(\"serviceRoleArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnDataSourceProps := &cfnDataSourceProps{\n\tapiId: jsii.String(\"apiId\"),\n\tname: jsii.String(\"name\"),\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tdynamoDbConfig: &dynamoDBConfigProperty{\n\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\ttableName: jsii.String(\"tableName\"),\n\n\t\t// the properties below are optional\n\t\tdeltaSyncConfig: &deltaSyncConfigProperty{\n\t\t\tbaseTableTtl: jsii.String(\"baseTableTtl\"),\n\t\t\tdeltaSyncTableName: jsii.String(\"deltaSyncTableName\"),\n\t\t\tdeltaSyncTableTtl: jsii.String(\"deltaSyncTableTtl\"),\n\t\t},\n\t\tuseCallerCredentials: jsii.Boolean(false),\n\t\tversioned: jsii.Boolean(false),\n\t},\n\telasticsearchConfig: &elasticsearchConfigProperty{\n\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\tendpoint: jsii.String(\"endpoint\"),\n\t},\n\thttpConfig: &httpConfigProperty{\n\t\tendpoint: jsii.String(\"endpoint\"),\n\n\t\t// the properties below are optional\n\t\tauthorizationConfig: &authorizationConfigProperty{\n\t\t\tauthorizationType: jsii.String(\"authorizationType\"),\n\n\t\t\t// the properties below are optional\n\t\t\tawsIamConfig: &awsIamConfigProperty{\n\t\t\t\tsigningRegion: jsii.String(\"signingRegion\"),\n\t\t\t\tsigningServiceName: jsii.String(\"signingServiceName\"),\n\t\t\t},\n\t\t},\n\t},\n\tlambdaConfig: &lambdaConfigProperty{\n\t\tlambdaFunctionArn: jsii.String(\"lambdaFunctionArn\"),\n\t},\n\topenSearchServiceConfig: &openSearchServiceConfigProperty{\n\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\tendpoint: jsii.String(\"endpoint\"),\n\t},\n\trelationalDatabaseConfig: &relationalDatabaseConfigProperty{\n\t\trelationalDatabaseSourceType: jsii.String(\"relationalDatabaseSourceType\"),\n\n\t\t// the properties below are optional\n\t\trdsHttpEndpointConfig: &rdsHttpEndpointConfigProperty{\n\t\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\t\tawsSecretStoreArn: jsii.String(\"awsSecretStoreArn\"),\n\t\t\tdbClusterIdentifier: jsii.String(\"dbClusterIdentifier\"),\n\n\t\t\t// the properties below are optional\n\t\t\tdatabaseName: jsii.String(\"databaseName\"),\n\t\t\tschema: jsii.String(\"schema\"),\n\t\t},\n\t},\n\tserviceRoleArn: jsii.String(\"serviceRoleArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnDataSourceProps: appsync.CfnDataSourceProps = {\n  apiId: 'apiId',\n  name: 'name',\n  type: 'type',\n\n  // the properties below are optional\n  description: 'description',\n  dynamoDbConfig: {\n    awsRegion: 'awsRegion',\n    tableName: 'tableName',\n\n    // the properties below are optional\n    deltaSyncConfig: {\n      baseTableTtl: 'baseTableTtl',\n      deltaSyncTableName: 'deltaSyncTableName',\n      deltaSyncTableTtl: 'deltaSyncTableTtl',\n    },\n    useCallerCredentials: false,\n    versioned: false,\n  },\n  elasticsearchConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  httpConfig: {\n    endpoint: 'endpoint',\n\n    // the properties below are optional\n    authorizationConfig: {\n      authorizationType: 'authorizationType',\n\n      // the properties below are optional\n      awsIamConfig: {\n        signingRegion: 'signingRegion',\n        signingServiceName: 'signingServiceName',\n      },\n    },\n  },\n  lambdaConfig: {\n    lambdaFunctionArn: 'lambdaFunctionArn',\n  },\n  openSearchServiceConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  relationalDatabaseConfig: {\n    relationalDatabaseSourceType: 'relationalDatabaseSourceType',\n\n    // the properties below are optional\n    rdsHttpEndpointConfig: {\n      awsRegion: 'awsRegion',\n      awsSecretStoreArn: 'awsSecretStoreArn',\n      dbClusterIdentifier: 'dbClusterIdentifier',\n\n      // the properties below are optional\n      databaseName: 'databaseName',\n      schema: 'schema',\n    },\n  },\n  serviceRoleArn: 'serviceRoleArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnDataSourceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDataSourceProps: appsync.CfnDataSourceProps = {\n  apiId: 'apiId',\n  name: 'name',\n  type: 'type',\n\n  // the properties below are optional\n  description: 'description',\n  dynamoDbConfig: {\n    awsRegion: 'awsRegion',\n    tableName: 'tableName',\n\n    // the properties below are optional\n    deltaSyncConfig: {\n      baseTableTtl: 'baseTableTtl',\n      deltaSyncTableName: 'deltaSyncTableName',\n      deltaSyncTableTtl: 'deltaSyncTableTtl',\n    },\n    useCallerCredentials: false,\n    versioned: false,\n  },\n  elasticsearchConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  httpConfig: {\n    endpoint: 'endpoint',\n\n    // the properties below are optional\n    authorizationConfig: {\n      authorizationType: 'authorizationType',\n\n      // the properties below are optional\n      awsIamConfig: {\n        signingRegion: 'signingRegion',\n        signingServiceName: 'signingServiceName',\n      },\n    },\n  },\n  lambdaConfig: {\n    lambdaFunctionArn: 'lambdaFunctionArn',\n  },\n  openSearchServiceConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  relationalDatabaseConfig: {\n    relationalDatabaseSourceType: 'relationalDatabaseSourceType',\n\n    // the properties below are optional\n    rdsHttpEndpointConfig: {\n      awsRegion: 'awsRegion',\n      awsSecretStoreArn: 'awsSecretStoreArn',\n      dbClusterIdentifier: 'dbClusterIdentifier',\n\n      // the properties below are optional\n      databaseName: 'databaseName',\n      schema: 'schema',\n    },\n  },\n  serviceRoleArn: 'serviceRoleArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 26,
        "75": 41,
        "91": 2,
        "153": 1,
        "169": 1,
        "193": 11,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 37,
        "290": 1
      },
      "fqnsFingerprint": "e97b17df74c07f105b3db5cb14d28c313125406f5f163808d984c7136a88a2e1"
    },
    "41ed16446921da00f8dd320bfd6732938d2b194759763acc9483c0f3de720a13": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_domain_name = appsync.CfnDomainName(self, \"MyCfnDomainName\",\n    certificate_arn=\"certificateArn\",\n    domain_name=\"domainName\",\n\n    # the properties below are optional\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnDomainName cfnDomainName = new CfnDomainName(this, \"MyCfnDomainName\", new CfnDomainNameProps {\n    CertificateArn = \"certificateArn\",\n    DomainName = \"domainName\",\n\n    // the properties below are optional\n    Description = \"description\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnDomainName cfnDomainName = CfnDomainName.Builder.create(this, \"MyCfnDomainName\")\n        .certificateArn(\"certificateArn\")\n        .domainName(\"domainName\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnDomainName := appsync.NewCfnDomainName(this, jsii.String(\"MyCfnDomainName\"), &cfnDomainNameProps{\n\tcertificateArn: jsii.String(\"certificateArn\"),\n\tdomainName: jsii.String(\"domainName\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnDomainName = new appsync.CfnDomainName(this, 'MyCfnDomainName', {\n  certificateArn: 'certificateArn',\n  domainName: 'domainName',\n\n  // the properties below are optional\n  description: 'description',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnDomainName"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnDomainName",
        "@aws-cdk/aws-appsync.CfnDomainNameProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDomainName = new appsync.CfnDomainName(this, 'MyCfnDomainName', {\n  certificateArn: 'certificateArn',\n  domainName: 'domainName',\n\n  // the properties below are optional\n  description: 'description',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b5673b04b3c69e74790c6946b70abd4dd26c852490adeac81824fead75b9f6b3"
    },
    "afa81a24cbe940b1be1363a7ed5365fdb13bca662ba8a58dbb7a1d54d6d5ecc1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_domain_name_api_association = appsync.CfnDomainNameApiAssociation(self, \"MyCfnDomainNameApiAssociation\",\n    api_id=\"apiId\",\n    domain_name=\"domainName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnDomainNameApiAssociation cfnDomainNameApiAssociation = new CfnDomainNameApiAssociation(this, \"MyCfnDomainNameApiAssociation\", new CfnDomainNameApiAssociationProps {\n    ApiId = \"apiId\",\n    DomainName = \"domainName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnDomainNameApiAssociation cfnDomainNameApiAssociation = CfnDomainNameApiAssociation.Builder.create(this, \"MyCfnDomainNameApiAssociation\")\n        .apiId(\"apiId\")\n        .domainName(\"domainName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnDomainNameApiAssociation := appsync.NewCfnDomainNameApiAssociation(this, jsii.String(\"MyCfnDomainNameApiAssociation\"), &cfnDomainNameApiAssociationProps{\n\tapiId: jsii.String(\"apiId\"),\n\tdomainName: jsii.String(\"domainName\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnDomainNameApiAssociation = new appsync.CfnDomainNameApiAssociation(this, 'MyCfnDomainNameApiAssociation', {\n  apiId: 'apiId',\n  domainName: 'domainName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnDomainNameApiAssociation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnDomainNameApiAssociation",
        "@aws-cdk/aws-appsync.CfnDomainNameApiAssociationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDomainNameApiAssociation = new appsync.CfnDomainNameApiAssociation(this, 'MyCfnDomainNameApiAssociation', {\n  apiId: 'apiId',\n  domainName: 'domainName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f25f9b8252ad07a9f6f32d8279ba6edb1bb34dac04b6d022ff79150ea0b7dac9"
    },
    "ad414b74033e41b737a97f99dccc65a93449c7e98ffa10832aea4b70a60ac281": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_domain_name_api_association_props = appsync.CfnDomainNameApiAssociationProps(\n    api_id=\"apiId\",\n    domain_name=\"domainName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnDomainNameApiAssociationProps cfnDomainNameApiAssociationProps = new CfnDomainNameApiAssociationProps {\n    ApiId = \"apiId\",\n    DomainName = \"domainName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnDomainNameApiAssociationProps cfnDomainNameApiAssociationProps = CfnDomainNameApiAssociationProps.builder()\n        .apiId(\"apiId\")\n        .domainName(\"domainName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnDomainNameApiAssociationProps := &cfnDomainNameApiAssociationProps{\n\tapiId: jsii.String(\"apiId\"),\n\tdomainName: jsii.String(\"domainName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnDomainNameApiAssociationProps: appsync.CfnDomainNameApiAssociationProps = {\n  apiId: 'apiId',\n  domainName: 'domainName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnDomainNameApiAssociationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnDomainNameApiAssociationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDomainNameApiAssociationProps: appsync.CfnDomainNameApiAssociationProps = {\n  apiId: 'apiId',\n  domainName: 'domainName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "76d3a9383b1a23079c883c7fa1d2f53b952153b74b9fa45caa033732f0919ccf"
    },
    "e626e9994d358b4163bd914e52c9883bfc4b095b8e64bc2a66caeeefdbc84c0d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_domain_name_props = appsync.CfnDomainNameProps(\n    certificate_arn=\"certificateArn\",\n    domain_name=\"domainName\",\n\n    # the properties below are optional\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnDomainNameProps cfnDomainNameProps = new CfnDomainNameProps {\n    CertificateArn = \"certificateArn\",\n    DomainName = \"domainName\",\n\n    // the properties below are optional\n    Description = \"description\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnDomainNameProps cfnDomainNameProps = CfnDomainNameProps.builder()\n        .certificateArn(\"certificateArn\")\n        .domainName(\"domainName\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnDomainNameProps := &cfnDomainNameProps{\n\tcertificateArn: jsii.String(\"certificateArn\"),\n\tdomainName: jsii.String(\"domainName\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnDomainNameProps: appsync.CfnDomainNameProps = {\n  certificateArn: 'certificateArn',\n  domainName: 'domainName',\n\n  // the properties below are optional\n  description: 'description',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnDomainNameProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnDomainNameProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDomainNameProps: appsync.CfnDomainNameProps = {\n  certificateArn: 'certificateArn',\n  domainName: 'domainName',\n\n  // the properties below are optional\n  description: 'description',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "10b8e497d9b4b42bb163c53f12a40ca3196d42c3a04e8a9944c49528daae1024"
    },
    "f7bbe63e4c2c1a4bed184a18522d9cf527526e46ae5cc0bfd3e189c2d2fdfc51": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_function_configuration = appsync.CfnFunctionConfiguration(self, \"MyCfnFunctionConfiguration\",\n    api_id=\"apiId\",\n    data_source_name=\"dataSourceName\",\n    function_version=\"functionVersion\",\n    name=\"name\",\n\n    # the properties below are optional\n    description=\"description\",\n    max_batch_size=123,\n    request_mapping_template=\"requestMappingTemplate\",\n    request_mapping_template_s3_location=\"requestMappingTemplateS3Location\",\n    response_mapping_template=\"responseMappingTemplate\",\n    response_mapping_template_s3_location=\"responseMappingTemplateS3Location\",\n    sync_config=appsync.CfnFunctionConfiguration.SyncConfigProperty(\n        conflict_detection=\"conflictDetection\",\n\n        # the properties below are optional\n        conflict_handler=\"conflictHandler\",\n        lambda_conflict_handler_config=appsync.CfnFunctionConfiguration.LambdaConflictHandlerConfigProperty(\n            lambda_conflict_handler_arn=\"lambdaConflictHandlerArn\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnFunctionConfiguration cfnFunctionConfiguration = new CfnFunctionConfiguration(this, \"MyCfnFunctionConfiguration\", new CfnFunctionConfigurationProps {\n    ApiId = \"apiId\",\n    DataSourceName = \"dataSourceName\",\n    FunctionVersion = \"functionVersion\",\n    Name = \"name\",\n\n    // the properties below are optional\n    Description = \"description\",\n    MaxBatchSize = 123,\n    RequestMappingTemplate = \"requestMappingTemplate\",\n    RequestMappingTemplateS3Location = \"requestMappingTemplateS3Location\",\n    ResponseMappingTemplate = \"responseMappingTemplate\",\n    ResponseMappingTemplateS3Location = \"responseMappingTemplateS3Location\",\n    SyncConfig = new SyncConfigProperty {\n        ConflictDetection = \"conflictDetection\",\n\n        // the properties below are optional\n        ConflictHandler = \"conflictHandler\",\n        LambdaConflictHandlerConfig = new LambdaConflictHandlerConfigProperty {\n            LambdaConflictHandlerArn = \"lambdaConflictHandlerArn\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnFunctionConfiguration cfnFunctionConfiguration = CfnFunctionConfiguration.Builder.create(this, \"MyCfnFunctionConfiguration\")\n        .apiId(\"apiId\")\n        .dataSourceName(\"dataSourceName\")\n        .functionVersion(\"functionVersion\")\n        .name(\"name\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .maxBatchSize(123)\n        .requestMappingTemplate(\"requestMappingTemplate\")\n        .requestMappingTemplateS3Location(\"requestMappingTemplateS3Location\")\n        .responseMappingTemplate(\"responseMappingTemplate\")\n        .responseMappingTemplateS3Location(\"responseMappingTemplateS3Location\")\n        .syncConfig(SyncConfigProperty.builder()\n                .conflictDetection(\"conflictDetection\")\n\n                // the properties below are optional\n                .conflictHandler(\"conflictHandler\")\n                .lambdaConflictHandlerConfig(LambdaConflictHandlerConfigProperty.builder()\n                        .lambdaConflictHandlerArn(\"lambdaConflictHandlerArn\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnFunctionConfiguration := appsync.NewCfnFunctionConfiguration(this, jsii.String(\"MyCfnFunctionConfiguration\"), &cfnFunctionConfigurationProps{\n\tapiId: jsii.String(\"apiId\"),\n\tdataSourceName: jsii.String(\"dataSourceName\"),\n\tfunctionVersion: jsii.String(\"functionVersion\"),\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tmaxBatchSize: jsii.Number(123),\n\trequestMappingTemplate: jsii.String(\"requestMappingTemplate\"),\n\trequestMappingTemplateS3Location: jsii.String(\"requestMappingTemplateS3Location\"),\n\tresponseMappingTemplate: jsii.String(\"responseMappingTemplate\"),\n\tresponseMappingTemplateS3Location: jsii.String(\"responseMappingTemplateS3Location\"),\n\tsyncConfig: &syncConfigProperty{\n\t\tconflictDetection: jsii.String(\"conflictDetection\"),\n\n\t\t// the properties below are optional\n\t\tconflictHandler: jsii.String(\"conflictHandler\"),\n\t\tlambdaConflictHandlerConfig: &lambdaConflictHandlerConfigProperty{\n\t\t\tlambdaConflictHandlerArn: jsii.String(\"lambdaConflictHandlerArn\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnFunctionConfiguration = new appsync.CfnFunctionConfiguration(this, 'MyCfnFunctionConfiguration', {\n  apiId: 'apiId',\n  dataSourceName: 'dataSourceName',\n  functionVersion: 'functionVersion',\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  maxBatchSize: 123,\n  requestMappingTemplate: 'requestMappingTemplate',\n  requestMappingTemplateS3Location: 'requestMappingTemplateS3Location',\n  responseMappingTemplate: 'responseMappingTemplate',\n  responseMappingTemplateS3Location: 'responseMappingTemplateS3Location',\n  syncConfig: {\n    conflictDetection: 'conflictDetection',\n\n    // the properties below are optional\n    conflictHandler: 'conflictHandler',\n    lambdaConflictHandlerConfig: {\n      lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnFunctionConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnFunctionConfiguration",
        "@aws-cdk/aws-appsync.CfnFunctionConfigurationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnFunctionConfiguration = new appsync.CfnFunctionConfiguration(this, 'MyCfnFunctionConfiguration', {\n  apiId: 'apiId',\n  dataSourceName: 'dataSourceName',\n  functionVersion: 'functionVersion',\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  maxBatchSize: 123,\n  requestMappingTemplate: 'requestMappingTemplate',\n  requestMappingTemplateS3Location: 'requestMappingTemplateS3Location',\n  responseMappingTemplate: 'responseMappingTemplate',\n  responseMappingTemplateS3Location: 'responseMappingTemplateS3Location',\n  syncConfig: {\n    conflictDetection: 'conflictDetection',\n\n    // the properties below are optional\n    conflictHandler: 'conflictHandler',\n    lambdaConflictHandlerConfig: {\n      lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 14,
        "75": 19,
        "104": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "3541e54786bfe27fb1e0e5128262ff0b6477568b72f940e2105d3ccbcffeaf34"
    },
    "958a0864e7941b4f4f0ce80e011e35c9fd30a3d2ba9342757daa48460fdc41f1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nlambda_conflict_handler_config_property = appsync.CfnFunctionConfiguration.LambdaConflictHandlerConfigProperty(\n    lambda_conflict_handler_arn=\"lambdaConflictHandlerArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nLambdaConflictHandlerConfigProperty lambdaConflictHandlerConfigProperty = new LambdaConflictHandlerConfigProperty {\n    LambdaConflictHandlerArn = \"lambdaConflictHandlerArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nLambdaConflictHandlerConfigProperty lambdaConflictHandlerConfigProperty = LambdaConflictHandlerConfigProperty.builder()\n        .lambdaConflictHandlerArn(\"lambdaConflictHandlerArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nlambdaConflictHandlerConfigProperty := &lambdaConflictHandlerConfigProperty{\n\tlambdaConflictHandlerArn: jsii.String(\"lambdaConflictHandlerArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst lambdaConflictHandlerConfigProperty: appsync.CfnFunctionConfiguration.LambdaConflictHandlerConfigProperty = {\n  lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnFunctionConfiguration.LambdaConflictHandlerConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnFunctionConfiguration.LambdaConflictHandlerConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lambdaConflictHandlerConfigProperty: appsync.CfnFunctionConfiguration.LambdaConflictHandlerConfigProperty = {\n  lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "1a4eb6b62f6199cd6c2a36f3ae911181610389d4ea68d9331a5ff049605454b6"
    },
    "50b0605d3d285b2e2b6e880b7d0bbb6f17deb48a643e6f4ae810cd071c88f841": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nsync_config_property = appsync.CfnFunctionConfiguration.SyncConfigProperty(\n    conflict_detection=\"conflictDetection\",\n\n    # the properties below are optional\n    conflict_handler=\"conflictHandler\",\n    lambda_conflict_handler_config=appsync.CfnFunctionConfiguration.LambdaConflictHandlerConfigProperty(\n        lambda_conflict_handler_arn=\"lambdaConflictHandlerArn\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nSyncConfigProperty syncConfigProperty = new SyncConfigProperty {\n    ConflictDetection = \"conflictDetection\",\n\n    // the properties below are optional\n    ConflictHandler = \"conflictHandler\",\n    LambdaConflictHandlerConfig = new LambdaConflictHandlerConfigProperty {\n        LambdaConflictHandlerArn = \"lambdaConflictHandlerArn\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nSyncConfigProperty syncConfigProperty = SyncConfigProperty.builder()\n        .conflictDetection(\"conflictDetection\")\n\n        // the properties below are optional\n        .conflictHandler(\"conflictHandler\")\n        .lambdaConflictHandlerConfig(LambdaConflictHandlerConfigProperty.builder()\n                .lambdaConflictHandlerArn(\"lambdaConflictHandlerArn\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nsyncConfigProperty := &syncConfigProperty{\n\tconflictDetection: jsii.String(\"conflictDetection\"),\n\n\t// the properties below are optional\n\tconflictHandler: jsii.String(\"conflictHandler\"),\n\tlambdaConflictHandlerConfig: &lambdaConflictHandlerConfigProperty{\n\t\tlambdaConflictHandlerArn: jsii.String(\"lambdaConflictHandlerArn\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst syncConfigProperty: appsync.CfnFunctionConfiguration.SyncConfigProperty = {\n  conflictDetection: 'conflictDetection',\n\n  // the properties below are optional\n  conflictHandler: 'conflictHandler',\n  lambdaConflictHandlerConfig: {\n    lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnFunctionConfiguration.SyncConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnFunctionConfiguration.SyncConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst syncConfigProperty: appsync.CfnFunctionConfiguration.SyncConfigProperty = {\n  conflictDetection: 'conflictDetection',\n\n  // the properties below are optional\n  conflictHandler: 'conflictHandler',\n  lambdaConflictHandlerConfig: {\n    lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "031cc06c51ace2b084fcda553747277e858a955110113b95320fc887bbdd3af3"
    },
    "274f42934464f3bb72f8ac45cd3014b853ad656018e79e5c96d3d56f73ac2045": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_function_configuration_props = appsync.CfnFunctionConfigurationProps(\n    api_id=\"apiId\",\n    data_source_name=\"dataSourceName\",\n    function_version=\"functionVersion\",\n    name=\"name\",\n\n    # the properties below are optional\n    description=\"description\",\n    max_batch_size=123,\n    request_mapping_template=\"requestMappingTemplate\",\n    request_mapping_template_s3_location=\"requestMappingTemplateS3Location\",\n    response_mapping_template=\"responseMappingTemplate\",\n    response_mapping_template_s3_location=\"responseMappingTemplateS3Location\",\n    sync_config=appsync.CfnFunctionConfiguration.SyncConfigProperty(\n        conflict_detection=\"conflictDetection\",\n\n        # the properties below are optional\n        conflict_handler=\"conflictHandler\",\n        lambda_conflict_handler_config=appsync.CfnFunctionConfiguration.LambdaConflictHandlerConfigProperty(\n            lambda_conflict_handler_arn=\"lambdaConflictHandlerArn\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnFunctionConfigurationProps cfnFunctionConfigurationProps = new CfnFunctionConfigurationProps {\n    ApiId = \"apiId\",\n    DataSourceName = \"dataSourceName\",\n    FunctionVersion = \"functionVersion\",\n    Name = \"name\",\n\n    // the properties below are optional\n    Description = \"description\",\n    MaxBatchSize = 123,\n    RequestMappingTemplate = \"requestMappingTemplate\",\n    RequestMappingTemplateS3Location = \"requestMappingTemplateS3Location\",\n    ResponseMappingTemplate = \"responseMappingTemplate\",\n    ResponseMappingTemplateS3Location = \"responseMappingTemplateS3Location\",\n    SyncConfig = new SyncConfigProperty {\n        ConflictDetection = \"conflictDetection\",\n\n        // the properties below are optional\n        ConflictHandler = \"conflictHandler\",\n        LambdaConflictHandlerConfig = new LambdaConflictHandlerConfigProperty {\n            LambdaConflictHandlerArn = \"lambdaConflictHandlerArn\"\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnFunctionConfigurationProps cfnFunctionConfigurationProps = CfnFunctionConfigurationProps.builder()\n        .apiId(\"apiId\")\n        .dataSourceName(\"dataSourceName\")\n        .functionVersion(\"functionVersion\")\n        .name(\"name\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .maxBatchSize(123)\n        .requestMappingTemplate(\"requestMappingTemplate\")\n        .requestMappingTemplateS3Location(\"requestMappingTemplateS3Location\")\n        .responseMappingTemplate(\"responseMappingTemplate\")\n        .responseMappingTemplateS3Location(\"responseMappingTemplateS3Location\")\n        .syncConfig(SyncConfigProperty.builder()\n                .conflictDetection(\"conflictDetection\")\n\n                // the properties below are optional\n                .conflictHandler(\"conflictHandler\")\n                .lambdaConflictHandlerConfig(LambdaConflictHandlerConfigProperty.builder()\n                        .lambdaConflictHandlerArn(\"lambdaConflictHandlerArn\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnFunctionConfigurationProps := &cfnFunctionConfigurationProps{\n\tapiId: jsii.String(\"apiId\"),\n\tdataSourceName: jsii.String(\"dataSourceName\"),\n\tfunctionVersion: jsii.String(\"functionVersion\"),\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tmaxBatchSize: jsii.Number(123),\n\trequestMappingTemplate: jsii.String(\"requestMappingTemplate\"),\n\trequestMappingTemplateS3Location: jsii.String(\"requestMappingTemplateS3Location\"),\n\tresponseMappingTemplate: jsii.String(\"responseMappingTemplate\"),\n\tresponseMappingTemplateS3Location: jsii.String(\"responseMappingTemplateS3Location\"),\n\tsyncConfig: &syncConfigProperty{\n\t\tconflictDetection: jsii.String(\"conflictDetection\"),\n\n\t\t// the properties below are optional\n\t\tconflictHandler: jsii.String(\"conflictHandler\"),\n\t\tlambdaConflictHandlerConfig: &lambdaConflictHandlerConfigProperty{\n\t\t\tlambdaConflictHandlerArn: jsii.String(\"lambdaConflictHandlerArn\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnFunctionConfigurationProps: appsync.CfnFunctionConfigurationProps = {\n  apiId: 'apiId',\n  dataSourceName: 'dataSourceName',\n  functionVersion: 'functionVersion',\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  maxBatchSize: 123,\n  requestMappingTemplate: 'requestMappingTemplate',\n  requestMappingTemplateS3Location: 'requestMappingTemplateS3Location',\n  responseMappingTemplate: 'responseMappingTemplate',\n  responseMappingTemplateS3Location: 'responseMappingTemplateS3Location',\n  syncConfig: {\n    conflictDetection: 'conflictDetection',\n\n    // the properties below are optional\n    conflictHandler: 'conflictHandler',\n    lambdaConflictHandlerConfig: {\n      lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnFunctionConfigurationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnFunctionConfigurationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnFunctionConfigurationProps: appsync.CfnFunctionConfigurationProps = {\n  apiId: 'apiId',\n  dataSourceName: 'dataSourceName',\n  functionVersion: 'functionVersion',\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  maxBatchSize: 123,\n  requestMappingTemplate: 'requestMappingTemplate',\n  requestMappingTemplateS3Location: 'requestMappingTemplateS3Location',\n  responseMappingTemplate: 'responseMappingTemplate',\n  responseMappingTemplateS3Location: 'responseMappingTemplateS3Location',\n  syncConfig: {\n    conflictDetection: 'conflictDetection',\n\n    // the properties below are optional\n    conflictHandler: 'conflictHandler',\n    lambdaConflictHandlerConfig: {\n      lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 19,
        "153": 1,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "afabc1c7f79fd9e05bd661d2045c7c36e36c531bb718c64d3a7bf677fd5190f9"
    },
    "1dc99a643cb9c8f1d898054256ca07c8246991cb32d06d311b75c7354c8dd51c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_graph_qLApi = appsync.CfnGraphQLApi(self, \"MyCfnGraphQLApi\",\n    authentication_type=\"authenticationType\",\n    name=\"name\",\n\n    # the properties below are optional\n    additional_authentication_providers=[appsync.CfnGraphQLApi.AdditionalAuthenticationProviderProperty(\n        authentication_type=\"authenticationType\",\n\n        # the properties below are optional\n        lambda_authorizer_config=appsync.CfnGraphQLApi.LambdaAuthorizerConfigProperty(\n            authorizer_result_ttl_in_seconds=123,\n            authorizer_uri=\"authorizerUri\",\n            identity_validation_expression=\"identityValidationExpression\"\n        ),\n        open_id_connect_config=appsync.CfnGraphQLApi.OpenIDConnectConfigProperty(\n            auth_ttl=123,\n            client_id=\"clientId\",\n            iat_ttl=123,\n            issuer=\"issuer\"\n        ),\n        user_pool_config=appsync.CfnGraphQLApi.CognitoUserPoolConfigProperty(\n            app_id_client_regex=\"appIdClientRegex\",\n            aws_region=\"awsRegion\",\n            user_pool_id=\"userPoolId\"\n        )\n    )],\n    lambda_authorizer_config=appsync.CfnGraphQLApi.LambdaAuthorizerConfigProperty(\n        authorizer_result_ttl_in_seconds=123,\n        authorizer_uri=\"authorizerUri\",\n        identity_validation_expression=\"identityValidationExpression\"\n    ),\n    log_config=appsync.CfnGraphQLApi.LogConfigProperty(\n        cloud_watch_logs_role_arn=\"cloudWatchLogsRoleArn\",\n        exclude_verbose_content=False,\n        field_log_level=\"fieldLogLevel\"\n    ),\n    open_id_connect_config=appsync.CfnGraphQLApi.OpenIDConnectConfigProperty(\n        auth_ttl=123,\n        client_id=\"clientId\",\n        iat_ttl=123,\n        issuer=\"issuer\"\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    user_pool_config=appsync.CfnGraphQLApi.UserPoolConfigProperty(\n        app_id_client_regex=\"appIdClientRegex\",\n        aws_region=\"awsRegion\",\n        default_action=\"defaultAction\",\n        user_pool_id=\"userPoolId\"\n    ),\n    xray_enabled=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnGraphQLApi cfnGraphQLApi = new CfnGraphQLApi(this, \"MyCfnGraphQLApi\", new CfnGraphQLApiProps {\n    AuthenticationType = \"authenticationType\",\n    Name = \"name\",\n\n    // the properties below are optional\n    AdditionalAuthenticationProviders = new [] { new AdditionalAuthenticationProviderProperty {\n        AuthenticationType = \"authenticationType\",\n\n        // the properties below are optional\n        LambdaAuthorizerConfig = new LambdaAuthorizerConfigProperty {\n            AuthorizerResultTtlInSeconds = 123,\n            AuthorizerUri = \"authorizerUri\",\n            IdentityValidationExpression = \"identityValidationExpression\"\n        },\n        OpenIdConnectConfig = new OpenIDConnectConfigProperty {\n            AuthTtl = 123,\n            ClientId = \"clientId\",\n            IatTtl = 123,\n            Issuer = \"issuer\"\n        },\n        UserPoolConfig = new CognitoUserPoolConfigProperty {\n            AppIdClientRegex = \"appIdClientRegex\",\n            AwsRegion = \"awsRegion\",\n            UserPoolId = \"userPoolId\"\n        }\n    } },\n    LambdaAuthorizerConfig = new LambdaAuthorizerConfigProperty {\n        AuthorizerResultTtlInSeconds = 123,\n        AuthorizerUri = \"authorizerUri\",\n        IdentityValidationExpression = \"identityValidationExpression\"\n    },\n    LogConfig = new LogConfigProperty {\n        CloudWatchLogsRoleArn = \"cloudWatchLogsRoleArn\",\n        ExcludeVerboseContent = false,\n        FieldLogLevel = \"fieldLogLevel\"\n    },\n    OpenIdConnectConfig = new OpenIDConnectConfigProperty {\n        AuthTtl = 123,\n        ClientId = \"clientId\",\n        IatTtl = 123,\n        Issuer = \"issuer\"\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    UserPoolConfig = new UserPoolConfigProperty {\n        AppIdClientRegex = \"appIdClientRegex\",\n        AwsRegion = \"awsRegion\",\n        DefaultAction = \"defaultAction\",\n        UserPoolId = \"userPoolId\"\n    },\n    XrayEnabled = false\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnGraphQLApi cfnGraphQLApi = CfnGraphQLApi.Builder.create(this, \"MyCfnGraphQLApi\")\n        .authenticationType(\"authenticationType\")\n        .name(\"name\")\n\n        // the properties below are optional\n        .additionalAuthenticationProviders(List.of(AdditionalAuthenticationProviderProperty.builder()\n                .authenticationType(\"authenticationType\")\n\n                // the properties below are optional\n                .lambdaAuthorizerConfig(LambdaAuthorizerConfigProperty.builder()\n                        .authorizerResultTtlInSeconds(123)\n                        .authorizerUri(\"authorizerUri\")\n                        .identityValidationExpression(\"identityValidationExpression\")\n                        .build())\n                .openIdConnectConfig(OpenIDConnectConfigProperty.builder()\n                        .authTtl(123)\n                        .clientId(\"clientId\")\n                        .iatTtl(123)\n                        .issuer(\"issuer\")\n                        .build())\n                .userPoolConfig(CognitoUserPoolConfigProperty.builder()\n                        .appIdClientRegex(\"appIdClientRegex\")\n                        .awsRegion(\"awsRegion\")\n                        .userPoolId(\"userPoolId\")\n                        .build())\n                .build()))\n        .lambdaAuthorizerConfig(LambdaAuthorizerConfigProperty.builder()\n                .authorizerResultTtlInSeconds(123)\n                .authorizerUri(\"authorizerUri\")\n                .identityValidationExpression(\"identityValidationExpression\")\n                .build())\n        .logConfig(LogConfigProperty.builder()\n                .cloudWatchLogsRoleArn(\"cloudWatchLogsRoleArn\")\n                .excludeVerboseContent(false)\n                .fieldLogLevel(\"fieldLogLevel\")\n                .build())\n        .openIdConnectConfig(OpenIDConnectConfigProperty.builder()\n                .authTtl(123)\n                .clientId(\"clientId\")\n                .iatTtl(123)\n                .issuer(\"issuer\")\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .userPoolConfig(UserPoolConfigProperty.builder()\n                .appIdClientRegex(\"appIdClientRegex\")\n                .awsRegion(\"awsRegion\")\n                .defaultAction(\"defaultAction\")\n                .userPoolId(\"userPoolId\")\n                .build())\n        .xrayEnabled(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnGraphQLApi := appsync.NewCfnGraphQLApi(this, jsii.String(\"MyCfnGraphQLApi\"), &cfnGraphQLApiProps{\n\tauthenticationType: jsii.String(\"authenticationType\"),\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tadditionalAuthenticationProviders: []interface{}{\n\t\t&additionalAuthenticationProviderProperty{\n\t\t\tauthenticationType: jsii.String(\"authenticationType\"),\n\n\t\t\t// the properties below are optional\n\t\t\tlambdaAuthorizerConfig: &lambdaAuthorizerConfigProperty{\n\t\t\t\tauthorizerResultTtlInSeconds: jsii.Number(123),\n\t\t\t\tauthorizerUri: jsii.String(\"authorizerUri\"),\n\t\t\t\tidentityValidationExpression: jsii.String(\"identityValidationExpression\"),\n\t\t\t},\n\t\t\topenIdConnectConfig: &openIDConnectConfigProperty{\n\t\t\t\tauthTtl: jsii.Number(123),\n\t\t\t\tclientId: jsii.String(\"clientId\"),\n\t\t\t\tiatTtl: jsii.Number(123),\n\t\t\t\tissuer: jsii.String(\"issuer\"),\n\t\t\t},\n\t\t\tuserPoolConfig: &cognitoUserPoolConfigProperty{\n\t\t\t\tappIdClientRegex: jsii.String(\"appIdClientRegex\"),\n\t\t\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\t\t\tuserPoolId: jsii.String(\"userPoolId\"),\n\t\t\t},\n\t\t},\n\t},\n\tlambdaAuthorizerConfig: &lambdaAuthorizerConfigProperty{\n\t\tauthorizerResultTtlInSeconds: jsii.Number(123),\n\t\tauthorizerUri: jsii.String(\"authorizerUri\"),\n\t\tidentityValidationExpression: jsii.String(\"identityValidationExpression\"),\n\t},\n\tlogConfig: &logConfigProperty{\n\t\tcloudWatchLogsRoleArn: jsii.String(\"cloudWatchLogsRoleArn\"),\n\t\texcludeVerboseContent: jsii.Boolean(false),\n\t\tfieldLogLevel: jsii.String(\"fieldLogLevel\"),\n\t},\n\topenIdConnectConfig: &openIDConnectConfigProperty{\n\t\tauthTtl: jsii.Number(123),\n\t\tclientId: jsii.String(\"clientId\"),\n\t\tiatTtl: jsii.Number(123),\n\t\tissuer: jsii.String(\"issuer\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tuserPoolConfig: &userPoolConfigProperty{\n\t\tappIdClientRegex: jsii.String(\"appIdClientRegex\"),\n\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\tdefaultAction: jsii.String(\"defaultAction\"),\n\t\tuserPoolId: jsii.String(\"userPoolId\"),\n\t},\n\txrayEnabled: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnGraphQLApi = new appsync.CfnGraphQLApi(this, 'MyCfnGraphQLApi', {\n  authenticationType: 'authenticationType',\n  name: 'name',\n\n  // the properties below are optional\n  additionalAuthenticationProviders: [{\n    authenticationType: 'authenticationType',\n\n    // the properties below are optional\n    lambdaAuthorizerConfig: {\n      authorizerResultTtlInSeconds: 123,\n      authorizerUri: 'authorizerUri',\n      identityValidationExpression: 'identityValidationExpression',\n    },\n    openIdConnectConfig: {\n      authTtl: 123,\n      clientId: 'clientId',\n      iatTtl: 123,\n      issuer: 'issuer',\n    },\n    userPoolConfig: {\n      appIdClientRegex: 'appIdClientRegex',\n      awsRegion: 'awsRegion',\n      userPoolId: 'userPoolId',\n    },\n  }],\n  lambdaAuthorizerConfig: {\n    authorizerResultTtlInSeconds: 123,\n    authorizerUri: 'authorizerUri',\n    identityValidationExpression: 'identityValidationExpression',\n  },\n  logConfig: {\n    cloudWatchLogsRoleArn: 'cloudWatchLogsRoleArn',\n    excludeVerboseContent: false,\n    fieldLogLevel: 'fieldLogLevel',\n  },\n  openIdConnectConfig: {\n    authTtl: 123,\n    clientId: 'clientId',\n    iatTtl: 123,\n    issuer: 'issuer',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  userPoolConfig: {\n    appIdClientRegex: 'appIdClientRegex',\n    awsRegion: 'awsRegion',\n    defaultAction: 'defaultAction',\n    userPoolId: 'userPoolId',\n  },\n  xrayEnabled: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnGraphQLApi",
        "@aws-cdk/aws-appsync.CfnGraphQLApiProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnGraphQLApi = new appsync.CfnGraphQLApi(this, 'MyCfnGraphQLApi', {\n  authenticationType: 'authenticationType',\n  name: 'name',\n\n  // the properties below are optional\n  additionalAuthenticationProviders: [{\n    authenticationType: 'authenticationType',\n\n    // the properties below are optional\n    lambdaAuthorizerConfig: {\n      authorizerResultTtlInSeconds: 123,\n      authorizerUri: 'authorizerUri',\n      identityValidationExpression: 'identityValidationExpression',\n    },\n    openIdConnectConfig: {\n      authTtl: 123,\n      clientId: 'clientId',\n      iatTtl: 123,\n      issuer: 'issuer',\n    },\n    userPoolConfig: {\n      appIdClientRegex: 'appIdClientRegex',\n      awsRegion: 'awsRegion',\n      userPoolId: 'userPoolId',\n    },\n  }],\n  lambdaAuthorizerConfig: {\n    authorizerResultTtlInSeconds: 123,\n    authorizerUri: 'authorizerUri',\n    identityValidationExpression: 'identityValidationExpression',\n  },\n  logConfig: {\n    cloudWatchLogsRoleArn: 'cloudWatchLogsRoleArn',\n    excludeVerboseContent: false,\n    fieldLogLevel: 'fieldLogLevel',\n  },\n  openIdConnectConfig: {\n    authTtl: 123,\n    clientId: 'clientId',\n    iatTtl: 123,\n    issuer: 'issuer',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  userPoolConfig: {\n    appIdClientRegex: 'appIdClientRegex',\n    awsRegion: 'awsRegion',\n    defaultAction: 'defaultAction',\n    userPoolId: 'userPoolId',\n  },\n  xrayEnabled: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 24,
        "75": 43,
        "91": 2,
        "104": 1,
        "192": 2,
        "193": 10,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 39,
        "290": 1
      },
      "fqnsFingerprint": "ae13053b8025c896aca4867a002d76266a136a060d5c153bd1df00e8cf0dde4f"
    },
    "6a18bf14fded8bb756489745badafae2a84bd69d6b978bca5c306459412cd438": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nadditional_authentication_provider_property = appsync.CfnGraphQLApi.AdditionalAuthenticationProviderProperty(\n    authentication_type=\"authenticationType\",\n\n    # the properties below are optional\n    lambda_authorizer_config=appsync.CfnGraphQLApi.LambdaAuthorizerConfigProperty(\n        authorizer_result_ttl_in_seconds=123,\n        authorizer_uri=\"authorizerUri\",\n        identity_validation_expression=\"identityValidationExpression\"\n    ),\n    open_id_connect_config=appsync.CfnGraphQLApi.OpenIDConnectConfigProperty(\n        auth_ttl=123,\n        client_id=\"clientId\",\n        iat_ttl=123,\n        issuer=\"issuer\"\n    ),\n    user_pool_config=appsync.CfnGraphQLApi.CognitoUserPoolConfigProperty(\n        app_id_client_regex=\"appIdClientRegex\",\n        aws_region=\"awsRegion\",\n        user_pool_id=\"userPoolId\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nAdditionalAuthenticationProviderProperty additionalAuthenticationProviderProperty = new AdditionalAuthenticationProviderProperty {\n    AuthenticationType = \"authenticationType\",\n\n    // the properties below are optional\n    LambdaAuthorizerConfig = new LambdaAuthorizerConfigProperty {\n        AuthorizerResultTtlInSeconds = 123,\n        AuthorizerUri = \"authorizerUri\",\n        IdentityValidationExpression = \"identityValidationExpression\"\n    },\n    OpenIdConnectConfig = new OpenIDConnectConfigProperty {\n        AuthTtl = 123,\n        ClientId = \"clientId\",\n        IatTtl = 123,\n        Issuer = \"issuer\"\n    },\n    UserPoolConfig = new CognitoUserPoolConfigProperty {\n        AppIdClientRegex = \"appIdClientRegex\",\n        AwsRegion = \"awsRegion\",\n        UserPoolId = \"userPoolId\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nAdditionalAuthenticationProviderProperty additionalAuthenticationProviderProperty = AdditionalAuthenticationProviderProperty.builder()\n        .authenticationType(\"authenticationType\")\n\n        // the properties below are optional\n        .lambdaAuthorizerConfig(LambdaAuthorizerConfigProperty.builder()\n                .authorizerResultTtlInSeconds(123)\n                .authorizerUri(\"authorizerUri\")\n                .identityValidationExpression(\"identityValidationExpression\")\n                .build())\n        .openIdConnectConfig(OpenIDConnectConfigProperty.builder()\n                .authTtl(123)\n                .clientId(\"clientId\")\n                .iatTtl(123)\n                .issuer(\"issuer\")\n                .build())\n        .userPoolConfig(CognitoUserPoolConfigProperty.builder()\n                .appIdClientRegex(\"appIdClientRegex\")\n                .awsRegion(\"awsRegion\")\n                .userPoolId(\"userPoolId\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nadditionalAuthenticationProviderProperty := &additionalAuthenticationProviderProperty{\n\tauthenticationType: jsii.String(\"authenticationType\"),\n\n\t// the properties below are optional\n\tlambdaAuthorizerConfig: &lambdaAuthorizerConfigProperty{\n\t\tauthorizerResultTtlInSeconds: jsii.Number(123),\n\t\tauthorizerUri: jsii.String(\"authorizerUri\"),\n\t\tidentityValidationExpression: jsii.String(\"identityValidationExpression\"),\n\t},\n\topenIdConnectConfig: &openIDConnectConfigProperty{\n\t\tauthTtl: jsii.Number(123),\n\t\tclientId: jsii.String(\"clientId\"),\n\t\tiatTtl: jsii.Number(123),\n\t\tissuer: jsii.String(\"issuer\"),\n\t},\n\tuserPoolConfig: &cognitoUserPoolConfigProperty{\n\t\tappIdClientRegex: jsii.String(\"appIdClientRegex\"),\n\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\tuserPoolId: jsii.String(\"userPoolId\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst additionalAuthenticationProviderProperty: appsync.CfnGraphQLApi.AdditionalAuthenticationProviderProperty = {\n  authenticationType: 'authenticationType',\n\n  // the properties below are optional\n  lambdaAuthorizerConfig: {\n    authorizerResultTtlInSeconds: 123,\n    authorizerUri: 'authorizerUri',\n    identityValidationExpression: 'identityValidationExpression',\n  },\n  openIdConnectConfig: {\n    authTtl: 123,\n    clientId: 'clientId',\n    iatTtl: 123,\n    issuer: 'issuer',\n  },\n  userPoolConfig: {\n    appIdClientRegex: 'appIdClientRegex',\n    awsRegion: 'awsRegion',\n    userPoolId: 'userPoolId',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.AdditionalAuthenticationProviderProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnGraphQLApi.AdditionalAuthenticationProviderProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst additionalAuthenticationProviderProperty: appsync.CfnGraphQLApi.AdditionalAuthenticationProviderProperty = {\n  authenticationType: 'authenticationType',\n\n  // the properties below are optional\n  lambdaAuthorizerConfig: {\n    authorizerResultTtlInSeconds: 123,\n    authorizerUri: 'authorizerUri',\n    identityValidationExpression: 'identityValidationExpression',\n  },\n  openIdConnectConfig: {\n    authTtl: 123,\n    clientId: 'clientId',\n    iatTtl: 123,\n    issuer: 'issuer',\n  },\n  userPoolConfig: {\n    appIdClientRegex: 'appIdClientRegex',\n    awsRegion: 'awsRegion',\n    userPoolId: 'userPoolId',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 9,
        "75": 19,
        "153": 2,
        "169": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "9d4faa4bd25e6d4fe71027b6eff4ccbe002f8043fc65619f4009bdcf7270d160"
    },
    "cf05a337f5ac206087402381998581a7f32e4bb16061a136dcca17827d77c412": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncognito_user_pool_config_property = appsync.CfnGraphQLApi.CognitoUserPoolConfigProperty(\n    app_id_client_regex=\"appIdClientRegex\",\n    aws_region=\"awsRegion\",\n    user_pool_id=\"userPoolId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCognitoUserPoolConfigProperty cognitoUserPoolConfigProperty = new CognitoUserPoolConfigProperty {\n    AppIdClientRegex = \"appIdClientRegex\",\n    AwsRegion = \"awsRegion\",\n    UserPoolId = \"userPoolId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCognitoUserPoolConfigProperty cognitoUserPoolConfigProperty = CognitoUserPoolConfigProperty.builder()\n        .appIdClientRegex(\"appIdClientRegex\")\n        .awsRegion(\"awsRegion\")\n        .userPoolId(\"userPoolId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncognitoUserPoolConfigProperty := &cognitoUserPoolConfigProperty{\n\tappIdClientRegex: jsii.String(\"appIdClientRegex\"),\n\tawsRegion: jsii.String(\"awsRegion\"),\n\tuserPoolId: jsii.String(\"userPoolId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cognitoUserPoolConfigProperty: appsync.CfnGraphQLApi.CognitoUserPoolConfigProperty = {\n  appIdClientRegex: 'appIdClientRegex',\n  awsRegion: 'awsRegion',\n  userPoolId: 'userPoolId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.CognitoUserPoolConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnGraphQLApi.CognitoUserPoolConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cognitoUserPoolConfigProperty: appsync.CfnGraphQLApi.CognitoUserPoolConfigProperty = {\n  appIdClientRegex: 'appIdClientRegex',\n  awsRegion: 'awsRegion',\n  userPoolId: 'userPoolId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "7e16ddd4f2905a365957252d3b192b57165cfb4659b400978e52d309c1502dfe"
    },
    "ed9e6ea5189de35d6fa5573c599f16bbd8ed25a9bf5bfc8389ba8fc8e7bd1808": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nlambda_authorizer_config_property = appsync.CfnGraphQLApi.LambdaAuthorizerConfigProperty(\n    authorizer_result_ttl_in_seconds=123,\n    authorizer_uri=\"authorizerUri\",\n    identity_validation_expression=\"identityValidationExpression\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nLambdaAuthorizerConfigProperty lambdaAuthorizerConfigProperty = new LambdaAuthorizerConfigProperty {\n    AuthorizerResultTtlInSeconds = 123,\n    AuthorizerUri = \"authorizerUri\",\n    IdentityValidationExpression = \"identityValidationExpression\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nLambdaAuthorizerConfigProperty lambdaAuthorizerConfigProperty = LambdaAuthorizerConfigProperty.builder()\n        .authorizerResultTtlInSeconds(123)\n        .authorizerUri(\"authorizerUri\")\n        .identityValidationExpression(\"identityValidationExpression\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nlambdaAuthorizerConfigProperty := &lambdaAuthorizerConfigProperty{\n\tauthorizerResultTtlInSeconds: jsii.Number(123),\n\tauthorizerUri: jsii.String(\"authorizerUri\"),\n\tidentityValidationExpression: jsii.String(\"identityValidationExpression\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst lambdaAuthorizerConfigProperty: appsync.CfnGraphQLApi.LambdaAuthorizerConfigProperty = {\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  identityValidationExpression: 'identityValidationExpression',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.LambdaAuthorizerConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnGraphQLApi.LambdaAuthorizerConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lambdaAuthorizerConfigProperty: appsync.CfnGraphQLApi.LambdaAuthorizerConfigProperty = {\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  identityValidationExpression: 'identityValidationExpression',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "768d9926851396af18f7824da83d44fb016e8e984489efebe3d37314342fa8c9"
    },
    "4c4dd3e4b7468f1c5d354e66248d978bebe42c13b45c3b27528701db2060f0d6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nlog_config_property = appsync.CfnGraphQLApi.LogConfigProperty(\n    cloud_watch_logs_role_arn=\"cloudWatchLogsRoleArn\",\n    exclude_verbose_content=False,\n    field_log_level=\"fieldLogLevel\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nLogConfigProperty logConfigProperty = new LogConfigProperty {\n    CloudWatchLogsRoleArn = \"cloudWatchLogsRoleArn\",\n    ExcludeVerboseContent = false,\n    FieldLogLevel = \"fieldLogLevel\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nLogConfigProperty logConfigProperty = LogConfigProperty.builder()\n        .cloudWatchLogsRoleArn(\"cloudWatchLogsRoleArn\")\n        .excludeVerboseContent(false)\n        .fieldLogLevel(\"fieldLogLevel\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nlogConfigProperty := &logConfigProperty{\n\tcloudWatchLogsRoleArn: jsii.String(\"cloudWatchLogsRoleArn\"),\n\texcludeVerboseContent: jsii.Boolean(false),\n\tfieldLogLevel: jsii.String(\"fieldLogLevel\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst logConfigProperty: appsync.CfnGraphQLApi.LogConfigProperty = {\n  cloudWatchLogsRoleArn: 'cloudWatchLogsRoleArn',\n  excludeVerboseContent: false,\n  fieldLogLevel: 'fieldLogLevel',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.LogConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnGraphQLApi.LogConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst logConfigProperty: appsync.CfnGraphQLApi.LogConfigProperty = {\n  cloudWatchLogsRoleArn: 'cloudWatchLogsRoleArn',\n  excludeVerboseContent: false,\n  fieldLogLevel: 'fieldLogLevel',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "412a92b0d1efa94e46b0089b51218f8f7018b09d7603d4bbb2b8b0f40b3cdbb1"
    },
    "6d324b051c4f45e9707c9c3292bd9eee3d82bb5f0075e6f90cdca242f9321576": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nopen_iDConnect_config_property = appsync.CfnGraphQLApi.OpenIDConnectConfigProperty(\n    auth_ttl=123,\n    client_id=\"clientId\",\n    iat_ttl=123,\n    issuer=\"issuer\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nOpenIDConnectConfigProperty openIDConnectConfigProperty = new OpenIDConnectConfigProperty {\n    AuthTtl = 123,\n    ClientId = \"clientId\",\n    IatTtl = 123,\n    Issuer = \"issuer\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nOpenIDConnectConfigProperty openIDConnectConfigProperty = OpenIDConnectConfigProperty.builder()\n        .authTtl(123)\n        .clientId(\"clientId\")\n        .iatTtl(123)\n        .issuer(\"issuer\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nopenIDConnectConfigProperty := &openIDConnectConfigProperty{\n\tauthTtl: jsii.Number(123),\n\tclientId: jsii.String(\"clientId\"),\n\tiatTtl: jsii.Number(123),\n\tissuer: jsii.String(\"issuer\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst openIDConnectConfigProperty: appsync.CfnGraphQLApi.OpenIDConnectConfigProperty = {\n  authTtl: 123,\n  clientId: 'clientId',\n  iatTtl: 123,\n  issuer: 'issuer',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.OpenIDConnectConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnGraphQLApi.OpenIDConnectConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst openIDConnectConfigProperty: appsync.CfnGraphQLApi.OpenIDConnectConfigProperty = {\n  authTtl: 123,\n  clientId: 'clientId',\n  iatTtl: 123,\n  issuer: 'issuer',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "f07b8937fba57fc2e60eca18253bcb29af148b3e863a0dbcaa690f33fe0f4166"
    },
    "23f78ec1fa542ce31763fa5f0022f334c52ee49372a6237464d47271889587fb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nuser_pool_config_property = appsync.CfnGraphQLApi.UserPoolConfigProperty(\n    app_id_client_regex=\"appIdClientRegex\",\n    aws_region=\"awsRegion\",\n    default_action=\"defaultAction\",\n    user_pool_id=\"userPoolId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nUserPoolConfigProperty userPoolConfigProperty = new UserPoolConfigProperty {\n    AppIdClientRegex = \"appIdClientRegex\",\n    AwsRegion = \"awsRegion\",\n    DefaultAction = \"defaultAction\",\n    UserPoolId = \"userPoolId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nUserPoolConfigProperty userPoolConfigProperty = UserPoolConfigProperty.builder()\n        .appIdClientRegex(\"appIdClientRegex\")\n        .awsRegion(\"awsRegion\")\n        .defaultAction(\"defaultAction\")\n        .userPoolId(\"userPoolId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nuserPoolConfigProperty := &userPoolConfigProperty{\n\tappIdClientRegex: jsii.String(\"appIdClientRegex\"),\n\tawsRegion: jsii.String(\"awsRegion\"),\n\tdefaultAction: jsii.String(\"defaultAction\"),\n\tuserPoolId: jsii.String(\"userPoolId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst userPoolConfigProperty: appsync.CfnGraphQLApi.UserPoolConfigProperty = {\n  appIdClientRegex: 'appIdClientRegex',\n  awsRegion: 'awsRegion',\n  defaultAction: 'defaultAction',\n  userPoolId: 'userPoolId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApi.UserPoolConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnGraphQLApi.UserPoolConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst userPoolConfigProperty: appsync.CfnGraphQLApi.UserPoolConfigProperty = {\n  appIdClientRegex: 'appIdClientRegex',\n  awsRegion: 'awsRegion',\n  defaultAction: 'defaultAction',\n  userPoolId: 'userPoolId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "e738d346817ead23d874209fdcd5c44da088891de81ca53c097c5406e692ecd8"
    },
    "2b780a627e0ae570356358f85b6ed322e45c93caba75f219ff91fa0e6f035ca2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_graph_qLApi_props = appsync.CfnGraphQLApiProps(\n    authentication_type=\"authenticationType\",\n    name=\"name\",\n\n    # the properties below are optional\n    additional_authentication_providers=[appsync.CfnGraphQLApi.AdditionalAuthenticationProviderProperty(\n        authentication_type=\"authenticationType\",\n\n        # the properties below are optional\n        lambda_authorizer_config=appsync.CfnGraphQLApi.LambdaAuthorizerConfigProperty(\n            authorizer_result_ttl_in_seconds=123,\n            authorizer_uri=\"authorizerUri\",\n            identity_validation_expression=\"identityValidationExpression\"\n        ),\n        open_id_connect_config=appsync.CfnGraphQLApi.OpenIDConnectConfigProperty(\n            auth_ttl=123,\n            client_id=\"clientId\",\n            iat_ttl=123,\n            issuer=\"issuer\"\n        ),\n        user_pool_config=appsync.CfnGraphQLApi.CognitoUserPoolConfigProperty(\n            app_id_client_regex=\"appIdClientRegex\",\n            aws_region=\"awsRegion\",\n            user_pool_id=\"userPoolId\"\n        )\n    )],\n    lambda_authorizer_config=appsync.CfnGraphQLApi.LambdaAuthorizerConfigProperty(\n        authorizer_result_ttl_in_seconds=123,\n        authorizer_uri=\"authorizerUri\",\n        identity_validation_expression=\"identityValidationExpression\"\n    ),\n    log_config=appsync.CfnGraphQLApi.LogConfigProperty(\n        cloud_watch_logs_role_arn=\"cloudWatchLogsRoleArn\",\n        exclude_verbose_content=False,\n        field_log_level=\"fieldLogLevel\"\n    ),\n    open_id_connect_config=appsync.CfnGraphQLApi.OpenIDConnectConfigProperty(\n        auth_ttl=123,\n        client_id=\"clientId\",\n        iat_ttl=123,\n        issuer=\"issuer\"\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    user_pool_config=appsync.CfnGraphQLApi.UserPoolConfigProperty(\n        app_id_client_regex=\"appIdClientRegex\",\n        aws_region=\"awsRegion\",\n        default_action=\"defaultAction\",\n        user_pool_id=\"userPoolId\"\n    ),\n    xray_enabled=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnGraphQLApiProps cfnGraphQLApiProps = new CfnGraphQLApiProps {\n    AuthenticationType = \"authenticationType\",\n    Name = \"name\",\n\n    // the properties below are optional\n    AdditionalAuthenticationProviders = new [] { new AdditionalAuthenticationProviderProperty {\n        AuthenticationType = \"authenticationType\",\n\n        // the properties below are optional\n        LambdaAuthorizerConfig = new LambdaAuthorizerConfigProperty {\n            AuthorizerResultTtlInSeconds = 123,\n            AuthorizerUri = \"authorizerUri\",\n            IdentityValidationExpression = \"identityValidationExpression\"\n        },\n        OpenIdConnectConfig = new OpenIDConnectConfigProperty {\n            AuthTtl = 123,\n            ClientId = \"clientId\",\n            IatTtl = 123,\n            Issuer = \"issuer\"\n        },\n        UserPoolConfig = new CognitoUserPoolConfigProperty {\n            AppIdClientRegex = \"appIdClientRegex\",\n            AwsRegion = \"awsRegion\",\n            UserPoolId = \"userPoolId\"\n        }\n    } },\n    LambdaAuthorizerConfig = new LambdaAuthorizerConfigProperty {\n        AuthorizerResultTtlInSeconds = 123,\n        AuthorizerUri = \"authorizerUri\",\n        IdentityValidationExpression = \"identityValidationExpression\"\n    },\n    LogConfig = new LogConfigProperty {\n        CloudWatchLogsRoleArn = \"cloudWatchLogsRoleArn\",\n        ExcludeVerboseContent = false,\n        FieldLogLevel = \"fieldLogLevel\"\n    },\n    OpenIdConnectConfig = new OpenIDConnectConfigProperty {\n        AuthTtl = 123,\n        ClientId = \"clientId\",\n        IatTtl = 123,\n        Issuer = \"issuer\"\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    UserPoolConfig = new UserPoolConfigProperty {\n        AppIdClientRegex = \"appIdClientRegex\",\n        AwsRegion = \"awsRegion\",\n        DefaultAction = \"defaultAction\",\n        UserPoolId = \"userPoolId\"\n    },\n    XrayEnabled = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnGraphQLApiProps cfnGraphQLApiProps = CfnGraphQLApiProps.builder()\n        .authenticationType(\"authenticationType\")\n        .name(\"name\")\n\n        // the properties below are optional\n        .additionalAuthenticationProviders(List.of(AdditionalAuthenticationProviderProperty.builder()\n                .authenticationType(\"authenticationType\")\n\n                // the properties below are optional\n                .lambdaAuthorizerConfig(LambdaAuthorizerConfigProperty.builder()\n                        .authorizerResultTtlInSeconds(123)\n                        .authorizerUri(\"authorizerUri\")\n                        .identityValidationExpression(\"identityValidationExpression\")\n                        .build())\n                .openIdConnectConfig(OpenIDConnectConfigProperty.builder()\n                        .authTtl(123)\n                        .clientId(\"clientId\")\n                        .iatTtl(123)\n                        .issuer(\"issuer\")\n                        .build())\n                .userPoolConfig(CognitoUserPoolConfigProperty.builder()\n                        .appIdClientRegex(\"appIdClientRegex\")\n                        .awsRegion(\"awsRegion\")\n                        .userPoolId(\"userPoolId\")\n                        .build())\n                .build()))\n        .lambdaAuthorizerConfig(LambdaAuthorizerConfigProperty.builder()\n                .authorizerResultTtlInSeconds(123)\n                .authorizerUri(\"authorizerUri\")\n                .identityValidationExpression(\"identityValidationExpression\")\n                .build())\n        .logConfig(LogConfigProperty.builder()\n                .cloudWatchLogsRoleArn(\"cloudWatchLogsRoleArn\")\n                .excludeVerboseContent(false)\n                .fieldLogLevel(\"fieldLogLevel\")\n                .build())\n        .openIdConnectConfig(OpenIDConnectConfigProperty.builder()\n                .authTtl(123)\n                .clientId(\"clientId\")\n                .iatTtl(123)\n                .issuer(\"issuer\")\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .userPoolConfig(UserPoolConfigProperty.builder()\n                .appIdClientRegex(\"appIdClientRegex\")\n                .awsRegion(\"awsRegion\")\n                .defaultAction(\"defaultAction\")\n                .userPoolId(\"userPoolId\")\n                .build())\n        .xrayEnabled(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnGraphQLApiProps := &cfnGraphQLApiProps{\n\tauthenticationType: jsii.String(\"authenticationType\"),\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tadditionalAuthenticationProviders: []interface{}{\n\t\t&additionalAuthenticationProviderProperty{\n\t\t\tauthenticationType: jsii.String(\"authenticationType\"),\n\n\t\t\t// the properties below are optional\n\t\t\tlambdaAuthorizerConfig: &lambdaAuthorizerConfigProperty{\n\t\t\t\tauthorizerResultTtlInSeconds: jsii.Number(123),\n\t\t\t\tauthorizerUri: jsii.String(\"authorizerUri\"),\n\t\t\t\tidentityValidationExpression: jsii.String(\"identityValidationExpression\"),\n\t\t\t},\n\t\t\topenIdConnectConfig: &openIDConnectConfigProperty{\n\t\t\t\tauthTtl: jsii.Number(123),\n\t\t\t\tclientId: jsii.String(\"clientId\"),\n\t\t\t\tiatTtl: jsii.Number(123),\n\t\t\t\tissuer: jsii.String(\"issuer\"),\n\t\t\t},\n\t\t\tuserPoolConfig: &cognitoUserPoolConfigProperty{\n\t\t\t\tappIdClientRegex: jsii.String(\"appIdClientRegex\"),\n\t\t\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\t\t\tuserPoolId: jsii.String(\"userPoolId\"),\n\t\t\t},\n\t\t},\n\t},\n\tlambdaAuthorizerConfig: &lambdaAuthorizerConfigProperty{\n\t\tauthorizerResultTtlInSeconds: jsii.Number(123),\n\t\tauthorizerUri: jsii.String(\"authorizerUri\"),\n\t\tidentityValidationExpression: jsii.String(\"identityValidationExpression\"),\n\t},\n\tlogConfig: &logConfigProperty{\n\t\tcloudWatchLogsRoleArn: jsii.String(\"cloudWatchLogsRoleArn\"),\n\t\texcludeVerboseContent: jsii.Boolean(false),\n\t\tfieldLogLevel: jsii.String(\"fieldLogLevel\"),\n\t},\n\topenIdConnectConfig: &openIDConnectConfigProperty{\n\t\tauthTtl: jsii.Number(123),\n\t\tclientId: jsii.String(\"clientId\"),\n\t\tiatTtl: jsii.Number(123),\n\t\tissuer: jsii.String(\"issuer\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tuserPoolConfig: &userPoolConfigProperty{\n\t\tappIdClientRegex: jsii.String(\"appIdClientRegex\"),\n\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\tdefaultAction: jsii.String(\"defaultAction\"),\n\t\tuserPoolId: jsii.String(\"userPoolId\"),\n\t},\n\txrayEnabled: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnGraphQLApiProps: appsync.CfnGraphQLApiProps = {\n  authenticationType: 'authenticationType',\n  name: 'name',\n\n  // the properties below are optional\n  additionalAuthenticationProviders: [{\n    authenticationType: 'authenticationType',\n\n    // the properties below are optional\n    lambdaAuthorizerConfig: {\n      authorizerResultTtlInSeconds: 123,\n      authorizerUri: 'authorizerUri',\n      identityValidationExpression: 'identityValidationExpression',\n    },\n    openIdConnectConfig: {\n      authTtl: 123,\n      clientId: 'clientId',\n      iatTtl: 123,\n      issuer: 'issuer',\n    },\n    userPoolConfig: {\n      appIdClientRegex: 'appIdClientRegex',\n      awsRegion: 'awsRegion',\n      userPoolId: 'userPoolId',\n    },\n  }],\n  lambdaAuthorizerConfig: {\n    authorizerResultTtlInSeconds: 123,\n    authorizerUri: 'authorizerUri',\n    identityValidationExpression: 'identityValidationExpression',\n  },\n  logConfig: {\n    cloudWatchLogsRoleArn: 'cloudWatchLogsRoleArn',\n    excludeVerboseContent: false,\n    fieldLogLevel: 'fieldLogLevel',\n  },\n  openIdConnectConfig: {\n    authTtl: 123,\n    clientId: 'clientId',\n    iatTtl: 123,\n    issuer: 'issuer',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  userPoolConfig: {\n    appIdClientRegex: 'appIdClientRegex',\n    awsRegion: 'awsRegion',\n    defaultAction: 'defaultAction',\n    userPoolId: 'userPoolId',\n  },\n  xrayEnabled: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnGraphQLApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnGraphQLApiProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnGraphQLApiProps: appsync.CfnGraphQLApiProps = {\n  authenticationType: 'authenticationType',\n  name: 'name',\n\n  // the properties below are optional\n  additionalAuthenticationProviders: [{\n    authenticationType: 'authenticationType',\n\n    // the properties below are optional\n    lambdaAuthorizerConfig: {\n      authorizerResultTtlInSeconds: 123,\n      authorizerUri: 'authorizerUri',\n      identityValidationExpression: 'identityValidationExpression',\n    },\n    openIdConnectConfig: {\n      authTtl: 123,\n      clientId: 'clientId',\n      iatTtl: 123,\n      issuer: 'issuer',\n    },\n    userPoolConfig: {\n      appIdClientRegex: 'appIdClientRegex',\n      awsRegion: 'awsRegion',\n      userPoolId: 'userPoolId',\n    },\n  }],\n  lambdaAuthorizerConfig: {\n    authorizerResultTtlInSeconds: 123,\n    authorizerUri: 'authorizerUri',\n    identityValidationExpression: 'identityValidationExpression',\n  },\n  logConfig: {\n    cloudWatchLogsRoleArn: 'cloudWatchLogsRoleArn',\n    excludeVerboseContent: false,\n    fieldLogLevel: 'fieldLogLevel',\n  },\n  openIdConnectConfig: {\n    authTtl: 123,\n    clientId: 'clientId',\n    iatTtl: 123,\n    issuer: 'issuer',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  userPoolConfig: {\n    appIdClientRegex: 'appIdClientRegex',\n    awsRegion: 'awsRegion',\n    defaultAction: 'defaultAction',\n    userPoolId: 'userPoolId',\n  },\n  xrayEnabled: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 23,
        "75": 43,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 10,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 39,
        "290": 1
      },
      "fqnsFingerprint": "95681c2595ab1a5155c62d941810d310d0f15163738c2b68450ef46f3deb22e9"
    },
    "5c0ef90ed1fcaf0dffca0346abc8064179fb62b0eb0bc593636781b250dd9a53": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_graph_qLSchema = appsync.CfnGraphQLSchema(self, \"MyCfnGraphQLSchema\",\n    api_id=\"apiId\",\n\n    # the properties below are optional\n    definition=\"definition\",\n    definition_s3_location=\"definitionS3Location\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnGraphQLSchema cfnGraphQLSchema = new CfnGraphQLSchema(this, \"MyCfnGraphQLSchema\", new CfnGraphQLSchemaProps {\n    ApiId = \"apiId\",\n\n    // the properties below are optional\n    Definition = \"definition\",\n    DefinitionS3Location = \"definitionS3Location\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnGraphQLSchema cfnGraphQLSchema = CfnGraphQLSchema.Builder.create(this, \"MyCfnGraphQLSchema\")\n        .apiId(\"apiId\")\n\n        // the properties below are optional\n        .definition(\"definition\")\n        .definitionS3Location(\"definitionS3Location\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnGraphQLSchema := appsync.NewCfnGraphQLSchema(this, jsii.String(\"MyCfnGraphQLSchema\"), &cfnGraphQLSchemaProps{\n\tapiId: jsii.String(\"apiId\"),\n\n\t// the properties below are optional\n\tdefinition: jsii.String(\"definition\"),\n\tdefinitionS3Location: jsii.String(\"definitionS3Location\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnGraphQLSchema = new appsync.CfnGraphQLSchema(this, 'MyCfnGraphQLSchema', {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  definition: 'definition',\n  definitionS3Location: 'definitionS3Location',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnGraphQLSchema"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnGraphQLSchema",
        "@aws-cdk/aws-appsync.CfnGraphQLSchemaProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnGraphQLSchema = new appsync.CfnGraphQLSchema(this, 'MyCfnGraphQLSchema', {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  definition: 'definition',\n  definitionS3Location: 'definitionS3Location',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "bc3aa8a620698e3b66ea0508434695d44cf6cc67049683ae1ff4dc306106aacd"
    },
    "6b624f7ea6d705372588acb8dcf12df8d560370c79d8425a480ff2b3d21a8ca4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_graph_qLSchema_props = appsync.CfnGraphQLSchemaProps(\n    api_id=\"apiId\",\n\n    # the properties below are optional\n    definition=\"definition\",\n    definition_s3_location=\"definitionS3Location\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnGraphQLSchemaProps cfnGraphQLSchemaProps = new CfnGraphQLSchemaProps {\n    ApiId = \"apiId\",\n\n    // the properties below are optional\n    Definition = \"definition\",\n    DefinitionS3Location = \"definitionS3Location\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnGraphQLSchemaProps cfnGraphQLSchemaProps = CfnGraphQLSchemaProps.builder()\n        .apiId(\"apiId\")\n\n        // the properties below are optional\n        .definition(\"definition\")\n        .definitionS3Location(\"definitionS3Location\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnGraphQLSchemaProps := &cfnGraphQLSchemaProps{\n\tapiId: jsii.String(\"apiId\"),\n\n\t// the properties below are optional\n\tdefinition: jsii.String(\"definition\"),\n\tdefinitionS3Location: jsii.String(\"definitionS3Location\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnGraphQLSchemaProps: appsync.CfnGraphQLSchemaProps = {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  definition: 'definition',\n  definitionS3Location: 'definitionS3Location',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnGraphQLSchemaProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnGraphQLSchemaProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnGraphQLSchemaProps: appsync.CfnGraphQLSchemaProps = {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  definition: 'definition',\n  definitionS3Location: 'definitionS3Location',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "cb3b2be7752216e24ef7f0505b75a033790487c2fc6ad01fcefe79715dc77698"
    },
    "8139ea9802bd149fcf83327a7cb31f362740c440ce1af8a7241033f72c26064a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_resolver = appsync.CfnResolver(self, \"MyCfnResolver\",\n    api_id=\"apiId\",\n    field_name=\"fieldName\",\n    type_name=\"typeName\",\n\n    # the properties below are optional\n    caching_config=appsync.CfnResolver.CachingConfigProperty(\n        ttl=123,\n\n        # the properties below are optional\n        caching_keys=[\"cachingKeys\"]\n    ),\n    data_source_name=\"dataSourceName\",\n    kind=\"kind\",\n    max_batch_size=123,\n    pipeline_config=appsync.CfnResolver.PipelineConfigProperty(\n        functions=[\"functions\"]\n    ),\n    request_mapping_template=\"requestMappingTemplate\",\n    request_mapping_template_s3_location=\"requestMappingTemplateS3Location\",\n    response_mapping_template=\"responseMappingTemplate\",\n    response_mapping_template_s3_location=\"responseMappingTemplateS3Location\",\n    sync_config=appsync.CfnResolver.SyncConfigProperty(\n        conflict_detection=\"conflictDetection\",\n\n        # the properties below are optional\n        conflict_handler=\"conflictHandler\",\n        lambda_conflict_handler_config=appsync.CfnResolver.LambdaConflictHandlerConfigProperty(\n            lambda_conflict_handler_arn=\"lambdaConflictHandlerArn\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnResolver cfnResolver = new CfnResolver(this, \"MyCfnResolver\", new CfnResolverProps {\n    ApiId = \"apiId\",\n    FieldName = \"fieldName\",\n    TypeName = \"typeName\",\n\n    // the properties below are optional\n    CachingConfig = new CachingConfigProperty {\n        Ttl = 123,\n\n        // the properties below are optional\n        CachingKeys = new [] { \"cachingKeys\" }\n    },\n    DataSourceName = \"dataSourceName\",\n    Kind = \"kind\",\n    MaxBatchSize = 123,\n    PipelineConfig = new PipelineConfigProperty {\n        Functions = new [] { \"functions\" }\n    },\n    RequestMappingTemplate = \"requestMappingTemplate\",\n    RequestMappingTemplateS3Location = \"requestMappingTemplateS3Location\",\n    ResponseMappingTemplate = \"responseMappingTemplate\",\n    ResponseMappingTemplateS3Location = \"responseMappingTemplateS3Location\",\n    SyncConfig = new SyncConfigProperty {\n        ConflictDetection = \"conflictDetection\",\n\n        // the properties below are optional\n        ConflictHandler = \"conflictHandler\",\n        LambdaConflictHandlerConfig = new LambdaConflictHandlerConfigProperty {\n            LambdaConflictHandlerArn = \"lambdaConflictHandlerArn\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnResolver cfnResolver = CfnResolver.Builder.create(this, \"MyCfnResolver\")\n        .apiId(\"apiId\")\n        .fieldName(\"fieldName\")\n        .typeName(\"typeName\")\n\n        // the properties below are optional\n        .cachingConfig(CachingConfigProperty.builder()\n                .ttl(123)\n\n                // the properties below are optional\n                .cachingKeys(List.of(\"cachingKeys\"))\n                .build())\n        .dataSourceName(\"dataSourceName\")\n        .kind(\"kind\")\n        .maxBatchSize(123)\n        .pipelineConfig(PipelineConfigProperty.builder()\n                .functions(List.of(\"functions\"))\n                .build())\n        .requestMappingTemplate(\"requestMappingTemplate\")\n        .requestMappingTemplateS3Location(\"requestMappingTemplateS3Location\")\n        .responseMappingTemplate(\"responseMappingTemplate\")\n        .responseMappingTemplateS3Location(\"responseMappingTemplateS3Location\")\n        .syncConfig(SyncConfigProperty.builder()\n                .conflictDetection(\"conflictDetection\")\n\n                // the properties below are optional\n                .conflictHandler(\"conflictHandler\")\n                .lambdaConflictHandlerConfig(LambdaConflictHandlerConfigProperty.builder()\n                        .lambdaConflictHandlerArn(\"lambdaConflictHandlerArn\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnResolver := appsync.NewCfnResolver(this, jsii.String(\"MyCfnResolver\"), &cfnResolverProps{\n\tapiId: jsii.String(\"apiId\"),\n\tfieldName: jsii.String(\"fieldName\"),\n\ttypeName: jsii.String(\"typeName\"),\n\n\t// the properties below are optional\n\tcachingConfig: &cachingConfigProperty{\n\t\tttl: jsii.Number(123),\n\n\t\t// the properties below are optional\n\t\tcachingKeys: []*string{\n\t\t\tjsii.String(\"cachingKeys\"),\n\t\t},\n\t},\n\tdataSourceName: jsii.String(\"dataSourceName\"),\n\tkind: jsii.String(\"kind\"),\n\tmaxBatchSize: jsii.Number(123),\n\tpipelineConfig: &pipelineConfigProperty{\n\t\tfunctions: []*string{\n\t\t\tjsii.String(\"functions\"),\n\t\t},\n\t},\n\trequestMappingTemplate: jsii.String(\"requestMappingTemplate\"),\n\trequestMappingTemplateS3Location: jsii.String(\"requestMappingTemplateS3Location\"),\n\tresponseMappingTemplate: jsii.String(\"responseMappingTemplate\"),\n\tresponseMappingTemplateS3Location: jsii.String(\"responseMappingTemplateS3Location\"),\n\tsyncConfig: &syncConfigProperty{\n\t\tconflictDetection: jsii.String(\"conflictDetection\"),\n\n\t\t// the properties below are optional\n\t\tconflictHandler: jsii.String(\"conflictHandler\"),\n\t\tlambdaConflictHandlerConfig: &lambdaConflictHandlerConfigProperty{\n\t\t\tlambdaConflictHandlerArn: jsii.String(\"lambdaConflictHandlerArn\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnResolver = new appsync.CfnResolver(this, 'MyCfnResolver', {\n  apiId: 'apiId',\n  fieldName: 'fieldName',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  cachingConfig: {\n    ttl: 123,\n\n    // the properties below are optional\n    cachingKeys: ['cachingKeys'],\n  },\n  dataSourceName: 'dataSourceName',\n  kind: 'kind',\n  maxBatchSize: 123,\n  pipelineConfig: {\n    functions: ['functions'],\n  },\n  requestMappingTemplate: 'requestMappingTemplate',\n  requestMappingTemplateS3Location: 'requestMappingTemplateS3Location',\n  responseMappingTemplate: 'responseMappingTemplate',\n  responseMappingTemplateS3Location: 'responseMappingTemplateS3Location',\n  syncConfig: {\n    conflictDetection: 'conflictDetection',\n\n    // the properties below are optional\n    conflictHandler: 'conflictHandler',\n    lambdaConflictHandlerConfig: {\n      lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnResolver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnResolver",
        "@aws-cdk/aws-appsync.CfnResolverProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnResolver = new appsync.CfnResolver(this, 'MyCfnResolver', {\n  apiId: 'apiId',\n  fieldName: 'fieldName',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  cachingConfig: {\n    ttl: 123,\n\n    // the properties below are optional\n    cachingKeys: ['cachingKeys'],\n  },\n  dataSourceName: 'dataSourceName',\n  kind: 'kind',\n  maxBatchSize: 123,\n  pipelineConfig: {\n    functions: ['functions'],\n  },\n  requestMappingTemplate: 'requestMappingTemplate',\n  requestMappingTemplateS3Location: 'requestMappingTemplateS3Location',\n  responseMappingTemplate: 'responseMappingTemplate',\n  responseMappingTemplateS3Location: 'responseMappingTemplateS3Location',\n  syncConfig: {\n    conflictDetection: 'conflictDetection',\n\n    // the properties below are optional\n    conflictHandler: 'conflictHandler',\n    lambdaConflictHandlerConfig: {\n      lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 16,
        "75": 24,
        "104": 1,
        "192": 2,
        "193": 5,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 20,
        "290": 1
      },
      "fqnsFingerprint": "7c22c174a082c64b6220c7dcebc3257d4f5fc0f0b9108435db6c7fda0a66ea73"
    },
    "7aafae134b64fde8e085a3aaa4e16cc3325f4e4bd62dff6857b1b740da5273f9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncaching_config_property = appsync.CfnResolver.CachingConfigProperty(\n    ttl=123,\n\n    # the properties below are optional\n    caching_keys=[\"cachingKeys\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCachingConfigProperty cachingConfigProperty = new CachingConfigProperty {\n    Ttl = 123,\n\n    // the properties below are optional\n    CachingKeys = new [] { \"cachingKeys\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCachingConfigProperty cachingConfigProperty = CachingConfigProperty.builder()\n        .ttl(123)\n\n        // the properties below are optional\n        .cachingKeys(List.of(\"cachingKeys\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncachingConfigProperty := &cachingConfigProperty{\n\tttl: jsii.Number(123),\n\n\t// the properties below are optional\n\tcachingKeys: []*string{\n\t\tjsii.String(\"cachingKeys\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cachingConfigProperty: appsync.CfnResolver.CachingConfigProperty = {\n  ttl: 123,\n\n  // the properties below are optional\n  cachingKeys: ['cachingKeys'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnResolver.CachingConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnResolver.CachingConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cachingConfigProperty: appsync.CfnResolver.CachingConfigProperty = {\n  ttl: 123,\n\n  // the properties below are optional\n  cachingKeys: ['cachingKeys'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "fd62f32562289c0a976696ca1ea2ebb21f21d3b49ce720c70ffbb304df77fe8c"
    },
    "c8209e00af514a48c60e5c4401b5520deae849d26c87f2de514fa6e8b6fd0040": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nlambda_conflict_handler_config_property = appsync.CfnResolver.LambdaConflictHandlerConfigProperty(\n    lambda_conflict_handler_arn=\"lambdaConflictHandlerArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nLambdaConflictHandlerConfigProperty lambdaConflictHandlerConfigProperty = new LambdaConflictHandlerConfigProperty {\n    LambdaConflictHandlerArn = \"lambdaConflictHandlerArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nLambdaConflictHandlerConfigProperty lambdaConflictHandlerConfigProperty = LambdaConflictHandlerConfigProperty.builder()\n        .lambdaConflictHandlerArn(\"lambdaConflictHandlerArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nlambdaConflictHandlerConfigProperty := &lambdaConflictHandlerConfigProperty{\n\tlambdaConflictHandlerArn: jsii.String(\"lambdaConflictHandlerArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst lambdaConflictHandlerConfigProperty: appsync.CfnResolver.LambdaConflictHandlerConfigProperty = {\n  lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnResolver.LambdaConflictHandlerConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnResolver.LambdaConflictHandlerConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lambdaConflictHandlerConfigProperty: appsync.CfnResolver.LambdaConflictHandlerConfigProperty = {\n  lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "159494722e75d87207528a06bcb682c324504f87d2c8d774d9b5d768ed5d465d"
    },
    "16af45b18a9607f35b83fc765edc5b12c1abe3f0efe7c6cc557478ae149033c8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\npipeline_config_property = appsync.CfnResolver.PipelineConfigProperty(\n    functions=[\"functions\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nPipelineConfigProperty pipelineConfigProperty = new PipelineConfigProperty {\n    Functions = new [] { \"functions\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nPipelineConfigProperty pipelineConfigProperty = PipelineConfigProperty.builder()\n        .functions(List.of(\"functions\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\npipelineConfigProperty := &pipelineConfigProperty{\n\tfunctions: []*string{\n\t\tjsii.String(\"functions\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst pipelineConfigProperty: appsync.CfnResolver.PipelineConfigProperty = {\n  functions: ['functions'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnResolver.PipelineConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnResolver.PipelineConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst pipelineConfigProperty: appsync.CfnResolver.PipelineConfigProperty = {\n  functions: ['functions'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "5b80b098bc65fd344afc27704db1629de33a927b810977f398034661d59f1b52"
    },
    "64226d135a3208924c3f5c67717609bc28c09ec3e51336ec267f4fd174d4b2ce": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nsync_config_property = appsync.CfnResolver.SyncConfigProperty(\n    conflict_detection=\"conflictDetection\",\n\n    # the properties below are optional\n    conflict_handler=\"conflictHandler\",\n    lambda_conflict_handler_config=appsync.CfnResolver.LambdaConflictHandlerConfigProperty(\n        lambda_conflict_handler_arn=\"lambdaConflictHandlerArn\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nSyncConfigProperty syncConfigProperty = new SyncConfigProperty {\n    ConflictDetection = \"conflictDetection\",\n\n    // the properties below are optional\n    ConflictHandler = \"conflictHandler\",\n    LambdaConflictHandlerConfig = new LambdaConflictHandlerConfigProperty {\n        LambdaConflictHandlerArn = \"lambdaConflictHandlerArn\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nSyncConfigProperty syncConfigProperty = SyncConfigProperty.builder()\n        .conflictDetection(\"conflictDetection\")\n\n        // the properties below are optional\n        .conflictHandler(\"conflictHandler\")\n        .lambdaConflictHandlerConfig(LambdaConflictHandlerConfigProperty.builder()\n                .lambdaConflictHandlerArn(\"lambdaConflictHandlerArn\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nsyncConfigProperty := &syncConfigProperty{\n\tconflictDetection: jsii.String(\"conflictDetection\"),\n\n\t// the properties below are optional\n\tconflictHandler: jsii.String(\"conflictHandler\"),\n\tlambdaConflictHandlerConfig: &lambdaConflictHandlerConfigProperty{\n\t\tlambdaConflictHandlerArn: jsii.String(\"lambdaConflictHandlerArn\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst syncConfigProperty: appsync.CfnResolver.SyncConfigProperty = {\n  conflictDetection: 'conflictDetection',\n\n  // the properties below are optional\n  conflictHandler: 'conflictHandler',\n  lambdaConflictHandlerConfig: {\n    lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnResolver.SyncConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnResolver.SyncConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst syncConfigProperty: appsync.CfnResolver.SyncConfigProperty = {\n  conflictDetection: 'conflictDetection',\n\n  // the properties below are optional\n  conflictHandler: 'conflictHandler',\n  lambdaConflictHandlerConfig: {\n    lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "a390f7e7365dfc7a443d4e3e63409cbef8408ff4396c244713b8b8ea26dc9433"
    },
    "d15a547797390576c600c53daef83ce79b60fa313264ac52154a6e0efaa66c9b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ncfn_resolver_props = appsync.CfnResolverProps(\n    api_id=\"apiId\",\n    field_name=\"fieldName\",\n    type_name=\"typeName\",\n\n    # the properties below are optional\n    caching_config=appsync.CfnResolver.CachingConfigProperty(\n        ttl=123,\n\n        # the properties below are optional\n        caching_keys=[\"cachingKeys\"]\n    ),\n    data_source_name=\"dataSourceName\",\n    kind=\"kind\",\n    max_batch_size=123,\n    pipeline_config=appsync.CfnResolver.PipelineConfigProperty(\n        functions=[\"functions\"]\n    ),\n    request_mapping_template=\"requestMappingTemplate\",\n    request_mapping_template_s3_location=\"requestMappingTemplateS3Location\",\n    response_mapping_template=\"responseMappingTemplate\",\n    response_mapping_template_s3_location=\"responseMappingTemplateS3Location\",\n    sync_config=appsync.CfnResolver.SyncConfigProperty(\n        conflict_detection=\"conflictDetection\",\n\n        # the properties below are optional\n        conflict_handler=\"conflictHandler\",\n        lambda_conflict_handler_config=appsync.CfnResolver.LambdaConflictHandlerConfigProperty(\n            lambda_conflict_handler_arn=\"lambdaConflictHandlerArn\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nCfnResolverProps cfnResolverProps = new CfnResolverProps {\n    ApiId = \"apiId\",\n    FieldName = \"fieldName\",\n    TypeName = \"typeName\",\n\n    // the properties below are optional\n    CachingConfig = new CachingConfigProperty {\n        Ttl = 123,\n\n        // the properties below are optional\n        CachingKeys = new [] { \"cachingKeys\" }\n    },\n    DataSourceName = \"dataSourceName\",\n    Kind = \"kind\",\n    MaxBatchSize = 123,\n    PipelineConfig = new PipelineConfigProperty {\n        Functions = new [] { \"functions\" }\n    },\n    RequestMappingTemplate = \"requestMappingTemplate\",\n    RequestMappingTemplateS3Location = \"requestMappingTemplateS3Location\",\n    ResponseMappingTemplate = \"responseMappingTemplate\",\n    ResponseMappingTemplateS3Location = \"responseMappingTemplateS3Location\",\n    SyncConfig = new SyncConfigProperty {\n        ConflictDetection = \"conflictDetection\",\n\n        // the properties below are optional\n        ConflictHandler = \"conflictHandler\",\n        LambdaConflictHandlerConfig = new LambdaConflictHandlerConfigProperty {\n            LambdaConflictHandlerArn = \"lambdaConflictHandlerArn\"\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nCfnResolverProps cfnResolverProps = CfnResolverProps.builder()\n        .apiId(\"apiId\")\n        .fieldName(\"fieldName\")\n        .typeName(\"typeName\")\n\n        // the properties below are optional\n        .cachingConfig(CachingConfigProperty.builder()\n                .ttl(123)\n\n                // the properties below are optional\n                .cachingKeys(List.of(\"cachingKeys\"))\n                .build())\n        .dataSourceName(\"dataSourceName\")\n        .kind(\"kind\")\n        .maxBatchSize(123)\n        .pipelineConfig(PipelineConfigProperty.builder()\n                .functions(List.of(\"functions\"))\n                .build())\n        .requestMappingTemplate(\"requestMappingTemplate\")\n        .requestMappingTemplateS3Location(\"requestMappingTemplateS3Location\")\n        .responseMappingTemplate(\"responseMappingTemplate\")\n        .responseMappingTemplateS3Location(\"responseMappingTemplateS3Location\")\n        .syncConfig(SyncConfigProperty.builder()\n                .conflictDetection(\"conflictDetection\")\n\n                // the properties below are optional\n                .conflictHandler(\"conflictHandler\")\n                .lambdaConflictHandlerConfig(LambdaConflictHandlerConfigProperty.builder()\n                        .lambdaConflictHandlerArn(\"lambdaConflictHandlerArn\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ncfnResolverProps := &cfnResolverProps{\n\tapiId: jsii.String(\"apiId\"),\n\tfieldName: jsii.String(\"fieldName\"),\n\ttypeName: jsii.String(\"typeName\"),\n\n\t// the properties below are optional\n\tcachingConfig: &cachingConfigProperty{\n\t\tttl: jsii.Number(123),\n\n\t\t// the properties below are optional\n\t\tcachingKeys: []*string{\n\t\t\tjsii.String(\"cachingKeys\"),\n\t\t},\n\t},\n\tdataSourceName: jsii.String(\"dataSourceName\"),\n\tkind: jsii.String(\"kind\"),\n\tmaxBatchSize: jsii.Number(123),\n\tpipelineConfig: &pipelineConfigProperty{\n\t\tfunctions: []*string{\n\t\t\tjsii.String(\"functions\"),\n\t\t},\n\t},\n\trequestMappingTemplate: jsii.String(\"requestMappingTemplate\"),\n\trequestMappingTemplateS3Location: jsii.String(\"requestMappingTemplateS3Location\"),\n\tresponseMappingTemplate: jsii.String(\"responseMappingTemplate\"),\n\tresponseMappingTemplateS3Location: jsii.String(\"responseMappingTemplateS3Location\"),\n\tsyncConfig: &syncConfigProperty{\n\t\tconflictDetection: jsii.String(\"conflictDetection\"),\n\n\t\t// the properties below are optional\n\t\tconflictHandler: jsii.String(\"conflictHandler\"),\n\t\tlambdaConflictHandlerConfig: &lambdaConflictHandlerConfigProperty{\n\t\t\tlambdaConflictHandlerArn: jsii.String(\"lambdaConflictHandlerArn\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst cfnResolverProps: appsync.CfnResolverProps = {\n  apiId: 'apiId',\n  fieldName: 'fieldName',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  cachingConfig: {\n    ttl: 123,\n\n    // the properties below are optional\n    cachingKeys: ['cachingKeys'],\n  },\n  dataSourceName: 'dataSourceName',\n  kind: 'kind',\n  maxBatchSize: 123,\n  pipelineConfig: {\n    functions: ['functions'],\n  },\n  requestMappingTemplate: 'requestMappingTemplate',\n  requestMappingTemplateS3Location: 'requestMappingTemplateS3Location',\n  responseMappingTemplate: 'responseMappingTemplate',\n  responseMappingTemplateS3Location: 'responseMappingTemplateS3Location',\n  syncConfig: {\n    conflictDetection: 'conflictDetection',\n\n    // the properties below are optional\n    conflictHandler: 'conflictHandler',\n    lambdaConflictHandlerConfig: {\n      lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.CfnResolverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.CfnResolverProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnResolverProps: appsync.CfnResolverProps = {\n  apiId: 'apiId',\n  fieldName: 'fieldName',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  cachingConfig: {\n    ttl: 123,\n\n    // the properties below are optional\n    cachingKeys: ['cachingKeys'],\n  },\n  dataSourceName: 'dataSourceName',\n  kind: 'kind',\n  maxBatchSize: 123,\n  pipelineConfig: {\n    functions: ['functions'],\n  },\n  requestMappingTemplate: 'requestMappingTemplate',\n  requestMappingTemplateS3Location: 'requestMappingTemplateS3Location',\n  responseMappingTemplate: 'responseMappingTemplate',\n  responseMappingTemplateS3Location: 'responseMappingTemplateS3Location',\n  syncConfig: {\n    conflictDetection: 'conflictDetection',\n\n    // the properties below are optional\n    conflictHandler: 'conflictHandler',\n    lambdaConflictHandlerConfig: {\n      lambdaConflictHandlerArn: 'lambdaConflictHandlerArn',\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 15,
        "75": 24,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 5,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 20,
        "290": 1
      },
      "fqnsFingerprint": "09fe73d5221cb1224b41786fd4e120948951590a59bb83ca837bcb53ea1abb28"
    },
    "354cc8206466449709448aa93cbd1e72f51cb5853d4ea3d8b1b4567306196565": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\ndata_source_options = appsync.DataSourceOptions(\n    description=\"description\",\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nDataSourceOptions dataSourceOptions = new DataSourceOptions {\n    Description = \"description\",\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nDataSourceOptions dataSourceOptions = DataSourceOptions.builder()\n        .description(\"description\")\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\ndataSourceOptions := &dataSourceOptions{\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst dataSourceOptions: appsync.DataSourceOptions = {\n  description: 'description',\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.DataSourceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.DataSourceOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dataSourceOptions: appsync.DataSourceOptions = {\n  description: 'description',\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "cfb5652121547954de83cf68d0f94ace86bbb5efcf833b64956a2ce7c6074d70"
    },
    "5020148facd07cd8db33284755773a76d3168252d127da93865e6b2d34c322a7": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# film: appsync.InterfaceType\n\n\napi.add_subscription(\"addedFilm\", appsync.Field(\n    return_type=film.attribute(),\n    args={\"id\": appsync.GraphqlType.id(is_required=True)},\n    directives=[appsync.Directive.subscribe(\"addFilm\")]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nInterfaceType film;\n\n\napi.AddSubscription(\"addedFilm\", new Field(new FieldOptions {\n    ReturnType = film.Attribute(),\n    Args = new Dictionary<string, GraphqlType> { { \"id\", GraphqlType.Id(new BaseTypeOptions { IsRequired = true }) } },\n    Directives = new [] { Directive.Subscribe(\"addFilm\") }\n}));",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nInterfaceType film;\n\n\napi.addSubscription(\"addedFilm\", Field.Builder.create()\n        .returnType(film.attribute())\n        .args(Map.of(\"id\", GraphqlType.id(BaseTypeOptions.builder().isRequired(true).build())))\n        .directives(List.of(Directive.subscribe(\"addFilm\")))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar film interfaceType\n\n\napi.addSubscription(jsii.String(\"addedFilm\"), appsync.NewField(&fieldOptions{\n\treturnType: film.attribute(),\n\targs: map[string]graphqlType{\n\t\t\"id\": appsync.*graphqlType.id(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n\tdirectives: []directive{\n\t\tappsync.*directive.subscribe(jsii.String(\"addFilm\")),\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const film: appsync.InterfaceType;\n\napi.addSubscription('addedFilm', new appsync.Field({\n  returnType: film.attribute(),\n  args: { id: appsync.GraphqlType.id({ isRequired: true }) },\n  directives: [appsync.Directive.subscribe('addFilm')],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.Directive"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseTypeOptions",
        "@aws-cdk/aws-appsync.Directive",
        "@aws-cdk/aws-appsync.Directive#subscribe",
        "@aws-cdk/aws-appsync.Field",
        "@aws-cdk/aws-appsync.FieldOptions",
        "@aws-cdk/aws-appsync.GraphqlApi#addSubscription",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#id",
        "@aws-cdk/aws-appsync.InterfaceType#attribute",
        "@aws-cdk/aws-appsync.ResolvableField"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const film: appsync.InterfaceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\napi.addSubscription('addedFilm', new appsync.Field({\n  returnType: film.attribute(),\n  args: { id: appsync.GraphqlType.id({ isRequired: true }) },\n  directives: [appsync.Directive.subscribe('addFilm')],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 23,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 3,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "df68e03c709ab59c47edc9115613279bb8946c8d9bcdf5e1b3cf7ad288165f71"
    },
    "e952f87956f6799df4e20837d05ea293daa6a991b3b5af26b24f5cdb0ebf0769": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_certificatemanager as acm\nimport aws_cdk.aws_route53 as route53\n\n# hosted zone and route53 features\n# hosted_zone_id: str\nzone_name = \"example.com\"\n\n\nmy_domain_name = \"api.example.com\"\ncertificate = acm.Certificate(self, \"cert\", domain_name=my_domain_name)\napi = appsync.GraphqlApi(self, \"api\",\n    name=\"myApi\",\n    domain_name=appsync.DomainOptions(\n        certificate=certificate,\n        domain_name=my_domain_name\n    )\n)\n\n# hosted zone for adding appsync domain\nzone = route53.HostedZone.from_hosted_zone_attributes(self, \"HostedZone\",\n    hosted_zone_id=hosted_zone_id,\n    zone_name=zone_name\n)\n\n# create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nroute53.CnameRecord(self, \"CnameApiRecord\",\n    record_name=\"api\",\n    zone=zone,\n    domain_name=my_domain_name\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.Route53;\n\n// hosted zone and route53 features\nstring hostedZoneId;\nstring zoneName = \"example.com\";\n\n\nstring myDomainName = \"api.example.com\";\nCertificate certificate = new Certificate(this, \"cert\", new CertificateProps { DomainName = myDomainName });\nGraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"myApi\",\n    DomainName = new DomainOptions {\n        Certificate = certificate,\n        DomainName = myDomainName\n    }\n});\n\n// hosted zone for adding appsync domain\nIHostedZone zone = HostedZone.FromHostedZoneAttributes(this, \"HostedZone\", new HostedZoneAttributes {\n    HostedZoneId = hostedZoneId,\n    ZoneName = zoneName\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew CnameRecord(this, \"CnameApiRecord\", new CnameRecordProps {\n    RecordName = \"api\",\n    Zone = zone,\n    DomainName = myDomainName\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.route53.*;\n\n// hosted zone and route53 features\nString hostedZoneId;\nString zoneName = \"example.com\";\n\n\nString myDomainName = \"api.example.com\";\nCertificate certificate = Certificate.Builder.create(this, \"cert\").domainName(myDomainName).build();\nGraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"myApi\")\n        .domainName(DomainOptions.builder()\n                .certificate(certificate)\n                .domainName(myDomainName)\n                .build())\n        .build();\n\n// hosted zone for adding appsync domain\nIHostedZone zone = HostedZone.fromHostedZoneAttributes(this, \"HostedZone\", HostedZoneAttributes.builder()\n        .hostedZoneId(hostedZoneId)\n        .zoneName(zoneName)\n        .build());\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nCnameRecord.Builder.create(this, \"CnameApiRecord\")\n        .recordName(\"api\")\n        .zone(zone)\n        .domainName(myDomainName)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import acm \"github.com/aws-samples/dummy/awscdkawscertificatemanager\"\nimport route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\n\n// hosted zone and route53 features\nvar hostedZoneId string\nzoneName := \"example.com\"\n\n\nmyDomainName := \"api.example.com\"\ncertificate := acm.NewCertificate(this, jsii.String(\"cert\"), &certificateProps{\n\tdomainName: myDomainName,\n})\napi := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"myApi\"),\n\tdomainName: &domainOptions{\n\t\tcertificate: certificate,\n\t\tdomainName: myDomainName,\n\t},\n})\n\n// hosted zone for adding appsync domain\nzone := route53.hostedZone.fromHostedZoneAttributes(this, jsii.String(\"HostedZone\"), &hostedZoneAttributes{\n\thostedZoneId: jsii.String(hostedZoneId),\n\tzoneName: jsii.String(zoneName),\n})\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nroute53.NewCnameRecord(this, jsii.String(\"CnameApiRecord\"), &cnameRecordProps{\n\trecordName: jsii.String(\"api\"),\n\tzone: zone,\n\tdomainName: myDomainName,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: myDomainName,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.DomainOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.DomainOptions",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.CertificateProps",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-route53.CnameRecord",
        "@aws-cdk/aws-route53.CnameRecordProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromHostedZoneAttributes",
        "@aws-cdk/aws-route53.HostedZoneAttributes",
        "@aws-cdk/aws-route53.IHostedZone",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: myDomainName,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "14": 2,
        "75": 30,
        "104": 4,
        "130": 2,
        "143": 1,
        "193": 5,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "282": 4,
        "290": 1
      },
      "fqnsFingerprint": "52f88604d8f7cdaa7e9fc61fb9d21c4b9b8f024885289eee8989faed59fe5ccb"
    },
    "ace37f51e44eddf5be41908b23cefae932b99570a3eaf01fa7bfaed642d57598": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.IAM\n        )\n    ),\n    xray_enabled=True\n)\n\ndemo_table = dynamodb.Table(self, \"DemoTable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\ndemo_dS = api.add_dynamo_db_data_source(\"demoDataSource\", demo_table)\n\n# Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemo_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemos\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_list()\n)\n\n# Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemo_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemo\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_put_item(\n        appsync.PrimaryKey.partition(\"id\").auto(),\n        appsync.Values.projecting(\"input\")),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_item()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.IAM\n        }\n    },\n    XrayEnabled = true\n});\n\nTable demoTable = new Table(this, \"DemoTable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nDynamoDbDataSource demoDS = api.AddDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemos\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbScanTable(),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultList()\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemo\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbPutItem(PrimaryKey.Partition(\"id\").Auto(), Values.Projecting(\"input\")),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultItem()\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.IAM)\n                        .build())\n                .build())\n        .xrayEnabled(true)\n        .build();\n\nTable demoTable = Table.Builder.create(this, \"DemoTable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nDynamoDbDataSource demoDS = api.addDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemos\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbScanTable())\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultList())\n        .build());\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemo\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbPutItem(PrimaryKey.partition(\"id\").auto(), Values.projecting(\"input\")))\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultItem())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_IAM,\n\t\t},\n\t},\n\txrayEnabled: jsii.Boolean(true),\n})\n\ndemoTable := dynamodb.NewTable(this, jsii.String(\"DemoTable\"), &tableProps{\n\tpartitionKey: &attribute{\n\t\tname: jsii.String(\"id\"),\n\t\ttype: dynamodb.attributeType_STRING,\n\t},\n})\n\ndemoDS := api.addDynamoDbDataSource(jsii.String(\"demoDataSource\"), demoTable)\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemos\"),\n\trequestMappingTemplate: appsync.mappingTemplate.dynamoDbScanTable(),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultList(),\n})\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemo\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.dynamoDbPutItem(appsync.primaryKey.partition(jsii.String(\"id\")).auto(), appsync.values.projecting(jsii.String(\"input\"))),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultItem(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.DynamoDbDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AttributeValues",
        "@aws-cdk/aws-appsync.AuthorizationConfig",
        "@aws-cdk/aws-appsync.AuthorizationMode",
        "@aws-cdk/aws-appsync.AuthorizationType",
        "@aws-cdk/aws-appsync.AuthorizationType#IAM",
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.DynamoDbDataSource",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addDynamoDbDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbPutItem",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbResultItem",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbResultList",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbScanTable",
        "@aws-cdk/aws-appsync.PartitionKeyStep#auto",
        "@aws-cdk/aws-appsync.PrimaryKey",
        "@aws-cdk/aws-appsync.PrimaryKey#partition",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#fromAsset",
        "@aws-cdk/aws-appsync.Values",
        "@aws-cdk/aws-appsync.Values#projecting",
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 62,
        "104": 2,
        "106": 1,
        "193": 7,
        "194": 25,
        "196": 12,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 17
      },
      "fqnsFingerprint": "7337b04f973e903939f6c7bb1b76cfa36d36eb00ba694263e7981c95b7b1a65b"
    },
    "8941bd78c879a9531fc09ca7f711386fa5bd24ebdf43c313120d393b1254c84c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\nimport aws_cdk.aws_dynamodb as dynamodb\nimport aws_cdk.aws_iam as iam\n\n# graphql_api: appsync.GraphqlApi\n# role: iam.Role\n# table: dynamodb.Table\n\ndynamo_db_data_source_props = appsync.DynamoDbDataSourceProps(\n    api=graphql_api,\n    table=table,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\",\n    read_only_access=False,\n    service_role=role,\n    use_caller_credentials=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\nusing Amazon.CDK.AWS.DynamoDB;\nusing Amazon.CDK.AWS.IAM;\n\nGraphqlApi graphqlApi;\nRole role;\nTable table;\n\nDynamoDbDataSourceProps dynamoDbDataSourceProps = new DynamoDbDataSourceProps {\n    Api = graphqlApi,\n    Table = table,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\",\n    ReadOnlyAccess = false,\n    ServiceRole = role,\n    UseCallerCredentials = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\nimport software.amazon.awscdk.services.dynamodb.*;\nimport software.amazon.awscdk.services.iam.*;\n\nGraphqlApi graphqlApi;\nRole role;\nTable table;\n\nDynamoDbDataSourceProps dynamoDbDataSourceProps = DynamoDbDataSourceProps.builder()\n        .api(graphqlApi)\n        .table(table)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .readOnlyAccess(false)\n        .serviceRole(role)\n        .useCallerCredentials(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\nimport dynamodb \"github.com/aws-samples/dummy/awscdkawsdynamodb\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar graphqlApi graphqlApi\nvar role role\nvar table table\n\ndynamoDbDataSourceProps := &dynamoDbDataSourceProps{\n\tapi: graphqlApi,\n\ttable: table,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\treadOnlyAccess: jsii.Boolean(false),\n\tserviceRole: role,\n\tuseCallerCredentials: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\ndeclare const table: dynamodb.Table;\nconst dynamoDbDataSourceProps: appsync.DynamoDbDataSourceProps = {\n  api: graphqlApi,\n  table: table,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  readOnlyAccess: false,\n  serviceRole: role,\n  useCallerCredentials: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.DynamoDbDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.DynamoDbDataSourceProps",
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\ndeclare const table: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dynamoDbDataSourceProps: appsync.DynamoDbDataSourceProps = {\n  api: graphqlApi,\n  table: table,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  readOnlyAccess: false,\n  serviceRole: role,\n  useCallerCredentials: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "91": 2,
        "130": 3,
        "153": 4,
        "169": 4,
        "193": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "415f3b8d8f3a9bd239264c3a8cd34728c4c778477c17397249df399900e0d1c0"
    },
    "3deef26ca844f671e409e2d962889dd4ee78bf90576302c21466d56f6ca76f6d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\nimport aws_cdk.aws_elasticsearch as elasticsearch\nimport aws_cdk.aws_iam as iam\n\n# domain: elasticsearch.Domain\n# graphql_api: appsync.GraphqlApi\n# role: iam.Role\n\nelasticsearch_data_source = appsync.ElasticsearchDataSource(self, \"MyElasticsearchDataSource\",\n    api=graphql_api,\n    domain=domain,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\",\n    service_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\nusing Amazon.CDK.AWS.Elasticsearch;\nusing Amazon.CDK.AWS.IAM;\n\nDomain domain;\nGraphqlApi graphqlApi;\nRole role;\n\nElasticsearchDataSource elasticsearchDataSource = new ElasticsearchDataSource(this, \"MyElasticsearchDataSource\", new ElasticsearchDataSourceProps {\n    Api = graphqlApi,\n    Domain = domain,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\",\n    ServiceRole = role\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\nimport software.amazon.awscdk.services.elasticsearch.*;\nimport software.amazon.awscdk.services.iam.*;\n\nDomain domain;\nGraphqlApi graphqlApi;\nRole role;\n\nElasticsearchDataSource elasticsearchDataSource = ElasticsearchDataSource.Builder.create(this, \"MyElasticsearchDataSource\")\n        .api(graphqlApi)\n        .domain(domain)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .serviceRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\nimport elasticsearch \"github.com/aws-samples/dummy/awscdkawselasticsearch\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar domain domain\nvar graphqlApi graphqlApi\nvar role role\n\nelasticsearchDataSource := appsync.NewElasticsearchDataSource(this, jsii.String(\"MyElasticsearchDataSource\"), &elasticsearchDataSourceProps{\n\tapi: graphqlApi,\n\tdomain: domain,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\tserviceRole: role,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as elasticsearch from '@aws-cdk/aws-elasticsearch';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const domain: elasticsearch.Domain;\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\nconst elasticsearchDataSource = new appsync.ElasticsearchDataSource(this, 'MyElasticsearchDataSource', {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.ElasticsearchDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.ElasticsearchDataSource",
        "@aws-cdk/aws-appsync.ElasticsearchDataSourceProps",
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-elasticsearch.IDomain",
        "@aws-cdk/aws-iam.IRole",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as elasticsearch from '@aws-cdk/aws-elasticsearch';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const domain: elasticsearch.Domain;\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst elasticsearchDataSource = new appsync.ElasticsearchDataSource(this, 'MyElasticsearchDataSource', {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 23,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "77696b571fcdcb84738cb97e7769765b5575eb6ec663fdbbdfc2fbf96a54ff16"
    },
    "1f9eec24ae9f6ade92b6d1e2e6beb992365ab7a6bf080093c0e6135d110d8f8a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\nimport aws_cdk.aws_elasticsearch as elasticsearch\nimport aws_cdk.aws_iam as iam\n\n# domain: elasticsearch.Domain\n# graphql_api: appsync.GraphqlApi\n# role: iam.Role\n\nelasticsearch_data_source_props = appsync.ElasticsearchDataSourceProps(\n    api=graphql_api,\n    domain=domain,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\",\n    service_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\nusing Amazon.CDK.AWS.Elasticsearch;\nusing Amazon.CDK.AWS.IAM;\n\nDomain domain;\nGraphqlApi graphqlApi;\nRole role;\n\nElasticsearchDataSourceProps elasticsearchDataSourceProps = new ElasticsearchDataSourceProps {\n    Api = graphqlApi,\n    Domain = domain,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\",\n    ServiceRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\nimport software.amazon.awscdk.services.elasticsearch.*;\nimport software.amazon.awscdk.services.iam.*;\n\nDomain domain;\nGraphqlApi graphqlApi;\nRole role;\n\nElasticsearchDataSourceProps elasticsearchDataSourceProps = ElasticsearchDataSourceProps.builder()\n        .api(graphqlApi)\n        .domain(domain)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .serviceRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\nimport elasticsearch \"github.com/aws-samples/dummy/awscdkawselasticsearch\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar domain domain\nvar graphqlApi graphqlApi\nvar role role\n\nelasticsearchDataSourceProps := &elasticsearchDataSourceProps{\n\tapi: graphqlApi,\n\tdomain: domain,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\tserviceRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as elasticsearch from '@aws-cdk/aws-elasticsearch';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const domain: elasticsearch.Domain;\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\nconst elasticsearchDataSourceProps: appsync.ElasticsearchDataSourceProps = {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.ElasticsearchDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.ElasticsearchDataSourceProps",
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-elasticsearch.IDomain",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as elasticsearch from '@aws-cdk/aws-elasticsearch';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const domain: elasticsearch.Domain;\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst elasticsearchDataSourceProps: appsync.ElasticsearchDataSourceProps = {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 23,
        "130": 3,
        "153": 4,
        "169": 4,
        "193": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ee4e76d878bd923cedd60c12b1461a4c32271a0514fd998c782177b5c26da9b9"
    },
    "e6704eb979da6dd1041b218f2b45ce71b2b72fb0d7c8301f3eaeec175f156be8": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\nepisode = appsync.EnumType(\"Episode\",\n    definition=[\"NEWHOPE\", \"EMPIRE\", \"JEDI\"\n    ]\n)\napi.add_type(episode)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\nEnumType episode = new EnumType(\"Episode\", new EnumTypeOptions {\n    Definition = new [] { \"NEWHOPE\", \"EMPIRE\", \"JEDI\" }\n});\napi.AddType(episode);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\nEnumType episode = EnumType.Builder.create(\"Episode\")\n        .definition(List.of(\"NEWHOPE\", \"EMPIRE\", \"JEDI\"))\n        .build();\napi.addType(episode);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\nepisode := appsync.NewEnumType(jsii.String(\"Episode\"), &enumTypeOptions{\n\tdefinition: []*string{\n\t\tjsii.String(\"NEWHOPE\"),\n\t\tjsii.String(\"EMPIRE\"),\n\t\tjsii.String(\"JEDI\"),\n\t},\n})\napi.addType(episode)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\nconst episode = new appsync.EnumType('Episode', {\n  definition: [\n    'NEWHOPE',\n    'EMPIRE',\n    'JEDI',\n  ],\n});\napi.addType(episode);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.EnumType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.EnumType",
        "@aws-cdk/aws-appsync.EnumTypeOptions",
        "@aws-cdk/aws-appsync.GraphqlApi#addType",
        "@aws-cdk/aws-appsync.IIntermediateType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst episode = new appsync.EnumType('Episode', {\n  definition: [\n    'NEWHOPE',\n    'EMPIRE',\n    'JEDI',\n  ],\n});\napi.addType(episode);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "a87dbccd6e3e686e3aecb1db8f3b0e64eeace1041ca495c9ed68bee3cbd6f228"
    },
    "d4a442d80b51b73354380d22f9d6a0f6fe3bbe8b480f913e153e10de92fcb71f": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\nepisode = appsync.EnumType(\"Episode\",\n    definition=[\"NEWHOPE\", \"EMPIRE\", \"JEDI\"\n    ]\n)\napi.add_type(episode)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\nEnumType episode = new EnumType(\"Episode\", new EnumTypeOptions {\n    Definition = new [] { \"NEWHOPE\", \"EMPIRE\", \"JEDI\" }\n});\napi.AddType(episode);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\nEnumType episode = EnumType.Builder.create(\"Episode\")\n        .definition(List.of(\"NEWHOPE\", \"EMPIRE\", \"JEDI\"))\n        .build();\napi.addType(episode);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\nepisode := appsync.NewEnumType(jsii.String(\"Episode\"), &enumTypeOptions{\n\tdefinition: []*string{\n\t\tjsii.String(\"NEWHOPE\"),\n\t\tjsii.String(\"EMPIRE\"),\n\t\tjsii.String(\"JEDI\"),\n\t},\n})\napi.addType(episode)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\nconst episode = new appsync.EnumType('Episode', {\n  definition: [\n    'NEWHOPE',\n    'EMPIRE',\n    'JEDI',\n  ],\n});\napi.addType(episode);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.EnumTypeOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.EnumType",
        "@aws-cdk/aws-appsync.EnumTypeOptions",
        "@aws-cdk/aws-appsync.GraphqlApi#addType",
        "@aws-cdk/aws-appsync.IIntermediateType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst episode = new appsync.EnumType('Episode', {\n  definition: [\n    'NEWHOPE',\n    'EMPIRE',\n    'JEDI',\n  ],\n});\napi.addType(episode);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "a87dbccd6e3e686e3aecb1db8f3b0e64eeace1041ca495c9ed68bee3cbd6f228"
    },
    "ff88e6a644813d918970cb1a69b7e55e6947132a28e87c72126ac44bef0682e6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nextended_data_source_props = appsync.ExtendedDataSourceProps(\n    type=\"type\",\n\n    # the properties below are optional\n    dynamo_db_config=appsync.CfnDataSource.DynamoDBConfigProperty(\n        aws_region=\"awsRegion\",\n        table_name=\"tableName\",\n\n        # the properties below are optional\n        delta_sync_config=appsync.CfnDataSource.DeltaSyncConfigProperty(\n            base_table_ttl=\"baseTableTtl\",\n            delta_sync_table_name=\"deltaSyncTableName\",\n            delta_sync_table_ttl=\"deltaSyncTableTtl\"\n        ),\n        use_caller_credentials=False,\n        versioned=False\n    ),\n    elasticsearch_config=appsync.CfnDataSource.ElasticsearchConfigProperty(\n        aws_region=\"awsRegion\",\n        endpoint=\"endpoint\"\n    ),\n    http_config=appsync.CfnDataSource.HttpConfigProperty(\n        endpoint=\"endpoint\",\n\n        # the properties below are optional\n        authorization_config=appsync.CfnDataSource.AuthorizationConfigProperty(\n            authorization_type=\"authorizationType\",\n\n            # the properties below are optional\n            aws_iam_config=appsync.CfnDataSource.AwsIamConfigProperty(\n                signing_region=\"signingRegion\",\n                signing_service_name=\"signingServiceName\"\n            )\n        )\n    ),\n    lambda_config=appsync.CfnDataSource.LambdaConfigProperty(\n        lambda_function_arn=\"lambdaFunctionArn\"\n    ),\n    open_search_service_config=appsync.CfnDataSource.OpenSearchServiceConfigProperty(\n        aws_region=\"awsRegion\",\n        endpoint=\"endpoint\"\n    ),\n    relational_database_config=appsync.CfnDataSource.RelationalDatabaseConfigProperty(\n        relational_database_source_type=\"relationalDatabaseSourceType\",\n\n        # the properties below are optional\n        rds_http_endpoint_config=appsync.CfnDataSource.RdsHttpEndpointConfigProperty(\n            aws_region=\"awsRegion\",\n            aws_secret_store_arn=\"awsSecretStoreArn\",\n            db_cluster_identifier=\"dbClusterIdentifier\",\n\n            # the properties below are optional\n            database_name=\"databaseName\",\n            schema=\"schema\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nExtendedDataSourceProps extendedDataSourceProps = new ExtendedDataSourceProps {\n    Type = \"type\",\n\n    // the properties below are optional\n    DynamoDbConfig = new DynamoDBConfigProperty {\n        AwsRegion = \"awsRegion\",\n        TableName = \"tableName\",\n\n        // the properties below are optional\n        DeltaSyncConfig = new DeltaSyncConfigProperty {\n            BaseTableTtl = \"baseTableTtl\",\n            DeltaSyncTableName = \"deltaSyncTableName\",\n            DeltaSyncTableTtl = \"deltaSyncTableTtl\"\n        },\n        UseCallerCredentials = false,\n        Versioned = false\n    },\n    ElasticsearchConfig = new ElasticsearchConfigProperty {\n        AwsRegion = \"awsRegion\",\n        Endpoint = \"endpoint\"\n    },\n    HttpConfig = new HttpConfigProperty {\n        Endpoint = \"endpoint\",\n\n        // the properties below are optional\n        AuthorizationConfig = new AuthorizationConfigProperty {\n            AuthorizationType = \"authorizationType\",\n\n            // the properties below are optional\n            AwsIamConfig = new AwsIamConfigProperty {\n                SigningRegion = \"signingRegion\",\n                SigningServiceName = \"signingServiceName\"\n            }\n        }\n    },\n    LambdaConfig = new LambdaConfigProperty {\n        LambdaFunctionArn = \"lambdaFunctionArn\"\n    },\n    OpenSearchServiceConfig = new OpenSearchServiceConfigProperty {\n        AwsRegion = \"awsRegion\",\n        Endpoint = \"endpoint\"\n    },\n    RelationalDatabaseConfig = new RelationalDatabaseConfigProperty {\n        RelationalDatabaseSourceType = \"relationalDatabaseSourceType\",\n\n        // the properties below are optional\n        RdsHttpEndpointConfig = new RdsHttpEndpointConfigProperty {\n            AwsRegion = \"awsRegion\",\n            AwsSecretStoreArn = \"awsSecretStoreArn\",\n            DbClusterIdentifier = \"dbClusterIdentifier\",\n\n            // the properties below are optional\n            DatabaseName = \"databaseName\",\n            Schema = \"schema\"\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nExtendedDataSourceProps extendedDataSourceProps = ExtendedDataSourceProps.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .dynamoDbConfig(DynamoDBConfigProperty.builder()\n                .awsRegion(\"awsRegion\")\n                .tableName(\"tableName\")\n\n                // the properties below are optional\n                .deltaSyncConfig(DeltaSyncConfigProperty.builder()\n                        .baseTableTtl(\"baseTableTtl\")\n                        .deltaSyncTableName(\"deltaSyncTableName\")\n                        .deltaSyncTableTtl(\"deltaSyncTableTtl\")\n                        .build())\n                .useCallerCredentials(false)\n                .versioned(false)\n                .build())\n        .elasticsearchConfig(ElasticsearchConfigProperty.builder()\n                .awsRegion(\"awsRegion\")\n                .endpoint(\"endpoint\")\n                .build())\n        .httpConfig(HttpConfigProperty.builder()\n                .endpoint(\"endpoint\")\n\n                // the properties below are optional\n                .authorizationConfig(AuthorizationConfigProperty.builder()\n                        .authorizationType(\"authorizationType\")\n\n                        // the properties below are optional\n                        .awsIamConfig(AwsIamConfigProperty.builder()\n                                .signingRegion(\"signingRegion\")\n                                .signingServiceName(\"signingServiceName\")\n                                .build())\n                        .build())\n                .build())\n        .lambdaConfig(LambdaConfigProperty.builder()\n                .lambdaFunctionArn(\"lambdaFunctionArn\")\n                .build())\n        .openSearchServiceConfig(OpenSearchServiceConfigProperty.builder()\n                .awsRegion(\"awsRegion\")\n                .endpoint(\"endpoint\")\n                .build())\n        .relationalDatabaseConfig(RelationalDatabaseConfigProperty.builder()\n                .relationalDatabaseSourceType(\"relationalDatabaseSourceType\")\n\n                // the properties below are optional\n                .rdsHttpEndpointConfig(RdsHttpEndpointConfigProperty.builder()\n                        .awsRegion(\"awsRegion\")\n                        .awsSecretStoreArn(\"awsSecretStoreArn\")\n                        .dbClusterIdentifier(\"dbClusterIdentifier\")\n\n                        // the properties below are optional\n                        .databaseName(\"databaseName\")\n                        .schema(\"schema\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nextendedDataSourceProps := &extendedDataSourceProps{\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tdynamoDbConfig: &dynamoDBConfigProperty{\n\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\ttableName: jsii.String(\"tableName\"),\n\n\t\t// the properties below are optional\n\t\tdeltaSyncConfig: &deltaSyncConfigProperty{\n\t\t\tbaseTableTtl: jsii.String(\"baseTableTtl\"),\n\t\t\tdeltaSyncTableName: jsii.String(\"deltaSyncTableName\"),\n\t\t\tdeltaSyncTableTtl: jsii.String(\"deltaSyncTableTtl\"),\n\t\t},\n\t\tuseCallerCredentials: jsii.Boolean(false),\n\t\tversioned: jsii.Boolean(false),\n\t},\n\telasticsearchConfig: &elasticsearchConfigProperty{\n\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\tendpoint: jsii.String(\"endpoint\"),\n\t},\n\thttpConfig: &httpConfigProperty{\n\t\tendpoint: jsii.String(\"endpoint\"),\n\n\t\t// the properties below are optional\n\t\tauthorizationConfig: &authorizationConfigProperty{\n\t\t\tauthorizationType: jsii.String(\"authorizationType\"),\n\n\t\t\t// the properties below are optional\n\t\t\tawsIamConfig: &awsIamConfigProperty{\n\t\t\t\tsigningRegion: jsii.String(\"signingRegion\"),\n\t\t\t\tsigningServiceName: jsii.String(\"signingServiceName\"),\n\t\t\t},\n\t\t},\n\t},\n\tlambdaConfig: &lambdaConfigProperty{\n\t\tlambdaFunctionArn: jsii.String(\"lambdaFunctionArn\"),\n\t},\n\topenSearchServiceConfig: &openSearchServiceConfigProperty{\n\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\tendpoint: jsii.String(\"endpoint\"),\n\t},\n\trelationalDatabaseConfig: &relationalDatabaseConfigProperty{\n\t\trelationalDatabaseSourceType: jsii.String(\"relationalDatabaseSourceType\"),\n\n\t\t// the properties below are optional\n\t\trdsHttpEndpointConfig: &rdsHttpEndpointConfigProperty{\n\t\t\tawsRegion: jsii.String(\"awsRegion\"),\n\t\t\tawsSecretStoreArn: jsii.String(\"awsSecretStoreArn\"),\n\t\t\tdbClusterIdentifier: jsii.String(\"dbClusterIdentifier\"),\n\n\t\t\t// the properties below are optional\n\t\t\tdatabaseName: jsii.String(\"databaseName\"),\n\t\t\tschema: jsii.String(\"schema\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst extendedDataSourceProps: appsync.ExtendedDataSourceProps = {\n  type: 'type',\n\n  // the properties below are optional\n  dynamoDbConfig: {\n    awsRegion: 'awsRegion',\n    tableName: 'tableName',\n\n    // the properties below are optional\n    deltaSyncConfig: {\n      baseTableTtl: 'baseTableTtl',\n      deltaSyncTableName: 'deltaSyncTableName',\n      deltaSyncTableTtl: 'deltaSyncTableTtl',\n    },\n    useCallerCredentials: false,\n    versioned: false,\n  },\n  elasticsearchConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  httpConfig: {\n    endpoint: 'endpoint',\n\n    // the properties below are optional\n    authorizationConfig: {\n      authorizationType: 'authorizationType',\n\n      // the properties below are optional\n      awsIamConfig: {\n        signingRegion: 'signingRegion',\n        signingServiceName: 'signingServiceName',\n      },\n    },\n  },\n  lambdaConfig: {\n    lambdaFunctionArn: 'lambdaFunctionArn',\n  },\n  openSearchServiceConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  relationalDatabaseConfig: {\n    relationalDatabaseSourceType: 'relationalDatabaseSourceType',\n\n    // the properties below are optional\n    rdsHttpEndpointConfig: {\n      awsRegion: 'awsRegion',\n      awsSecretStoreArn: 'awsSecretStoreArn',\n      dbClusterIdentifier: 'dbClusterIdentifier',\n\n      // the properties below are optional\n      databaseName: 'databaseName',\n      schema: 'schema',\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.ExtendedDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.ExtendedDataSourceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst extendedDataSourceProps: appsync.ExtendedDataSourceProps = {\n  type: 'type',\n\n  // the properties below are optional\n  dynamoDbConfig: {\n    awsRegion: 'awsRegion',\n    tableName: 'tableName',\n\n    // the properties below are optional\n    deltaSyncConfig: {\n      baseTableTtl: 'baseTableTtl',\n      deltaSyncTableName: 'deltaSyncTableName',\n      deltaSyncTableTtl: 'deltaSyncTableTtl',\n    },\n    useCallerCredentials: false,\n    versioned: false,\n  },\n  elasticsearchConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  httpConfig: {\n    endpoint: 'endpoint',\n\n    // the properties below are optional\n    authorizationConfig: {\n      authorizationType: 'authorizationType',\n\n      // the properties below are optional\n      awsIamConfig: {\n        signingRegion: 'signingRegion',\n        signingServiceName: 'signingServiceName',\n      },\n    },\n  },\n  lambdaConfig: {\n    lambdaFunctionArn: 'lambdaFunctionArn',\n  },\n  openSearchServiceConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  relationalDatabaseConfig: {\n    relationalDatabaseSourceType: 'relationalDatabaseSourceType',\n\n    // the properties below are optional\n    rdsHttpEndpointConfig: {\n      awsRegion: 'awsRegion',\n      awsSecretStoreArn: 'awsSecretStoreArn',\n      dbClusterIdentifier: 'dbClusterIdentifier',\n\n      // the properties below are optional\n      databaseName: 'databaseName',\n      schema: 'schema',\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 22,
        "75": 37,
        "91": 2,
        "153": 1,
        "169": 1,
        "193": 11,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 33,
        "290": 1
      },
      "fqnsFingerprint": "46a71a887d3139829c2de723692d34b4161da15d01427d693c440adb85c0ed26"
    },
    "a1eb10a31e781995b11b28387e584e4d9da4fdad2a4da5e47a308a5227e31a38": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\nimport aws_cdk.core as cdk\n\n# appsync_function: appsync.AppsyncFunction\n# base_data_source: appsync.BaseDataSource\n# mapping_template: appsync.MappingTemplate\n\nextended_resolver_props = appsync.ExtendedResolverProps(\n    field_name=\"fieldName\",\n    type_name=\"typeName\",\n\n    # the properties below are optional\n    caching_config=appsync.CachingConfig(\n        ttl=cdk.Duration.minutes(30),\n\n        # the properties below are optional\n        caching_keys=[\"cachingKeys\"]\n    ),\n    data_source=base_data_source,\n    pipeline_config=[appsync_function],\n    request_mapping_template=mapping_template,\n    response_mapping_template=mapping_template\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\nusing Amazon.CDK;\n\nAppsyncFunction appsyncFunction;\nBaseDataSource baseDataSource;\nMappingTemplate mappingTemplate;\nExtendedResolverProps extendedResolverProps = new ExtendedResolverProps {\n    FieldName = \"fieldName\",\n    TypeName = \"typeName\",\n\n    // the properties below are optional\n    CachingConfig = new CachingConfig {\n        Ttl = Duration.Minutes(30),\n\n        // the properties below are optional\n        CachingKeys = new [] { \"cachingKeys\" }\n    },\n    DataSource = baseDataSource,\n    PipelineConfig = new [] { appsyncFunction },\n    RequestMappingTemplate = mappingTemplate,\n    ResponseMappingTemplate = mappingTemplate\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\nimport software.amazon.awscdk.core.*;\n\nAppsyncFunction appsyncFunction;\nBaseDataSource baseDataSource;\nMappingTemplate mappingTemplate;\n\nExtendedResolverProps extendedResolverProps = ExtendedResolverProps.builder()\n        .fieldName(\"fieldName\")\n        .typeName(\"typeName\")\n\n        // the properties below are optional\n        .cachingConfig(CachingConfig.builder()\n                .ttl(Duration.minutes(30))\n\n                // the properties below are optional\n                .cachingKeys(List.of(\"cachingKeys\"))\n                .build())\n        .dataSource(baseDataSource)\n        .pipelineConfig(List.of(appsyncFunction))\n        .requestMappingTemplate(mappingTemplate)\n        .responseMappingTemplate(mappingTemplate)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar appsyncFunction appsyncFunction\nvar baseDataSource baseDataSource\nvar mappingTemplate mappingTemplate\n\nextendedResolverProps := &extendedResolverProps{\n\tfieldName: jsii.String(\"fieldName\"),\n\ttypeName: jsii.String(\"typeName\"),\n\n\t// the properties below are optional\n\tcachingConfig: &cachingConfig{\n\t\tttl: cdk.duration.minutes(jsii.Number(30)),\n\n\t\t// the properties below are optional\n\t\tcachingKeys: []*string{\n\t\t\tjsii.String(\"cachingKeys\"),\n\t\t},\n\t},\n\tdataSource: baseDataSource,\n\tpipelineConfig: []iAppsyncFunction{\n\t\tappsyncFunction,\n\t},\n\trequestMappingTemplate: mappingTemplate,\n\tresponseMappingTemplate: mappingTemplate,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const appsyncFunction: appsync.AppsyncFunction;\ndeclare const baseDataSource: appsync.BaseDataSource;\ndeclare const mappingTemplate: appsync.MappingTemplate;\nconst extendedResolverProps: appsync.ExtendedResolverProps = {\n  fieldName: 'fieldName',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  cachingConfig: {\n    ttl: cdk.Duration.minutes(30),\n\n    // the properties below are optional\n    cachingKeys: ['cachingKeys'],\n  },\n  dataSource: baseDataSource,\n  pipelineConfig: [appsyncFunction],\n  requestMappingTemplate: mappingTemplate,\n  responseMappingTemplate: mappingTemplate,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.ExtendedResolverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.CachingConfig",
        "@aws-cdk/aws-appsync.ExtendedResolverProps",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const appsyncFunction: appsync.AppsyncFunction;\ndeclare const baseDataSource: appsync.BaseDataSource;\ndeclare const mappingTemplate: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst extendedResolverProps: appsync.ExtendedResolverProps = {\n  fieldName: 'fieldName',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  cachingConfig: {\n    ttl: cdk.Duration.minutes(30),\n\n    // the properties below are optional\n    cachingKeys: ['cachingKeys'],\n  },\n  dataSource: baseDataSource,\n  pipelineConfig: [appsyncFunction],\n  requestMappingTemplate: mappingTemplate,\n  responseMappingTemplate: mappingTemplate,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 30,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "090648ab8bc11d70903eb3f2cca74a756c0ae5c93567c3b1b1de9b4f2b283a73"
    },
    "e3c26f0d3eeeeb6f0f15bd30f0ec14d8f884d5412bfe5c9e2812e350272d3bc5": {
      "translations": {
        "python": {
          "source": "field = appsync.Field(\n    return_type=appsync.GraphqlType.string(),\n    args={\n        \"argument\": appsync.GraphqlType.string()\n    }\n)\ntype = appsync.InterfaceType(\"Node\",\n    definition={\"test\": field}\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Field field = new Field(new FieldOptions {\n    ReturnType = GraphqlType.String(),\n    Args = new Dictionary<string, GraphqlType> {\n        { \"argument\", GraphqlType.String() }\n    }\n});\nInterfaceType type = new InterfaceType(\"Node\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> { { \"test\", field } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Field field = Field.Builder.create()\n        .returnType(GraphqlType.string())\n        .args(Map.of(\n                \"argument\", GraphqlType.string()))\n        .build();\nInterfaceType type = InterfaceType.Builder.create(\"Node\")\n        .definition(Map.of(\"test\", field))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "field := appsync.NewField(&fieldOptions{\n\treturnType: appsync.graphqlType.string(),\n\targs: map[string]*graphqlType{\n\t\t\"argument\": appsync.*graphqlType.string(),\n\t},\n})\ntype := appsync.NewInterfaceType(jsii.String(\"Node\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"test\": field,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const field = new appsync.Field({\n  returnType: appsync.GraphqlType.string(),\n  args: {\n    argument: appsync.GraphqlType.string(),\n  },\n});\nconst type = new appsync.InterfaceType('Node', {\n  definition: { test: field },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.Field"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.Field",
        "@aws-cdk/aws-appsync.FieldOptions",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.InterfaceType",
        "@aws-cdk/aws-appsync.IntermediateTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst field = new appsync.Field({\n  returnType: appsync.GraphqlType.string(),\n  args: {\n    argument: appsync.GraphqlType.string(),\n  },\n});\nconst type = new appsync.InterfaceType('Node', {\n  definition: { test: field },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 18,
        "193": 4,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "9c9b822bccebb6ba319176301e18ac072cbea7ee5164ed7a4b97954856825dd5"
    },
    "441b890128768f57ba7e8c405bebaeb1fa90375dad885b7b441e744bd3ce2e73": {
      "translations": {
        "python": {
          "source": "field = appsync.Field(\n    return_type=appsync.GraphqlType.string(),\n    args={\n        \"argument\": appsync.GraphqlType.string()\n    }\n)\ntype = appsync.InterfaceType(\"Node\",\n    definition={\"test\": field}\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Field field = new Field(new FieldOptions {\n    ReturnType = GraphqlType.String(),\n    Args = new Dictionary<string, GraphqlType> {\n        { \"argument\", GraphqlType.String() }\n    }\n});\nInterfaceType type = new InterfaceType(\"Node\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> { { \"test\", field } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Field field = Field.Builder.create()\n        .returnType(GraphqlType.string())\n        .args(Map.of(\n                \"argument\", GraphqlType.string()))\n        .build();\nInterfaceType type = InterfaceType.Builder.create(\"Node\")\n        .definition(Map.of(\"test\", field))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "field := appsync.NewField(&fieldOptions{\n\treturnType: appsync.graphqlType.string(),\n\targs: map[string]*graphqlType{\n\t\t\"argument\": appsync.*graphqlType.string(),\n\t},\n})\ntype := appsync.NewInterfaceType(jsii.String(\"Node\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"test\": field,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const field = new appsync.Field({\n  returnType: appsync.GraphqlType.string(),\n  args: {\n    argument: appsync.GraphqlType.string(),\n  },\n});\nconst type = new appsync.InterfaceType('Node', {\n  definition: { test: field },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.FieldOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.Field",
        "@aws-cdk/aws-appsync.FieldOptions",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.InterfaceType",
        "@aws-cdk/aws-appsync.IntermediateTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst field = new appsync.Field({\n  returnType: appsync.GraphqlType.string(),\n  args: {\n    argument: appsync.GraphqlType.string(),\n  },\n});\nconst type = new appsync.InterfaceType('Node', {\n  definition: { test: field },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 18,
        "193": 4,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "9c9b822bccebb6ba319176301e18ac072cbea7ee5164ed7a4b97954856825dd5"
    },
    "7a88f358fb1821b9002d48215080f04b361effb1a8fe0b075b706df19d75efbf": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\"\n)\ndemo = appsync.ObjectType(\"Demo\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True),\n        \"version\": appsync.GraphqlType.string(is_required=True)\n    }\n)\n\napi.add_type(demo)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\"\n});\nObjectType demo = new ObjectType(\"Demo\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) },\n        { \"version\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});\n\napi.AddType(demo);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .build();\nObjectType demo = ObjectType.Builder.create(\"Demo\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build()),\n                \"version\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();\n\napi.addType(demo);",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n})\ndemo := appsync.NewObjectType(jsii.String(\"Demo\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t\t\"version\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})\n\napi.addType(demo)",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.GraphqlApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseTypeOptions",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApi#addType",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.IIntermediateType",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 21,
        "104": 1,
        "106": 2,
        "193": 5,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6
      },
      "fqnsFingerprint": "900ac626cc8b2b534910339096e8f7951e2f106a22f5fcd1862b4ddc72792485"
    },
    "eb9ba9df27294d875b76b70cd522d909a6bfea72cfc651620006c540aa011c3b": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# table: dynamodb.Table\n\nimported_api = appsync.GraphqlApi.from_graphql_api_attributes(self, \"IApi\",\n    graphql_api_id=api.api_id,\n    graphql_api_arn=api.arn\n)\nimported_api.add_dynamo_db_data_source(\"TableDataSource\", table)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nTable table;\n\nIGraphqlApi importedApi = GraphqlApi.FromGraphqlApiAttributes(this, \"IApi\", new GraphqlApiAttributes {\n    GraphqlApiId = api.ApiId,\n    GraphqlApiArn = api.Arn\n});\nimportedApi.AddDynamoDbDataSource(\"TableDataSource\", table);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nTable table;\n\nIGraphqlApi importedApi = GraphqlApi.fromGraphqlApiAttributes(this, \"IApi\", GraphqlApiAttributes.builder()\n        .graphqlApiId(api.getApiId())\n        .graphqlApiArn(api.getArn())\n        .build());\nimportedApi.addDynamoDbDataSource(\"TableDataSource\", table);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar table table\n\nimportedApi := appsync.graphqlApi.fromGraphqlApiAttributes(this, jsii.String(\"IApi\"), &graphqlApiAttributes{\n\tgraphqlApiId: api.apiId,\n\tgraphqlApiArn: api.arn,\n})\nimportedApi.addDynamoDbDataSource(jsii.String(\"TableDataSource\"), table)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const table: dynamodb.Table;\nconst importedApi = appsync.GraphqlApi.fromGraphqlApiAttributes(this, 'IApi', {\n  graphqlApiId: api.apiId,\n  graphqlApiArn: api.arn,\n});\nimportedApi.addDynamoDbDataSource('TableDataSource', table);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.GraphqlApiAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApi#apiId",
        "@aws-cdk/aws-appsync.GraphqlApi#arn",
        "@aws-cdk/aws-appsync.GraphqlApi#fromGraphqlApiAttributes",
        "@aws-cdk/aws-appsync.GraphqlApiAttributes",
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-appsync.IGraphqlApi#addDynamoDbDataSource",
        "@aws-cdk/aws-dynamodb.ITable",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const table: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst importedApi = appsync.GraphqlApi.fromGraphqlApiAttributes(this, 'IApi', {\n  graphqlApiId: api.apiId,\n  graphqlApiArn: api.arn,\n});\nimportedApi.addDynamoDbDataSource('TableDataSource', table);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 19,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 5,
        "196": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8b2ab2e831240f62b58438a477eafdfc73a52772a9ace3f957b80196f4b109d8"
    },
    "cf37021964ad98f78046f4be0d00b65982301f41b553a7097a47f0ead06e562e": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\"\n)\ndemo = appsync.ObjectType(\"Demo\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True),\n        \"version\": appsync.GraphqlType.string(is_required=True)\n    }\n)\n\napi.add_type(demo)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\"\n});\nObjectType demo = new ObjectType(\"Demo\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) },\n        { \"version\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});\n\napi.AddType(demo);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .build();\nObjectType demo = ObjectType.Builder.create(\"Demo\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build()),\n                \"version\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();\n\napi.addType(demo);",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n})\ndemo := appsync.NewObjectType(jsii.String(\"Demo\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t\t\"version\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})\n\napi.addType(demo)",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.GraphqlApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseTypeOptions",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApi#addType",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.IIntermediateType",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n});\nconst demo = new appsync.ObjectType('Demo', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n\napi.addType(demo);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 21,
        "104": 1,
        "106": 2,
        "193": 5,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6
      },
      "fqnsFingerprint": "900ac626cc8b2b534910339096e8f7951e2f106a22f5fcd1862b4ddc72792485"
    },
    "1b859af83e851f129edf6ec04b13a80eaefb8055beb649b634c0cd875ca3ce39": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\ninfo = appsync.ObjectType(\"Info\",\n    definition={\n        \"node\": appsync.ResolvableField(\n            return_type=appsync.GraphqlType.string(),\n            args={\n                \"id\": appsync.GraphqlType.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = new ObjectType(\"Info\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"node\", new ResolvableField(new ResolvableFieldOptions {\n            ReturnType = GraphqlType.String(),\n            Args = new Dictionary<string, GraphqlType> {\n                { \"id\", GraphqlType.String() }\n            },\n            DataSource = api.AddNoneDataSource(\"none\"),\n            RequestMappingTemplate = dummyRequest,\n            ResponseMappingTemplate = dummyResponse\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = ObjectType.Builder.create(\"Info\")\n        .definition(Map.of(\n                \"node\", ResolvableField.Builder.create()\n                        .returnType(GraphqlType.string())\n                        .args(Map.of(\n                                \"id\", GraphqlType.string()))\n                        .dataSource(api.addNoneDataSource(\"none\"))\n                        .requestMappingTemplate(dummyRequest)\n                        .responseMappingTemplate(dummyResponse)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\ninfo := appsync.NewObjectType(jsii.String(\"Info\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"node\": appsync.NewResolvableField(&ResolvableFieldOptions{\n\t\t\t\"returnType\": appsync.GraphqlType.string(),\n\t\t\t\"args\": map[string]GraphqlType{\n\t\t\t\t\"id\": appsync.GraphqlType.string(),\n\t\t\t},\n\t\t\t\"dataSource\": api.addNoneDataSource(jsii.String(\"none\")),\n\t\t\t\"requestMappingTemplate\": dummyRequest,\n\t\t\t\"responseMappingTemplate\": dummyResponse,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.GraphqlType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions",
        "@aws-cdk/aws-appsync.ResolvableField",
        "@aws-cdk/aws-appsync.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "b66927a734456c6c5c3ab476f8678b9f5dc4efe72c5850d3fa339e1e5bf4418d"
    },
    "e21db36923de4af2d02dbf1da4cf64c486587207ec38813726553685fb76a0ff": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\n# intermediate_type: appsync.IIntermediateType\n\ngraphql_type_options = appsync.GraphqlTypeOptions(\n    intermediate_type=intermediate_type,\n    is_list=False,\n    is_required=False,\n    is_required_list=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nIIntermediateType intermediateType;\n\nGraphqlTypeOptions graphqlTypeOptions = new GraphqlTypeOptions {\n    IntermediateType = intermediateType,\n    IsList = false,\n    IsRequired = false,\n    IsRequiredList = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nIIntermediateType intermediateType;\n\nGraphqlTypeOptions graphqlTypeOptions = GraphqlTypeOptions.builder()\n        .intermediateType(intermediateType)\n        .isList(false)\n        .isRequired(false)\n        .isRequiredList(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nvar intermediateType iIntermediateType\n\ngraphqlTypeOptions := &graphqlTypeOptions{\n\tintermediateType: intermediateType,\n\tisList: jsii.Boolean(false),\n\tisRequired: jsii.Boolean(false),\n\tisRequiredList: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const intermediateType: appsync.IIntermediateType;\nconst graphqlTypeOptions: appsync.GraphqlTypeOptions = {\n  intermediateType: intermediateType,\n  isList: false,\n  isRequired: false,\n  isRequiredList: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.GraphqlTypeOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.GraphqlTypeOptions",
        "@aws-cdk/aws-appsync.IIntermediateType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const intermediateType: appsync.IIntermediateType;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst graphqlTypeOptions: appsync.GraphqlTypeOptions = {\n  intermediateType: intermediateType,\n  isList: false,\n  isRequired: false,\n  isRequiredList: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 12,
        "91": 3,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "a118035e37ac7a50b2132edfef6bf2f7f27cdcd33107b79d62782e2f9985b004"
    },
    "9688c11ce81c800889100ff83d109fbc2a0b9ef7fc5cb7aee6de207fad6db669": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"api\",\n    name=\"api\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\"))\n)\n\nhttp_ds = api.add_http_data_source(\"ds\", \"https://states.amazonaws.com\",\n    name=\"httpDsWithStepF\",\n    description=\"from appsync to StepFunctions Workflow\",\n    authorization_config=appsync.AwsIamConfig(\n        signing_region=\"us-east-1\",\n        signing_service_name=\"states\"\n    )\n)\n\nhttp_ds.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"callStepFunction\",\n    request_mapping_template=appsync.MappingTemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.MappingTemplate.from_file(\"response.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"api\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\"))\n});\n\nHttpDataSource httpDs = api.AddHttpDataSource(\"ds\", \"https://states.amazonaws.com\", new HttpDataSourceOptions {\n    Name = \"httpDsWithStepF\",\n    Description = \"from appsync to StepFunctions Workflow\",\n    AuthorizationConfig = new AwsIamConfig {\n        SigningRegion = \"us-east-1\",\n        SigningServiceName = \"states\"\n    }\n});\n\nhttpDs.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"callStepFunction\",\n    RequestMappingTemplate = MappingTemplate.FromFile(\"request.vtl\"),\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"response.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"api\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .build();\n\nHttpDataSource httpDs = api.addHttpDataSource(\"ds\", \"https://states.amazonaws.com\", HttpDataSourceOptions.builder()\n        .name(\"httpDsWithStepF\")\n        .description(\"from appsync to StepFunctions Workflow\")\n        .authorizationConfig(AwsIamConfig.builder()\n                .signingRegion(\"us-east-1\")\n                .signingServiceName(\"states\")\n                .build())\n        .build());\n\nhttpDs.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"callStepFunction\")\n        .requestMappingTemplate(MappingTemplate.fromFile(\"request.vtl\"))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"response.vtl\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"api\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n})\n\nhttpDs := api.addHttpDataSource(jsii.String(\"ds\"), jsii.String(\"https://states.amazonaws.com\"), &httpDataSourceOptions{\n\tname: jsii.String(\"httpDsWithStepF\"),\n\tdescription: jsii.String(\"from appsync to StepFunctions Workflow\"),\n\tauthorizationConfig: &awsIamConfig{\n\t\tsigningRegion: jsii.String(\"us-east-1\"),\n\t\tsigningServiceName: jsii.String(\"states\"),\n\t},\n})\n\nhttpDs.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"callStepFunction\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"request.vtl\")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"response.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.HttpDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AwsIamConfig",
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addHttpDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.HttpDataSource",
        "@aws-cdk/aws-appsync.HttpDataSourceOptions",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromFile",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#fromAsset",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 31,
        "104": 1,
        "193": 4,
        "194": 10,
        "196": 6,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 11
      },
      "fqnsFingerprint": "91db1b76303125e8cb2d4cc9df0aa26846d1f1ac73592f12fa98caa15d77f537"
    },
    "ba3a03ed82097fa17490c0250094448beae7a0846577c7e9a3b209be7980f953": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"api\",\n    name=\"api\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\"))\n)\n\nhttp_ds = api.add_http_data_source(\"ds\", \"https://states.amazonaws.com\",\n    name=\"httpDsWithStepF\",\n    description=\"from appsync to StepFunctions Workflow\",\n    authorization_config=appsync.AwsIamConfig(\n        signing_region=\"us-east-1\",\n        signing_service_name=\"states\"\n    )\n)\n\nhttp_ds.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"callStepFunction\",\n    request_mapping_template=appsync.MappingTemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.MappingTemplate.from_file(\"response.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"api\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\"))\n});\n\nHttpDataSource httpDs = api.AddHttpDataSource(\"ds\", \"https://states.amazonaws.com\", new HttpDataSourceOptions {\n    Name = \"httpDsWithStepF\",\n    Description = \"from appsync to StepFunctions Workflow\",\n    AuthorizationConfig = new AwsIamConfig {\n        SigningRegion = \"us-east-1\",\n        SigningServiceName = \"states\"\n    }\n});\n\nhttpDs.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"callStepFunction\",\n    RequestMappingTemplate = MappingTemplate.FromFile(\"request.vtl\"),\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"response.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"api\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .build();\n\nHttpDataSource httpDs = api.addHttpDataSource(\"ds\", \"https://states.amazonaws.com\", HttpDataSourceOptions.builder()\n        .name(\"httpDsWithStepF\")\n        .description(\"from appsync to StepFunctions Workflow\")\n        .authorizationConfig(AwsIamConfig.builder()\n                .signingRegion(\"us-east-1\")\n                .signingServiceName(\"states\")\n                .build())\n        .build());\n\nhttpDs.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"callStepFunction\")\n        .requestMappingTemplate(MappingTemplate.fromFile(\"request.vtl\"))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"response.vtl\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"api\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n})\n\nhttpDs := api.addHttpDataSource(jsii.String(\"ds\"), jsii.String(\"https://states.amazonaws.com\"), &httpDataSourceOptions{\n\tname: jsii.String(\"httpDsWithStepF\"),\n\tdescription: jsii.String(\"from appsync to StepFunctions Workflow\"),\n\tauthorizationConfig: &awsIamConfig{\n\t\tsigningRegion: jsii.String(\"us-east-1\"),\n\t\tsigningServiceName: jsii.String(\"states\"),\n\t},\n})\n\nhttpDs.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"callStepFunction\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"request.vtl\")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"response.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.HttpDataSourceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AwsIamConfig",
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addHttpDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.HttpDataSource",
        "@aws-cdk/aws-appsync.HttpDataSourceOptions",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromFile",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#fromAsset",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 31,
        "104": 1,
        "193": 4,
        "194": 10,
        "196": 6,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 11
      },
      "fqnsFingerprint": "91db1b76303125e8cb2d4cc9df0aa26846d1f1ac73592f12fa98caa15d77f537"
    },
    "890a6bb2d98fd26b00b0181a922d195df1d269fcb539db6d66dc181b879722a3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\n# graphql_api: appsync.GraphqlApi\n\nhttp_data_source_props = appsync.HttpDataSourceProps(\n    api=graphql_api,\n    endpoint=\"endpoint\",\n\n    # the properties below are optional\n    authorization_config=appsync.AwsIamConfig(\n        signing_region=\"signingRegion\",\n        signing_service_name=\"signingServiceName\"\n    ),\n    description=\"description\",\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nGraphqlApi graphqlApi;\n\nHttpDataSourceProps httpDataSourceProps = new HttpDataSourceProps {\n    Api = graphqlApi,\n    Endpoint = \"endpoint\",\n\n    // the properties below are optional\n    AuthorizationConfig = new AwsIamConfig {\n        SigningRegion = \"signingRegion\",\n        SigningServiceName = \"signingServiceName\"\n    },\n    Description = \"description\",\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nGraphqlApi graphqlApi;\n\nHttpDataSourceProps httpDataSourceProps = HttpDataSourceProps.builder()\n        .api(graphqlApi)\n        .endpoint(\"endpoint\")\n\n        // the properties below are optional\n        .authorizationConfig(AwsIamConfig.builder()\n                .signingRegion(\"signingRegion\")\n                .signingServiceName(\"signingServiceName\")\n                .build())\n        .description(\"description\")\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nvar graphqlApi graphqlApi\n\nhttpDataSourceProps := &httpDataSourceProps{\n\tapi: graphqlApi,\n\tendpoint: jsii.String(\"endpoint\"),\n\n\t// the properties below are optional\n\tauthorizationConfig: &awsIamConfig{\n\t\tsigningRegion: jsii.String(\"signingRegion\"),\n\t\tsigningServiceName: jsii.String(\"signingServiceName\"),\n\t},\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\nconst httpDataSourceProps: appsync.HttpDataSourceProps = {\n  api: graphqlApi,\n  endpoint: 'endpoint',\n\n  // the properties below are optional\n  authorizationConfig: {\n    signingRegion: 'signingRegion',\n    signingServiceName: 'signingServiceName',\n  },\n  description: 'description',\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.HttpDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AwsIamConfig",
        "@aws-cdk/aws-appsync.HttpDataSourceProps",
        "@aws-cdk/aws-appsync.IGraphqlApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpDataSourceProps: appsync.HttpDataSourceProps = {\n  api: graphqlApi,\n  endpoint: 'endpoint',\n\n  // the properties below are optional\n  authorizationConfig: {\n    signingRegion: 'signingRegion',\n    signingServiceName: 'signingServiceName',\n  },\n  description: 'description',\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "5588de6717952cc1ca85985ceee3d688e1c3e34bb817ad9804dd51e20559e1b5"
    },
    "bbfd80bde44d8b30bb3b2a61fa15b9752d217528530ed9766fe56dc44a6a2bee": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\")\n)\n\napi.grant(role, appsync.IamResource.custom(\"types/Mutation/fields/updateExample\"), \"appsync:GraphQL\")",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\")\n});\n\napi.Grant(role, IamResource.Custom(\"types/Mutation/fields/updateExample\"), \"appsync:GraphQL\");",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .build();\n\napi.grant(role, IamResource.custom(\"types/Mutation/fields/updateExample\"), \"appsync:GraphQL\");",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nrole := iam.NewRole(this, jsii.String(\"Role\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"lambda.amazonaws.com\")),\n})\n\napi.grant(role, appsync.iamResource.custom(jsii.String(\"types/Mutation/fields/updateExample\")), jsii.String(\"appsync:GraphQL\"))",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\ndeclare const api: appsync.GraphqlApi;\n\napi.grant(role, appsync.IamResource.custom('types/Mutation/fields/updateExample'), 'appsync:GraphQL');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.IamResource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.GraphqlApi#grant",
        "@aws-cdk/aws-appsync.IamResource",
        "@aws-cdk/aws-appsync.IamResource#custom",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\napi.grant(role, appsync.IamResource.custom('types/Mutation/fields/updateExample'), 'appsync:GraphQL');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "1318c205319495115917d408fa5fa1fb01ee41c9821b0eec0fb2c90f6f01bd71"
    },
    "74578b1adcc6c7ddea3bfbe60d69d9791957cc150cfcc5f023938a70f330afc8": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\nreview = appsync.InputType(\"Review\",\n    definition={\n        \"stars\": appsync.GraphqlType.int(is_required=True),\n        \"commentary\": appsync.GraphqlType.string()\n    }\n)\napi.add_type(review)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\nInputType review = new InputType(\"Review\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"stars\", GraphqlType.Int(new BaseTypeOptions { IsRequired = true }) },\n        { \"commentary\", GraphqlType.String() }\n    }\n});\napi.AddType(review);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\nInputType review = InputType.Builder.create(\"Review\")\n        .definition(Map.of(\n                \"stars\", GraphqlType.int(BaseTypeOptions.builder().isRequired(true).build()),\n                \"commentary\", GraphqlType.string()))\n        .build();\napi.addType(review);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\nreview := appsync.NewInputType(jsii.String(\"Review\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"stars\": appsync.GraphqlType.int(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t\t\"commentary\": appsync.GraphqlType.string(),\n\t},\n})\napi.addType(review)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\nconst review = new appsync.InputType('Review', {\n  definition: {\n    stars: appsync.GraphqlType.int({ isRequired: true }),\n    commentary: appsync.GraphqlType.string(),\n  },\n});\napi.addType(review);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.InputType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseTypeOptions",
        "@aws-cdk/aws-appsync.GraphqlApi#addType",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#int",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.IIntermediateType",
        "@aws-cdk/aws-appsync.InputType",
        "@aws-cdk/aws-appsync.IntermediateTypeOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst review = new appsync.InputType('Review', {\n  definition: {\n    stars: appsync.GraphqlType.int({ isRequired: true }),\n    commentary: appsync.GraphqlType.string(),\n  },\n});\napi.addType(review);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 19,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "bc9dd5a628e4e6f39ec09a299f90bb7d6f25c34aab2278ae09c7cdba0b897ad4"
    },
    "032eeb43b32ad87f97e344244dc47fb5dfd3559bb9a1c2419d243b71e933b5aa": {
      "translations": {
        "python": {
          "source": "node = appsync.InterfaceType(\"Node\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True)\n    }\n)\ndemo = appsync.ObjectType(\"Demo\",\n    interface_types=[node],\n    definition={\n        \"version\": appsync.GraphqlType.string(is_required=True)\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "InterfaceType node = new InterfaceType(\"Node\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});\nObjectType demo = new ObjectType(\"Demo\", new ObjectTypeOptions {\n    InterfaceTypes = new [] { node },\n    Definition = new Dictionary<string, IField> {\n        { \"version\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "InterfaceType node = InterfaceType.Builder.create(\"Node\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();\nObjectType demo = ObjectType.Builder.create(\"Demo\")\n        .interfaceTypes(List.of(node))\n        .definition(Map.of(\n                \"version\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "node := appsync.NewInterfaceType(jsii.String(\"Node\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})\ndemo := appsync.NewObjectType(jsii.String(\"Demo\"), &objectTypeOptions{\n\tinterfaceTypes: []interfaceType{\n\t\tnode,\n\t},\n\tdefinition: map[string]*iField{\n\t\t\"version\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\nconst demo = new appsync.ObjectType('Demo', {\n  interfaceTypes: [ node ],\n  definition: {\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.InterfaceType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseTypeOptions",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.InterfaceType",
        "@aws-cdk/aws-appsync.IntermediateTypeOptions",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\nconst demo = new appsync.ObjectType('Demo', {\n  interfaceTypes: [ node ],\n  definition: {\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 20,
        "106": 2,
        "192": 1,
        "193": 6,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7
      },
      "fqnsFingerprint": "73264867c07dc717517a46ac3128f4482c45397122dea5bed327a9647785afad"
    },
    "ddacc8dbef132f0751bb1dc077c9cf59bec609902fe8f9e321b78462772c4188": {
      "translations": {
        "python": {
          "source": "node = appsync.InterfaceType(\"Node\",\n    definition={\n        \"id\": appsync.GraphqlType.string(is_required=True)\n    }\n)\ndemo = appsync.ObjectType(\"Demo\",\n    interface_types=[node],\n    definition={\n        \"version\": appsync.GraphqlType.string(is_required=True)\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "InterfaceType node = new InterfaceType(\"Node\", new IntermediateTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"id\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});\nObjectType demo = new ObjectType(\"Demo\", new ObjectTypeOptions {\n    InterfaceTypes = new [] { node },\n    Definition = new Dictionary<string, IField> {\n        { \"version\", GraphqlType.String(new BaseTypeOptions { IsRequired = true }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "InterfaceType node = InterfaceType.Builder.create(\"Node\")\n        .definition(Map.of(\n                \"id\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();\nObjectType demo = ObjectType.Builder.create(\"Demo\")\n        .interfaceTypes(List.of(node))\n        .definition(Map.of(\n                \"version\", GraphqlType.string(BaseTypeOptions.builder().isRequired(true).build())))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "node := appsync.NewInterfaceType(jsii.String(\"Node\"), &intermediateTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"id\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})\ndemo := appsync.NewObjectType(jsii.String(\"Demo\"), &objectTypeOptions{\n\tinterfaceTypes: []interfaceType{\n\t\tnode,\n\t},\n\tdefinition: map[string]*iField{\n\t\t\"version\": appsync.GraphqlType.string(&BaseTypeOptions{\n\t\t\t\"isRequired\": jsii.Boolean(true),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\nconst demo = new appsync.ObjectType('Demo', {\n  interfaceTypes: [ node ],\n  definition: {\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.IntermediateTypeOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseTypeOptions",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.InterfaceType",
        "@aws-cdk/aws-appsync.IntermediateTypeOptions",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst node = new appsync.InterfaceType('Node', {\n  definition: {\n    id: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\nconst demo = new appsync.ObjectType('Demo', {\n  interfaceTypes: [ node ],\n  definition: {\n    version: appsync.GraphqlType.string({ isRequired: true }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 20,
        "106": 2,
        "192": 1,
        "193": 6,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7
      },
      "fqnsFingerprint": "73264867c07dc717517a46ac3128f4482c45397122dea5bed327a9647785afad"
    },
    "740bda0c04f6a34153fde5b43544da01e3dc096de49c15eff86a9e55ab86b1b4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nkey_condition = appsync.KeyCondition.begins_with(\"keyName\", \"arg\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nKeyCondition keyCondition = KeyCondition.BeginsWith(\"keyName\", \"arg\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nKeyCondition keyCondition = KeyCondition.beginsWith(\"keyName\", \"arg\");",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nkeyCondition := appsync.keyCondition.beginsWith(jsii.String(\"keyName\"), jsii.String(\"arg\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst keyCondition = appsync.KeyCondition.beginsWith('keyName', 'arg');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.KeyCondition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.KeyCondition",
        "@aws-cdk/aws-appsync.KeyCondition#beginsWith"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst keyCondition = appsync.KeyCondition.beginsWith('keyName', 'arg');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 5,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "d854a3be9204906e2510f310a0ca418693737591ede0112a140c6edd7d4cf139"
    },
    "c84e41027bfa0015d9a45a44a970a496ce70da97cbb6b82550d23b43bdf5e3f0": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n# auth_function: lambda.Function\n\n\nappsync.GraphqlApi(self, \"api\",\n    name=\"api\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"appsync.test.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.LAMBDA,\n            lambda_authorizer_config=appsync.LambdaAuthorizerConfig(\n                handler=auth_function\n            )\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\nFunction authFunction;\n\n\nnew GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"api\",\n    Schema = Schema.FromAsset(Join(__dirname, \"appsync.test.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.LAMBDA,\n            LambdaAuthorizerConfig = new LambdaAuthorizerConfig {\n                Handler = authFunction\n            }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\nFunction authFunction;\n\n\nGraphqlApi.Builder.create(this, \"api\")\n        .name(\"api\")\n        .schema(Schema.fromAsset(join(__dirname, \"appsync.test.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.LAMBDA)\n                        .lambdaAuthorizerConfig(LambdaAuthorizerConfig.builder()\n                                .handler(authFunction)\n                                .build())\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\nvar authFunction function\n\n\nappsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"api\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"appsync.test.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_LAMBDA,\n\t\t\tlambdaAuthorizerConfig: &lambdaAuthorizerConfig{\n\t\t\t\thandler: authFunction,\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\ndeclare const authFunction: lambda.Function;\n\nnew appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'appsync.test.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.LAMBDA,\n      lambdaAuthorizerConfig: {\n        handler: authFunction,\n        // can also specify `resultsCacheTtl` and `validationRegex`.\n      },\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.LambdaAuthorizerConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AuthorizationConfig",
        "@aws-cdk/aws-appsync.AuthorizationMode",
        "@aws-cdk/aws-appsync.AuthorizationType",
        "@aws-cdk/aws-appsync.AuthorizationType#LAMBDA",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.LambdaAuthorizerConfig",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#fromAsset",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\ndeclare const authFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'appsync.test.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.LAMBDA,\n      lambdaAuthorizerConfig: {\n        handler: authFunction,\n        // can also specify `resultsCacheTtl` and `validationRegex`.\n      },\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 23,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "5cbe013fc8145978aaa8b5c93888fc24cc996a2fbd3179a35d188e930ddc18d9"
    },
    "f4aca3205b2c64505bb4693720506e9324a28a198b5b83a65de5535eb4939055": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_lambda as lambda_\n\n# function_: lambda.Function\n# graphql_api: appsync.GraphqlApi\n# role: iam.Role\n\nlambda_data_source = appsync.LambdaDataSource(self, \"MyLambdaDataSource\",\n    api=graphql_api,\n    lambda_function=function_,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\",\n    service_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.Lambda;\n\nFunction function_;\nGraphqlApi graphqlApi;\nRole role;\n\nLambdaDataSource lambdaDataSource = new LambdaDataSource(this, \"MyLambdaDataSource\", new LambdaDataSourceProps {\n    Api = graphqlApi,\n    LambdaFunction = function_,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\",\n    ServiceRole = role\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.lambda.*;\n\nFunction function_;\nGraphqlApi graphqlApi;\nRole role;\n\nLambdaDataSource lambdaDataSource = LambdaDataSource.Builder.create(this, \"MyLambdaDataSource\")\n        .api(graphqlApi)\n        .lambdaFunction(function_)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .serviceRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\nvar function_ function\nvar graphqlApi graphqlApi\nvar role role\n\nlambdaDataSource := appsync.NewLambdaDataSource(this, jsii.String(\"MyLambdaDataSource\"), &lambdaDataSourceProps{\n\tapi: graphqlApi,\n\tlambdaFunction: function_,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\tserviceRole: role,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const function_: lambda.Function;\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\nconst lambdaDataSource = new appsync.LambdaDataSource(this, 'MyLambdaDataSource', {\n  api: graphqlApi,\n  lambdaFunction: function_,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.LambdaDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-appsync.LambdaDataSource",
        "@aws-cdk/aws-appsync.LambdaDataSourceProps",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const function_: lambda.Function;\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lambdaDataSource = new appsync.LambdaDataSource(this, 'MyLambdaDataSource', {\n  api: graphqlApi,\n  lambdaFunction: function_,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 23,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "62e1117cc67b5ad564914ae2e9f695c0c91f8ef0ab80f875de72ea4b626b0e6f"
    },
    "214c296f4fde1fdf98c4f9d88637d80767e513744bf0dd1de66eae58dc1c276c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_lambda as lambda_\n\n# function_: lambda.Function\n# graphql_api: appsync.GraphqlApi\n# role: iam.Role\n\nlambda_data_source_props = appsync.LambdaDataSourceProps(\n    api=graphql_api,\n    lambda_function=function_,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\",\n    service_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.Lambda;\n\nFunction function_;\nGraphqlApi graphqlApi;\nRole role;\n\nLambdaDataSourceProps lambdaDataSourceProps = new LambdaDataSourceProps {\n    Api = graphqlApi,\n    LambdaFunction = function_,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\",\n    ServiceRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.lambda.*;\n\nFunction function_;\nGraphqlApi graphqlApi;\nRole role;\n\nLambdaDataSourceProps lambdaDataSourceProps = LambdaDataSourceProps.builder()\n        .api(graphqlApi)\n        .lambdaFunction(function_)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .serviceRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\nvar function_ function\nvar graphqlApi graphqlApi\nvar role role\n\nlambdaDataSourceProps := &lambdaDataSourceProps{\n\tapi: graphqlApi,\n\tlambdaFunction: function_,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\tserviceRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const function_: lambda.Function;\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\nconst lambdaDataSourceProps: appsync.LambdaDataSourceProps = {\n  api: graphqlApi,\n  lambdaFunction: function_,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.LambdaDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-appsync.LambdaDataSourceProps",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const function_: lambda.Function;\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lambdaDataSourceProps: appsync.LambdaDataSourceProps = {\n  api: graphqlApi,\n  lambdaFunction: function_,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 23,
        "130": 3,
        "153": 4,
        "169": 4,
        "193": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "0015be3120a6df663b3eb5187255e0136837fcd04c3a939dd41801425c625166"
    },
    "769578361f8fc25bfb2c663bd08b7466aff30421e5a7656001dee0ee227bbce1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\nimport aws_cdk.aws_iam as iam\n\n# role: iam.Role\n\nlog_config = appsync.LogConfig(\n    exclude_verbose_content=False,\n    field_log_level=appsync.FieldLogLevel.NONE,\n    role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\nusing Amazon.CDK.AWS.IAM;\n\nRole role;\n\nLogConfig logConfig = new LogConfig {\n    ExcludeVerboseContent = false,\n    FieldLogLevel = FieldLogLevel.NONE,\n    Role = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\nimport software.amazon.awscdk.services.iam.*;\n\nRole role;\n\nLogConfig logConfig = LogConfig.builder()\n        .excludeVerboseContent(false)\n        .fieldLogLevel(FieldLogLevel.NONE)\n        .role(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar role role\n\nlogConfig := &logConfig{\n\texcludeVerboseContent: jsii.Boolean(false),\n\tfieldLogLevel: appsync.fieldLogLevel_NONE,\n\trole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst logConfig: appsync.LogConfig = {\n  excludeVerboseContent: false,\n  fieldLogLevel: appsync.FieldLogLevel.NONE,\n  role: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.LogConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.FieldLogLevel",
        "@aws-cdk/aws-appsync.FieldLogLevel#NONE",
        "@aws-cdk/aws-appsync.LogConfig",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst logConfig: appsync.LogConfig = {\n  excludeVerboseContent: false,\n  fieldLogLevel: appsync.FieldLogLevel.NONE,\n  role: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "91": 1,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "af73bdd558a6ab378404c9fe13e78236f427531257912c908bea9cbd74f78d41"
    },
    "e2708979c65a73becfc4960452238527a18a2bac753781987d24194a4a2f34bb": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\ninfo = appsync.ObjectType(\"Info\",\n    definition={\n        \"node\": appsync.ResolvableField(\n            return_type=appsync.GraphqlType.string(),\n            args={\n                \"id\": appsync.GraphqlType.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = new ObjectType(\"Info\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"node\", new ResolvableField(new ResolvableFieldOptions {\n            ReturnType = GraphqlType.String(),\n            Args = new Dictionary<string, GraphqlType> {\n                { \"id\", GraphqlType.String() }\n            },\n            DataSource = api.AddNoneDataSource(\"none\"),\n            RequestMappingTemplate = dummyRequest,\n            ResponseMappingTemplate = dummyResponse\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = ObjectType.Builder.create(\"Info\")\n        .definition(Map.of(\n                \"node\", ResolvableField.Builder.create()\n                        .returnType(GraphqlType.string())\n                        .args(Map.of(\n                                \"id\", GraphqlType.string()))\n                        .dataSource(api.addNoneDataSource(\"none\"))\n                        .requestMappingTemplate(dummyRequest)\n                        .responseMappingTemplate(dummyResponse)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\ninfo := appsync.NewObjectType(jsii.String(\"Info\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"node\": appsync.NewResolvableField(&ResolvableFieldOptions{\n\t\t\t\"returnType\": appsync.GraphqlType.string(),\n\t\t\t\"args\": map[string]GraphqlType{\n\t\t\t\t\"id\": appsync.GraphqlType.string(),\n\t\t\t},\n\t\t\t\"dataSource\": api.addNoneDataSource(jsii.String(\"none\")),\n\t\t\t\"requestMappingTemplate\": dummyRequest,\n\t\t\t\"responseMappingTemplate\": dummyResponse,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.MappingTemplate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions",
        "@aws-cdk/aws-appsync.ResolvableField",
        "@aws-cdk/aws-appsync.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "b66927a734456c6c5c3ab476f8678b9f5dc4efe72c5850d3fa339e1e5bf4418d"
    },
    "ceb8c2fa3bed8a3c70d09ceaa8658254c8935bef113edcb833caf255d2243eee": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\n# graphql_api: appsync.GraphqlApi\n\nnone_data_source = appsync.NoneDataSource(self, \"MyNoneDataSource\",\n    api=graphql_api,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nGraphqlApi graphqlApi;\n\nNoneDataSource noneDataSource = new NoneDataSource(this, \"MyNoneDataSource\", new NoneDataSourceProps {\n    Api = graphqlApi,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nGraphqlApi graphqlApi;\n\nNoneDataSource noneDataSource = NoneDataSource.Builder.create(this, \"MyNoneDataSource\")\n        .api(graphqlApi)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nvar graphqlApi graphqlApi\n\nnoneDataSource := appsync.NewNoneDataSource(this, jsii.String(\"MyNoneDataSource\"), &noneDataSourceProps{\n\tapi: graphqlApi,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\nconst noneDataSource = new appsync.NoneDataSource(this, 'MyNoneDataSource', {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.NoneDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-appsync.NoneDataSource",
        "@aws-cdk/aws-appsync.NoneDataSourceProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst noneDataSource = new appsync.NoneDataSource(this, 'MyNoneDataSource', {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "3e56405009439ac678c497dd9d8d0a88f023295dc8ed0dadd689f1f47ecdde29"
    },
    "8e22481980463ab1080ac59f35f7f2b3a422974e564fb020f87c77b6ac030393": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\n# graphql_api: appsync.GraphqlApi\n\nnone_data_source_props = appsync.NoneDataSourceProps(\n    api=graphql_api,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nGraphqlApi graphqlApi;\n\nNoneDataSourceProps noneDataSourceProps = new NoneDataSourceProps {\n    Api = graphqlApi,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nGraphqlApi graphqlApi;\n\nNoneDataSourceProps noneDataSourceProps = NoneDataSourceProps.builder()\n        .api(graphqlApi)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nvar graphqlApi graphqlApi\n\nnoneDataSourceProps := &noneDataSourceProps{\n\tapi: graphqlApi,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\nconst noneDataSourceProps: appsync.NoneDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.NoneDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-appsync.NoneDataSourceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst noneDataSourceProps: appsync.NoneDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8966d37a9f7749956dd7d5e0573f4b7d0ee65aead3727e326c7c8b8fbfe2ddae"
    },
    "faced940fe33f35078f20a3ae9444944c929da567a5f00bbd76f67181c97e117": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\ninfo = appsync.ObjectType(\"Info\",\n    definition={\n        \"node\": appsync.ResolvableField(\n            return_type=appsync.GraphqlType.string(),\n            args={\n                \"id\": appsync.GraphqlType.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = new ObjectType(\"Info\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"node\", new ResolvableField(new ResolvableFieldOptions {\n            ReturnType = GraphqlType.String(),\n            Args = new Dictionary<string, GraphqlType> {\n                { \"id\", GraphqlType.String() }\n            },\n            DataSource = api.AddNoneDataSource(\"none\"),\n            RequestMappingTemplate = dummyRequest,\n            ResponseMappingTemplate = dummyResponse\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = ObjectType.Builder.create(\"Info\")\n        .definition(Map.of(\n                \"node\", ResolvableField.Builder.create()\n                        .returnType(GraphqlType.string())\n                        .args(Map.of(\n                                \"id\", GraphqlType.string()))\n                        .dataSource(api.addNoneDataSource(\"none\"))\n                        .requestMappingTemplate(dummyRequest)\n                        .responseMappingTemplate(dummyResponse)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\ninfo := appsync.NewObjectType(jsii.String(\"Info\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"node\": appsync.NewResolvableField(&ResolvableFieldOptions{\n\t\t\t\"returnType\": appsync.GraphqlType.string(),\n\t\t\t\"args\": map[string]GraphqlType{\n\t\t\t\t\"id\": appsync.GraphqlType.string(),\n\t\t\t},\n\t\t\t\"dataSource\": api.addNoneDataSource(jsii.String(\"none\")),\n\t\t\t\"requestMappingTemplate\": dummyRequest,\n\t\t\t\"responseMappingTemplate\": dummyResponse,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.ObjectType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions",
        "@aws-cdk/aws-appsync.ResolvableField",
        "@aws-cdk/aws-appsync.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "b66927a734456c6c5c3ab476f8678b9f5dc4efe72c5850d3fa339e1e5bf4418d"
    },
    "9fd1d74011e1cd3a187eef5c16f860732241bbb330e0efe5ef77b432eca8507c": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\ninfo = appsync.ObjectType(\"Info\",\n    definition={\n        \"node\": appsync.ResolvableField(\n            return_type=appsync.GraphqlType.string(),\n            args={\n                \"id\": appsync.GraphqlType.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = new ObjectType(\"Info\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"node\", new ResolvableField(new ResolvableFieldOptions {\n            ReturnType = GraphqlType.String(),\n            Args = new Dictionary<string, GraphqlType> {\n                { \"id\", GraphqlType.String() }\n            },\n            DataSource = api.AddNoneDataSource(\"none\"),\n            RequestMappingTemplate = dummyRequest,\n            ResponseMappingTemplate = dummyResponse\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = ObjectType.Builder.create(\"Info\")\n        .definition(Map.of(\n                \"node\", ResolvableField.Builder.create()\n                        .returnType(GraphqlType.string())\n                        .args(Map.of(\n                                \"id\", GraphqlType.string()))\n                        .dataSource(api.addNoneDataSource(\"none\"))\n                        .requestMappingTemplate(dummyRequest)\n                        .responseMappingTemplate(dummyResponse)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\ninfo := appsync.NewObjectType(jsii.String(\"Info\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"node\": appsync.NewResolvableField(&ResolvableFieldOptions{\n\t\t\t\"returnType\": appsync.GraphqlType.string(),\n\t\t\t\"args\": map[string]GraphqlType{\n\t\t\t\t\"id\": appsync.GraphqlType.string(),\n\t\t\t},\n\t\t\t\"dataSource\": api.addNoneDataSource(jsii.String(\"none\")),\n\t\t\t\"requestMappingTemplate\": dummyRequest,\n\t\t\t\"responseMappingTemplate\": dummyResponse,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.ObjectTypeOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions",
        "@aws-cdk/aws-appsync.ResolvableField",
        "@aws-cdk/aws-appsync.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "b66927a734456c6c5c3ab476f8678b9f5dc4efe72c5850d3fa339e1e5bf4418d"
    },
    "99732bc6c008af43edbf59050bee52e96b851bdff46d272f1e42f266220ac03c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nopen_id_connect_config = appsync.OpenIdConnectConfig(\n    oidc_provider=\"oidcProvider\",\n\n    # the properties below are optional\n    client_id=\"clientId\",\n    token_expiry_from_auth=123,\n    token_expiry_from_issue=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nOpenIdConnectConfig openIdConnectConfig = new OpenIdConnectConfig {\n    OidcProvider = \"oidcProvider\",\n\n    // the properties below are optional\n    ClientId = \"clientId\",\n    TokenExpiryFromAuth = 123,\n    TokenExpiryFromIssue = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nOpenIdConnectConfig openIdConnectConfig = OpenIdConnectConfig.builder()\n        .oidcProvider(\"oidcProvider\")\n\n        // the properties below are optional\n        .clientId(\"clientId\")\n        .tokenExpiryFromAuth(123)\n        .tokenExpiryFromIssue(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nopenIdConnectConfig := &openIdConnectConfig{\n\toidcProvider: jsii.String(\"oidcProvider\"),\n\n\t// the properties below are optional\n\tclientId: jsii.String(\"clientId\"),\n\ttokenExpiryFromAuth: jsii.Number(123),\n\ttokenExpiryFromIssue: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst openIdConnectConfig: appsync.OpenIdConnectConfig = {\n  oidcProvider: 'oidcProvider',\n\n  // the properties below are optional\n  clientId: 'clientId',\n  tokenExpiryFromAuth: 123,\n  tokenExpiryFromIssue: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.OpenIdConnectConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.OpenIdConnectConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst openIdConnectConfig: appsync.OpenIdConnectConfig = {\n  oidcProvider: 'oidcProvider',\n\n  // the properties below are optional\n  clientId: 'clientId',\n  tokenExpiryFromAuth: 123,\n  tokenExpiryFromIssue: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "869c49547e633863ba6d96be1e8b46588edff2a0c732aae93735a6eb0dc616ce"
    },
    "fd130d1f50d488a5fb7987afd5237814581a11c470bd1361e44814aad1957e77": {
      "translations": {
        "python": {
          "source": "-\"ABCD|CDEF\"",
          "version": "2"
        },
        "csharp": {
          "source": "-\"ABCD|CDEF\";",
          "version": "1"
        },
        "java": {
          "source": "-\"ABCD|CDEF\";",
          "version": "1"
        },
        "go": {
          "source": "-\"ABCD|CDEF\"",
          "version": "1"
        },
        "$": {
          "source": "- 'ABCD|CDEF' // where ABCD and CDEF are two different clientId",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-appsync.OpenIdConnectConfig",
          "memberName": "clientId"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n- 'ABCD|CDEF'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "207": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "0de58bd2ec1130691b0b538f898126956acb31dc9b6a9e0494d0082d74b2fcea": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_opensearchservice as opensearch\n\n# api: appsync.GraphqlApi\n\n\nuser = iam.User(self, \"User\")\ndomain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_2,\n    removal_policy=RemovalPolicy.DESTROY,\n    fine_grained_access_control=opensearch.AdvancedSecurityOptions(master_user_arn=user.user_arn),\n    encryption_at_rest=opensearch.EncryptionAtRestOptions(enabled=True),\n    node_to_node_encryption=True,\n    enforce_https=True\n)\nds = api.add_open_search_data_source(\"ds\", domain)\n\nds.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getTests\",\n    request_mapping_template=appsync.MappingTemplate.from_string(JSON.stringify({\n        \"version\": \"2017-02-28\",\n        \"operation\": \"GET\",\n        \"path\": \"/id/post/_search\",\n        \"params\": {\n            \"headers\": {},\n            \"query_string\": {},\n            \"body\": {\"from\": 0, \"size\": 50}\n        }\n    })),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"[\n            #foreach($entry in $context.result.hits.hits)\n            #if( $velocityCount > 1 ) , #end\n            $utils.toJson($entry.get(\"_source\"))\n            #end\n          ]\"\"\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.OpenSearchService;\n\nGraphqlApi api;\n\n\nUser user = new User(this, \"User\");\nDomain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_2,\n    RemovalPolicy = RemovalPolicy.DESTROY,\n    FineGrainedAccessControl = new AdvancedSecurityOptions { MasterUserArn = user.UserArn },\n    EncryptionAtRest = new EncryptionAtRestOptions { Enabled = true },\n    NodeToNodeEncryption = true,\n    EnforceHttps = true\n});\nOpenSearchDataSource ds = api.AddOpenSearchDataSource(\"ds\", domain);\n\nds.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getTests\",\n    RequestMappingTemplate = MappingTemplate.FromString(JSON.Stringify(new Dictionary<string, object> {\n        { \"version\", \"2017-02-28\" },\n        { \"operation\", \"GET\" },\n        { \"path\", \"/id/post/_search\" },\n        { \"params\", new Struct {\n            Headers = new Struct { },\n            QueryString = new Struct { },\n            Body = new Struct { From = 0, Size = 50 }\n        } }\n    })),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"[\n        #foreach($entry in $context.result.hits.hits)\n        #if( $velocityCount > 1 ) , #end\n        $utils.toJson($entry.get(\"\"_source\"\"))\n        #end\n      ]\")\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.opensearchservice.*;\n\nGraphqlApi api;\n\n\nUser user = new User(this, \"User\");\nDomain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_2)\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .fineGrainedAccessControl(AdvancedSecurityOptions.builder().masterUserArn(user.getUserArn()).build())\n        .encryptionAtRest(EncryptionAtRestOptions.builder().enabled(true).build())\n        .nodeToNodeEncryption(true)\n        .enforceHttps(true)\n        .build();\nOpenSearchDataSource ds = api.addOpenSearchDataSource(\"ds\", domain);\n\nds.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getTests\")\n        .requestMappingTemplate(MappingTemplate.fromString(JSON.stringify(Map.of(\n                \"version\", \"2017-02-28\",\n                \"operation\", \"GET\",\n                \"path\", \"/id/post/_search\",\n                \"params\", Map.of(\n                        \"headers\", Map.of(),\n                        \"queryString\", Map.of(),\n                        \"body\", Map.of(\"from\", 0, \"size\", 50))))))\n        .responseMappingTemplate(MappingTemplate.fromString(\"[\\n    #foreach($entry in $context.result.hits.hits)\\n    #if( $velocityCount > 1 ) , #end\\n    $utils.toJson($entry.get(\\\"_source\\\"))\\n    #end\\n  ]\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import opensearch \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\nvar api graphqlApi\n\n\nuser := iam.NewUser(this, jsii.String(\"User\"))\ndomain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_2(),\n\tremovalPolicy: *awscdkcore.RemovalPolicy_DESTROY,\n\tfineGrainedAccessControl: &advancedSecurityOptions{\n\t\tmasterUserArn: user.userArn,\n\t},\n\tencryptionAtRest: &encryptionAtRestOptions{\n\t\tenabled: jsii.Boolean(true),\n\t},\n\tnodeToNodeEncryption: jsii.Boolean(true),\n\tenforceHttps: jsii.Boolean(true),\n})\nds := api.addOpenSearchDataSource(jsii.String(\"ds\"), domain)\n\nds.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getTests\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromString(jSON.stringify(map[string]interface{}{\n\t\t\"version\": jsii.String(\"2017-02-28\"),\n\t\t\"operation\": jsii.String(\"GET\"),\n\t\t\"path\": jsii.String(\"/id/post/_search\"),\n\t\t\"params\": map[string]map[string]interface{}{\n\t\t\t\"headers\": map[string]interface{}{\n\t\t\t},\n\t\t\t\"queryString\": map[string]interface{}{\n\t\t\t},\n\t\t\t\"body\": map[string]*f64{\n\t\t\t\t\"from\": jsii.Number(0),\n\t\t\t\t\"size\": jsii.Number(50),\n\t\t\t},\n\t\t},\n\t})),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"[\\n    #foreach($entry in $context.result.hits.hits)\\n    #if( $velocityCount > 1 ) , #end\\n    $utils.toJson($entry.get(\\\"_source\\\"))\\n    #end\\n  ]\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as opensearch from '@aws-cdk/aws-opensearchservice';\n\nconst user = new iam.User(this, 'User');\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_2,\n  removalPolicy: RemovalPolicy.DESTROY,\n  fineGrainedAccessControl: { masterUserArn: user.userArn },\n  encryptionAtRest: { enabled: true },\n  nodeToNodeEncryption: true,\n  enforceHttps: true,\n});\n\ndeclare const api: appsync.GraphqlApi;\nconst ds = api.addOpenSearchDataSource('ds', domain);\n\nds.createResolver({\n  typeName: 'Query',\n  fieldName: 'getTests',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(JSON.stringify({\n    version: '2017-02-28',\n    operation: 'GET',\n    path: '/id/post/_search',\n    params: {\n      headers: {},\n      queryString: {},\n      body: { from: 0, size: 50 },\n    },\n  })),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`[\n    #foreach($entry in $context.result.hits.hits)\n    #if( $velocityCount > 1 ) , #end\n    $utils.toJson($entry.get(\"_source\"))\n    #end\n  ]`),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.OpenSearchDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addOpenSearchDataSource",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromString",
        "@aws-cdk/aws-appsync.OpenSearchDataSource",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.User#userArn",
        "@aws-cdk/aws-opensearchservice.AdvancedSecurityOptions",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EncryptionAtRestOptions",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_2",
        "@aws-cdk/aws-opensearchservice.IDomain",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\n\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst user = new iam.User(this, 'User');\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_2,\n  removalPolicy: RemovalPolicy.DESTROY,\n  fineGrainedAccessControl: { masterUserArn: user.userArn },\n  encryptionAtRest: { enabled: true },\n  nodeToNodeEncryption: true,\n  enforceHttps: true,\n});\nconst ds = api.addOpenSearchDataSource('ds', domain);\n\nds.createResolver({\n  typeName: 'Query',\n  fieldName: 'getTests',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(JSON.stringify({\n    version: '2017-02-28',\n    operation: 'GET',\n    path: '/id/post/_search',\n    params: {\n      headers: {},\n      queryString: {},\n      body: { from: 0, size: 50 },\n    },\n  })),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`[\n    #foreach($entry in $context.result.hits.hits)\n    #if( $velocityCount > 1 ) , #end\n    $utils.toJson($entry.get(\"_source\"))\n    #end\n  ]`),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "14": 1,
        "75": 52,
        "104": 2,
        "106": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 9,
        "194": 13,
        "196": 5,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "7dee4537dcc6a2732ca4e36a4c2b81b8ba0c17877ef25e8f85a1f1037c3a823e"
    },
    "62ff8daa7908048485d2d210bf4ceb0216771adcdd91b333562f92318c9bebbd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_opensearchservice as opensearchservice\n\n# domain: opensearchservice.Domain\n# graphql_api: appsync.GraphqlApi\n# role: iam.Role\n\nopen_search_data_source_props = appsync.OpenSearchDataSourceProps(\n    api=graphql_api,\n    domain=domain,\n\n    # the properties below are optional\n    description=\"description\",\n    name=\"name\",\n    service_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.OpenSearchService;\n\nDomain domain;\nGraphqlApi graphqlApi;\nRole role;\n\nOpenSearchDataSourceProps openSearchDataSourceProps = new OpenSearchDataSourceProps {\n    Api = graphqlApi,\n    Domain = domain,\n\n    // the properties below are optional\n    Description = \"description\",\n    Name = \"name\",\n    ServiceRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nDomain domain;\nGraphqlApi graphqlApi;\nRole role;\n\nOpenSearchDataSourceProps openSearchDataSourceProps = OpenSearchDataSourceProps.builder()\n        .api(graphqlApi)\n        .domain(domain)\n\n        // the properties below are optional\n        .description(\"description\")\n        .name(\"name\")\n        .serviceRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport opensearchservice \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\nvar domain domain\nvar graphqlApi graphqlApi\nvar role role\n\nopenSearchDataSourceProps := &openSearchDataSourceProps{\n\tapi: graphqlApi,\n\tdomain: domain,\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\tserviceRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n\ndeclare const domain: opensearchservice.Domain;\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\nconst openSearchDataSourceProps: appsync.OpenSearchDataSourceProps = {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.OpenSearchDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-appsync.OpenSearchDataSourceProps",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-opensearchservice.IDomain"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n\ndeclare const domain: opensearchservice.Domain;\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst openSearchDataSourceProps: appsync.OpenSearchDataSourceProps = {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 23,
        "130": 3,
        "153": 4,
        "169": 4,
        "193": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "1de695e9feb7bc5ca8931c19d18c1e41ca154431352bba750e523b5566632159"
    },
    "59b1dd457f3f25307e58348b9ea9bc31fcfd8cdb47b6b2a296775c4e1c58aa55": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\n# assign: appsync.Assign\n\npartition_key = appsync.PartitionKey(assign)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nAssign assign;\n\nPartitionKey partitionKey = new PartitionKey(assign);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nAssign assign;\n\nPartitionKey partitionKey = new PartitionKey(assign);",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nvar assign assign\n\npartitionKey := appsync.NewPartitionKey(assign)",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const assign: appsync.Assign;\nconst partitionKey = new appsync.PartitionKey(assign);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.PartitionKey"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.Assign",
        "@aws-cdk/aws-appsync.PartitionKey"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const assign: appsync.Assign;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst partitionKey = new appsync.PartitionKey(assign);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "3c715ff6a0cbfdd497c667f09beb7b61ad020e17e50c3d75d00e9c21e61f684c"
    },
    "e24aedc3a98a19392c86d10b64e09570b79852c6afd0979b59645672b78f08ff": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\npartition_key_step = appsync.PartitionKeyStep(\"key\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nPartitionKeyStep partitionKeyStep = new PartitionKeyStep(\"key\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nPartitionKeyStep partitionKeyStep = new PartitionKeyStep(\"key\");",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\npartitionKeyStep := appsync.NewPartitionKeyStep(jsii.String(\"key\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst partitionKeyStep = new appsync.PartitionKeyStep('key');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.PartitionKeyStep"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.PartitionKeyStep"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst partitionKeyStep = new appsync.PartitionKeyStep('key');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "40df27c353078ad86eb4f1fca32b448744972699f8c10c09dc84afa46e896ecb"
    },
    "5c6fb0ea0b8fad4f8852f29b656e125cc91e1c4da827d2778bf1a168984434f0": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.IAM\n        )\n    ),\n    xray_enabled=True\n)\n\ndemo_table = dynamodb.Table(self, \"DemoTable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\ndemo_dS = api.add_dynamo_db_data_source(\"demoDataSource\", demo_table)\n\n# Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemo_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemos\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_list()\n)\n\n# Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemo_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemo\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_put_item(\n        appsync.PrimaryKey.partition(\"id\").auto(),\n        appsync.Values.projecting(\"input\")),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_item()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.IAM\n        }\n    },\n    XrayEnabled = true\n});\n\nTable demoTable = new Table(this, \"DemoTable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nDynamoDbDataSource demoDS = api.AddDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemos\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbScanTable(),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultList()\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemo\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbPutItem(PrimaryKey.Partition(\"id\").Auto(), Values.Projecting(\"input\")),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultItem()\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.IAM)\n                        .build())\n                .build())\n        .xrayEnabled(true)\n        .build();\n\nTable demoTable = Table.Builder.create(this, \"DemoTable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nDynamoDbDataSource demoDS = api.addDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemos\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbScanTable())\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultList())\n        .build());\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemo\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbPutItem(PrimaryKey.partition(\"id\").auto(), Values.projecting(\"input\")))\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultItem())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_IAM,\n\t\t},\n\t},\n\txrayEnabled: jsii.Boolean(true),\n})\n\ndemoTable := dynamodb.NewTable(this, jsii.String(\"DemoTable\"), &tableProps{\n\tpartitionKey: &attribute{\n\t\tname: jsii.String(\"id\"),\n\t\ttype: dynamodb.attributeType_STRING,\n\t},\n})\n\ndemoDS := api.addDynamoDbDataSource(jsii.String(\"demoDataSource\"), demoTable)\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemos\"),\n\trequestMappingTemplate: appsync.mappingTemplate.dynamoDbScanTable(),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultList(),\n})\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemo\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.dynamoDbPutItem(appsync.primaryKey.partition(jsii.String(\"id\")).auto(), appsync.values.projecting(jsii.String(\"input\"))),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultItem(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.PrimaryKey"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AttributeValues",
        "@aws-cdk/aws-appsync.AuthorizationConfig",
        "@aws-cdk/aws-appsync.AuthorizationMode",
        "@aws-cdk/aws-appsync.AuthorizationType",
        "@aws-cdk/aws-appsync.AuthorizationType#IAM",
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.DynamoDbDataSource",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addDynamoDbDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbPutItem",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbResultItem",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbResultList",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbScanTable",
        "@aws-cdk/aws-appsync.PartitionKeyStep#auto",
        "@aws-cdk/aws-appsync.PrimaryKey",
        "@aws-cdk/aws-appsync.PrimaryKey#partition",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#fromAsset",
        "@aws-cdk/aws-appsync.Values",
        "@aws-cdk/aws-appsync.Values#projecting",
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 62,
        "104": 2,
        "106": 1,
        "193": 7,
        "194": 25,
        "196": 12,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 17
      },
      "fqnsFingerprint": "7337b04f973e903939f6c7bb1b76cfa36d36eb00ba694263e7981c95b7b1a65b"
    },
    "32893bf1247c5109d757bdfa12a3b8ba6e9c64d7362e904cd2e2f602ddacaf19": {
      "translations": {
        "python": {
          "source": "# Build a data source for AppSync to access the database.\n# api: appsync.GraphqlApi\n# Create username and password secret for DB Cluster\nsecret = rds.DatabaseSecret(self, \"AuroraSecret\",\n    username=\"clusteradmin\"\n)\n\n# The VPC to place the cluster in\nvpc = ec2.Vpc(self, \"AuroraVpc\")\n\n# Create the serverless cluster, provide all values needed to customise the database.\ncluster = rds.ServerlessCluster(self, \"AuroraCluster\",\n    engine=rds.DatabaseClusterEngine.AURORA_MYSQL,\n    vpc=vpc,\n    credentials={\"username\": \"clusteradmin\"},\n    cluster_identifier=\"db-endpoint-test\",\n    default_database_name=\"demos\"\n)\nrds_dS = api.add_rds_data_source(\"rds\", cluster, secret, \"demos\")\n\n# Set up a resolver for an RDS query.\nrds_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemosRds\",\n    request_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"SELECT * FROM demos\"\n            ]\n          }\n          \"\"\"),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n            $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n          \"\"\")\n)\n\n# Set up a resolver for an RDS mutation.\nrds_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemoRds\",\n    request_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"INSERT INTO demos VALUES (:id, :version)\",\n              \"SELECT * WHERE id = :id\"\n            ],\n            \"variableMap\": {\n              \":id\": $util.toJson($util.autoId()),\n              \":version\": $util.toJson($ctx.args.version)\n            }\n          }\n          \"\"\"),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"\n            $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n          \"\"\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Build a data source for AppSync to access the database.\nGraphqlApi api;\n// Create username and password secret for DB Cluster\nDatabaseSecret secret = new DatabaseSecret(this, \"AuroraSecret\", new DatabaseSecretProps {\n    Username = \"clusteradmin\"\n});\n\n// The VPC to place the cluster in\nVpc vpc = new Vpc(this, \"AuroraVpc\");\n\n// Create the serverless cluster, provide all values needed to customise the database.\nServerlessCluster cluster = new ServerlessCluster(this, \"AuroraCluster\", new ServerlessClusterProps {\n    Engine = DatabaseClusterEngine.AURORA_MYSQL,\n    Vpc = vpc,\n    Credentials = new Dictionary<string, string> { { \"username\", \"clusteradmin\" } },\n    ClusterIdentifier = \"db-endpoint-test\",\n    DefaultDatabaseName = \"demos\"\n});\nRdsDataSource rdsDS = api.AddRdsDataSource(\"rds\", cluster, secret, \"demos\");\n\n// Set up a resolver for an RDS query.\nrdsDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemosRds\",\n    RequestMappingTemplate = MappingTemplate.FromString(@\"\n      {\n        \"\"version\"\": \"\"2018-05-29\"\",\n        \"\"statements\"\": [\n          \"\"SELECT * FROM demos\"\"\n        ]\n      }\n      \"),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"\n        $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n      \")\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemoRds\",\n    RequestMappingTemplate = MappingTemplate.FromString(@\"\n      {\n        \"\"version\"\": \"\"2018-05-29\"\",\n        \"\"statements\"\": [\n          \"\"INSERT INTO demos VALUES (:id, :version)\"\",\n          \"\"SELECT * WHERE id = :id\"\"\n        ],\n        \"\"variableMap\"\": {\n          \"\":id\"\": $util.toJson($util.autoId()),\n          \"\":version\"\": $util.toJson($ctx.args.version)\n        }\n      }\n      \"),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"\n        $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n      \")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Build a data source for AppSync to access the database.\nGraphqlApi api;\n// Create username and password secret for DB Cluster\nDatabaseSecret secret = DatabaseSecret.Builder.create(this, \"AuroraSecret\")\n        .username(\"clusteradmin\")\n        .build();\n\n// The VPC to place the cluster in\nVpc vpc = new Vpc(this, \"AuroraVpc\");\n\n// Create the serverless cluster, provide all values needed to customise the database.\nServerlessCluster cluster = ServerlessCluster.Builder.create(this, \"AuroraCluster\")\n        .engine(DatabaseClusterEngine.AURORA_MYSQL)\n        .vpc(vpc)\n        .credentials(Map.of(\"username\", \"clusteradmin\"))\n        .clusterIdentifier(\"db-endpoint-test\")\n        .defaultDatabaseName(\"demos\")\n        .build();\nRdsDataSource rdsDS = api.addRdsDataSource(\"rds\", cluster, secret, \"demos\");\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemosRds\")\n        .requestMappingTemplate(MappingTemplate.fromString(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"SELECT * FROM demos\\\"\\n    ]\\n  }\\n  \"))\n        .responseMappingTemplate(MappingTemplate.fromString(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\\n  \"))\n        .build());\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemoRds\")\n        .requestMappingTemplate(MappingTemplate.fromString(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"INSERT INTO demos VALUES (:id, :version)\\\",\\n      \\\"SELECT * WHERE id = :id\\\"\\n    ],\\n    \\\"variableMap\\\": {\\n      \\\":id\\\": $util.toJson($util.autoId()),\\n      \\\":version\\\": $util.toJson($ctx.args.version)\\n    }\\n  }\\n  \"))\n        .responseMappingTemplate(MappingTemplate.fromString(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\\n  \"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Build a data source for AppSync to access the database.\nvar api graphqlApi\n// Create username and password secret for DB Cluster\nsecret := rds.NewDatabaseSecret(this, jsii.String(\"AuroraSecret\"), &databaseSecretProps{\n\tusername: jsii.String(\"clusteradmin\"),\n})\n\n// The VPC to place the cluster in\nvpc := ec2.NewVpc(this, jsii.String(\"AuroraVpc\"))\n\n// Create the serverless cluster, provide all values needed to customise the database.\ncluster := rds.NewServerlessCluster(this, jsii.String(\"AuroraCluster\"), &serverlessClusterProps{\n\tengine: rds.databaseClusterEngine_AURORA_MYSQL(),\n\tvpc: vpc,\n\tcredentials: map[string]*string{\n\t\t\"username\": jsii.String(\"clusteradmin\"),\n\t},\n\tclusterIdentifier: jsii.String(\"db-endpoint-test\"),\n\tdefaultDatabaseName: jsii.String(\"demos\"),\n})\nrdsDS := api.addRdsDataSource(jsii.String(\"rds\"), cluster, secret, jsii.String(\"demos\"))\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemosRds\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromString(jsii.String(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"SELECT * FROM demos\\\"\\n    ]\\n  }\\n  \")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\\n  \")),\n})\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemoRds\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n  {\\n    \\\"version\\\": \\\"2018-05-29\\\",\\n    \\\"statements\\\": [\\n      \\\"INSERT INTO demos VALUES (:id, :version)\\\",\\n      \\\"SELECT * WHERE id = :id\\\"\\n    ],\\n    \\\"variableMap\\\": {\\n      \\\":id\\\": $util.toJson($util.autoId()),\\n      \\\":version\\\": $util.toJson($ctx.args.version)\\n    }\\n  }\\n  \")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromString(jsii.String(\"\\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\\n  \")),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.RdsDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addRdsDataSource",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromString",
        "@aws-cdk/aws-appsync.RdsDataSource",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-rds.Credentials",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#AURORA_MYSQL",
        "@aws-cdk/aws-rds.DatabaseSecret",
        "@aws-cdk/aws-rds.DatabaseSecretProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessCluster",
        "@aws-cdk/aws-rds.ServerlessClusterProps",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "14": 4,
        "75": 51,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 16,
        "196": 7,
        "197": 3,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 14,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "d13bf58a96ffbb559f3f6e27c0c741533600f613919a428520d372a8183f2ecc"
    },
    "dbaf71b926503241f0155ce9ae9d681cbf01d9871bb6bec8086f911f788ecb66": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_rds as rds\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\n# graphql_api: appsync.GraphqlApi\n# role: iam.Role\n# secret: secretsmanager.Secret\n# serverless_cluster: rds.ServerlessCluster\n\nrds_data_source_props = appsync.RdsDataSourceProps(\n    api=graphql_api,\n    secret_store=secret,\n    serverless_cluster=serverless_cluster,\n\n    # the properties below are optional\n    database_name=\"databaseName\",\n    description=\"description\",\n    name=\"name\",\n    service_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.RDS;\nusing Amazon.CDK.AWS.SecretsManager;\n\nGraphqlApi graphqlApi;\nRole role;\nSecret secret;\nServerlessCluster serverlessCluster;\n\nRdsDataSourceProps rdsDataSourceProps = new RdsDataSourceProps {\n    Api = graphqlApi,\n    SecretStore = secret,\n    ServerlessCluster = serverlessCluster,\n\n    // the properties below are optional\n    DatabaseName = \"databaseName\",\n    Description = \"description\",\n    Name = \"name\",\n    ServiceRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.rds.*;\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nGraphqlApi graphqlApi;\nRole role;\nSecret secret;\nServerlessCluster serverlessCluster;\n\nRdsDataSourceProps rdsDataSourceProps = RdsDataSourceProps.builder()\n        .api(graphqlApi)\n        .secretStore(secret)\n        .serverlessCluster(serverlessCluster)\n\n        // the properties below are optional\n        .databaseName(\"databaseName\")\n        .description(\"description\")\n        .name(\"name\")\n        .serviceRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport rds \"github.com/aws-samples/dummy/awscdkawsrds\"\nimport secretsmanager \"github.com/aws-samples/dummy/awscdkawssecretsmanager\"\n\nvar graphqlApi graphqlApi\nvar role role\nvar secret secret\nvar serverlessCluster serverlessCluster\n\nrdsDataSourceProps := &rdsDataSourceProps{\n\tapi: graphqlApi,\n\tsecretStore: secret,\n\tserverlessCluster: serverlessCluster,\n\n\t// the properties below are optional\n\tdatabaseName: jsii.String(\"databaseName\"),\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\tserviceRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\ndeclare const secret: secretsmanager.Secret;\ndeclare const serverlessCluster: rds.ServerlessCluster;\nconst rdsDataSourceProps: appsync.RdsDataSourceProps = {\n  api: graphqlApi,\n  secretStore: secret,\n  serverlessCluster: serverlessCluster,\n\n  // the properties below are optional\n  databaseName: 'databaseName',\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.RdsDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-appsync.RdsDataSourceProps",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-rds.IServerlessCluster",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as rds from '@aws-cdk/aws-rds';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const graphqlApi: appsync.GraphqlApi;\ndeclare const role: iam.Role;\ndeclare const secret: secretsmanager.Secret;\ndeclare const serverlessCluster: rds.ServerlessCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst rdsDataSourceProps: appsync.RdsDataSourceProps = {\n  api: graphqlApi,\n  secretStore: secret,\n  serverlessCluster: serverlessCluster,\n\n  // the properties below are optional\n  databaseName: 'databaseName',\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 30,
        "130": 4,
        "153": 5,
        "169": 5,
        "193": 1,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "67d893c621a259d5ac72cf3e6d1c4e0ad4b71dc70f6fa24e67a986665d80409b"
    },
    "67d5ce535f882e4d9b2e529cff4c0bd9845aae863884bff0766d7f62f7d8ce54": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\ninfo = appsync.ObjectType(\"Info\",\n    definition={\n        \"node\": appsync.ResolvableField(\n            return_type=appsync.GraphqlType.string(),\n            args={\n                \"id\": appsync.GraphqlType.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = new ObjectType(\"Info\", new ObjectTypeOptions {\n    Definition = new Dictionary<string, IField> {\n        { \"node\", new ResolvableField(new ResolvableFieldOptions {\n            ReturnType = GraphqlType.String(),\n            Args = new Dictionary<string, GraphqlType> {\n                { \"id\", GraphqlType.String() }\n            },\n            DataSource = api.AddNoneDataSource(\"none\"),\n            RequestMappingTemplate = dummyRequest,\n            ResponseMappingTemplate = dummyResponse\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\nObjectType info = ObjectType.Builder.create(\"Info\")\n        .definition(Map.of(\n                \"node\", ResolvableField.Builder.create()\n                        .returnType(GraphqlType.string())\n                        .args(Map.of(\n                                \"id\", GraphqlType.string()))\n                        .dataSource(api.addNoneDataSource(\"none\"))\n                        .requestMappingTemplate(dummyRequest)\n                        .responseMappingTemplate(dummyResponse)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\ninfo := appsync.NewObjectType(jsii.String(\"Info\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"node\": appsync.NewResolvableField(&ResolvableFieldOptions{\n\t\t\t\"returnType\": appsync.GraphqlType.string(),\n\t\t\t\"args\": map[string]GraphqlType{\n\t\t\t\t\"id\": appsync.GraphqlType.string(),\n\t\t\t},\n\t\t\t\"dataSource\": api.addNoneDataSource(jsii.String(\"none\")),\n\t\t\t\"requestMappingTemplate\": dummyRequest,\n\t\t\t\"responseMappingTemplate\": dummyResponse,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.ResolvableField"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions",
        "@aws-cdk/aws-appsync.ResolvableField",
        "@aws-cdk/aws-appsync.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst info = new appsync.ObjectType('Info', {\n  definition: {\n    node: new appsync.ResolvableField({\n      returnType: appsync.GraphqlType.string(),\n      args: {\n        id: appsync.GraphqlType.string(),\n      },\n      dataSource: api.addNoneDataSource('none'),\n      requestMappingTemplate: dummyRequest,\n      responseMappingTemplate: dummyResponse,\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "b66927a734456c6c5c3ab476f8678b9f5dc4efe72c5850d3fa339e1e5bf4418d"
    },
    "a31080d569abf4c7b6a6be516555e6e159dcf26038ed910a80e28ecb19dc750d": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# film_node: appsync.ObjectType\n# dummy_request: appsync.MappingTemplate\n# dummy_response: appsync.MappingTemplate\n\n\nstring = appsync.GraphqlType.string()\nint = appsync.GraphqlType.int()\napi.add_mutation(\"addFilm\", appsync.ResolvableField(\n    return_type=film_node.attribute(),\n    args={\"name\": string, \"film_number\": int},\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=dummy_request,\n    response_mapping_template=dummy_response\n))",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nObjectType filmNode;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\n\nGraphqlType string = GraphqlType.String();\nGraphqlType int = GraphqlType.Int();\napi.AddMutation(\"addFilm\", new ResolvableField(new ResolvableFieldOptions {\n    ReturnType = filmNode.Attribute(),\n    Args = new Dictionary<string, GraphqlType> { { \"name\", string }, { \"film_number\", int } },\n    DataSource = api.AddNoneDataSource(\"none\"),\n    RequestMappingTemplate = dummyRequest,\n    ResponseMappingTemplate = dummyResponse\n}));",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nObjectType filmNode;\nMappingTemplate dummyRequest;\nMappingTemplate dummyResponse;\n\n\nGraphqlType string = GraphqlType.string();\nGraphqlType int = GraphqlType.int();\napi.addMutation(\"addFilm\", ResolvableField.Builder.create()\n        .returnType(filmNode.attribute())\n        .args(Map.of(\"name\", string, \"film_number\", int))\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .requestMappingTemplate(dummyRequest)\n        .responseMappingTemplate(dummyResponse)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar filmNode objectType\nvar dummyRequest mappingTemplate\nvar dummyResponse mappingTemplate\n\n\nstring := appsync.graphqlType.string()\nint := appsync.graphqlType.int()\napi.addMutation(jsii.String(\"addFilm\"), appsync.NewResolvableField(&resolvableFieldOptions{\n\treturnType: filmNode.attribute(),\n\targs: map[string]*graphqlType{\n\t\t\"name\": string,\n\t\t\"film_number\": int,\n\t},\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\trequestMappingTemplate: dummyRequest,\n\tresponseMappingTemplate: dummyResponse,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const filmNode: appsync.ObjectType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n\nconst string = appsync.GraphqlType.string();\nconst int = appsync.GraphqlType.int();\napi.addMutation('addFilm', new appsync.ResolvableField({\n  returnType: filmNode.attribute(),\n  args: { name: string, film_number: int },\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.ResolvableFieldOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApi#addMutation",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#int",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.InterfaceType#attribute",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.ResolvableField",
        "@aws-cdk/aws-appsync.ResolvableFieldOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const filmNode: appsync.ObjectType;\ndeclare const dummyRequest: appsync.MappingTemplate;\ndeclare const dummyResponse: appsync.MappingTemplate;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst string = appsync.GraphqlType.string();\nconst int = appsync.GraphqlType.int();\napi.addMutation('addFilm', new appsync.ResolvableField({\n  returnType: filmNode.attribute(),\n  args: { name: string, film_number: int },\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: dummyRequest,\n  responseMappingTemplate: dummyResponse,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 39,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 2,
        "194": 8,
        "196": 5,
        "197": 1,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "264a72a12c64f55a44ba9805a3f1ba3f09edcd1e061f298a892a0555fb58dc1d"
    },
    "43d64c665f760abf6ca76d6e66f66e3dff453f213376e691e9073ed1f27e5996": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# appsync_function: appsync.AppsyncFunction\n\n\npipeline_resolver = appsync.Resolver(self, \"pipeline\",\n    api=api,\n    data_source=api.add_none_data_source(\"none\"),\n    type_name=\"typeName\",\n    field_name=\"fieldName\",\n    request_mapping_template=appsync.MappingTemplate.from_file(\"beforeRequest.vtl\"),\n    pipeline_config=[appsync_function],\n    response_mapping_template=appsync.MappingTemplate.from_file(\"afterResponse.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nAppsyncFunction appsyncFunction;\n\n\nResolver pipelineResolver = new Resolver(this, \"pipeline\", new ResolverProps {\n    Api = api,\n    DataSource = api.AddNoneDataSource(\"none\"),\n    TypeName = \"typeName\",\n    FieldName = \"fieldName\",\n    RequestMappingTemplate = MappingTemplate.FromFile(\"beforeRequest.vtl\"),\n    PipelineConfig = new [] { appsyncFunction },\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"afterResponse.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nAppsyncFunction appsyncFunction;\n\n\nResolver pipelineResolver = Resolver.Builder.create(this, \"pipeline\")\n        .api(api)\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .typeName(\"typeName\")\n        .fieldName(\"fieldName\")\n        .requestMappingTemplate(MappingTemplate.fromFile(\"beforeRequest.vtl\"))\n        .pipelineConfig(List.of(appsyncFunction))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"afterResponse.vtl\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar appsyncFunction appsyncFunction\n\n\npipelineResolver := appsync.NewResolver(this, jsii.String(\"pipeline\"), &resolverProps{\n\tapi: api,\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\ttypeName: jsii.String(\"typeName\"),\n\tfieldName: jsii.String(\"fieldName\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"beforeRequest.vtl\")),\n\tpipelineConfig: []iAppsyncFunction{\n\t\tappsyncFunction,\n\t},\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"afterResponse.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.Resolver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromFile",
        "@aws-cdk/aws-appsync.Resolver",
        "@aws-cdk/aws-appsync.ResolverProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "79e3670bab51bf83f6d649b5c6929b368cdb663cefd7df83d9a3dedb3b84ea8c"
    },
    "4d679be949f0ca590b8e17d421f124d8e2039d37689e2741c0fde29d5078d9bc": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n# appsync_function: appsync.AppsyncFunction\n\n\npipeline_resolver = appsync.Resolver(self, \"pipeline\",\n    api=api,\n    data_source=api.add_none_data_source(\"none\"),\n    type_name=\"typeName\",\n    field_name=\"fieldName\",\n    request_mapping_template=appsync.MappingTemplate.from_file(\"beforeRequest.vtl\"),\n    pipeline_config=[appsync_function],\n    response_mapping_template=appsync.MappingTemplate.from_file(\"afterResponse.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\nAppsyncFunction appsyncFunction;\n\n\nResolver pipelineResolver = new Resolver(this, \"pipeline\", new ResolverProps {\n    Api = api,\n    DataSource = api.AddNoneDataSource(\"none\"),\n    TypeName = \"typeName\",\n    FieldName = \"fieldName\",\n    RequestMappingTemplate = MappingTemplate.FromFile(\"beforeRequest.vtl\"),\n    PipelineConfig = new [] { appsyncFunction },\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"afterResponse.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\nAppsyncFunction appsyncFunction;\n\n\nResolver pipelineResolver = Resolver.Builder.create(this, \"pipeline\")\n        .api(api)\n        .dataSource(api.addNoneDataSource(\"none\"))\n        .typeName(\"typeName\")\n        .fieldName(\"fieldName\")\n        .requestMappingTemplate(MappingTemplate.fromFile(\"beforeRequest.vtl\"))\n        .pipelineConfig(List.of(appsyncFunction))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"afterResponse.vtl\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\nvar appsyncFunction appsyncFunction\n\n\npipelineResolver := appsync.NewResolver(this, jsii.String(\"pipeline\"), &resolverProps{\n\tapi: api,\n\tdataSource: api.addNoneDataSource(jsii.String(\"none\")),\n\ttypeName: jsii.String(\"typeName\"),\n\tfieldName: jsii.String(\"fieldName\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"beforeRequest.vtl\")),\n\tpipelineConfig: []iAppsyncFunction{\n\t\tappsyncFunction,\n\t},\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"afterResponse.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.ResolverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addNoneDataSource",
        "@aws-cdk/aws-appsync.IGraphqlApi",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromFile",
        "@aws-cdk/aws-appsync.Resolver",
        "@aws-cdk/aws-appsync.ResolverProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "79e3670bab51bf83f6d649b5c6929b368cdb663cefd7df83d9a3dedb3b84ea8c"
    },
    "72bbeddb159827c54e2e262e92a550541de66c5588987748a16015b58931ff24": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"api\",\n    name=\"api\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\"))\n)\n\nhttp_ds = api.add_http_data_source(\"ds\", \"https://states.amazonaws.com\",\n    name=\"httpDsWithStepF\",\n    description=\"from appsync to StepFunctions Workflow\",\n    authorization_config=appsync.AwsIamConfig(\n        signing_region=\"us-east-1\",\n        signing_service_name=\"states\"\n    )\n)\n\nhttp_ds.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"callStepFunction\",\n    request_mapping_template=appsync.MappingTemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.MappingTemplate.from_file(\"response.vtl\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"api\", new GraphqlApiProps {\n    Name = \"api\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\"))\n});\n\nHttpDataSource httpDs = api.AddHttpDataSource(\"ds\", \"https://states.amazonaws.com\", new HttpDataSourceOptions {\n    Name = \"httpDsWithStepF\",\n    Description = \"from appsync to StepFunctions Workflow\",\n    AuthorizationConfig = new AwsIamConfig {\n        SigningRegion = \"us-east-1\",\n        SigningServiceName = \"states\"\n    }\n});\n\nhttpDs.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"callStepFunction\",\n    RequestMappingTemplate = MappingTemplate.FromFile(\"request.vtl\"),\n    ResponseMappingTemplate = MappingTemplate.FromFile(\"response.vtl\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"api\")\n        .name(\"api\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .build();\n\nHttpDataSource httpDs = api.addHttpDataSource(\"ds\", \"https://states.amazonaws.com\", HttpDataSourceOptions.builder()\n        .name(\"httpDsWithStepF\")\n        .description(\"from appsync to StepFunctions Workflow\")\n        .authorizationConfig(AwsIamConfig.builder()\n                .signingRegion(\"us-east-1\")\n                .signingServiceName(\"states\")\n                .build())\n        .build());\n\nhttpDs.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"callStepFunction\")\n        .requestMappingTemplate(MappingTemplate.fromFile(\"request.vtl\"))\n        .responseMappingTemplate(MappingTemplate.fromFile(\"response.vtl\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"api\"), &graphqlApiProps{\n\tname: jsii.String(\"api\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n})\n\nhttpDs := api.addHttpDataSource(jsii.String(\"ds\"), jsii.String(\"https://states.amazonaws.com\"), &httpDataSourceOptions{\n\tname: jsii.String(\"httpDsWithStepF\"),\n\tdescription: jsii.String(\"from appsync to StepFunctions Workflow\"),\n\tauthorizationConfig: &awsIamConfig{\n\t\tsigningRegion: jsii.String(\"us-east-1\"),\n\t\tsigningServiceName: jsii.String(\"states\"),\n\t},\n})\n\nhttpDs.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"callStepFunction\"),\n\trequestMappingTemplate: appsync.mappingTemplate.fromFile(jsii.String(\"request.vtl\")),\n\tresponseMappingTemplate: appsync.*mappingTemplate.fromFile(jsii.String(\"response.vtl\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.Schema"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AwsIamConfig",
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addHttpDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.HttpDataSource",
        "@aws-cdk/aws-appsync.HttpDataSourceOptions",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromFile",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#fromAsset",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 31,
        "104": 1,
        "193": 4,
        "194": 10,
        "196": 6,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 11
      },
      "fqnsFingerprint": "91db1b76303125e8cb2d4cc9df0aa26846d1f1ac73592f12fa98caa15d77f537"
    },
    "2be657d1eb3a9457c27f0aabd2d5ad66e1bb50345046f467d2d2235f9bdc2be9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\nschema_options = appsync.SchemaOptions(\n    file_path=\"filePath\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nSchemaOptions schemaOptions = new SchemaOptions {\n    FilePath = \"filePath\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nSchemaOptions schemaOptions = SchemaOptions.builder()\n        .filePath(\"filePath\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nschemaOptions := &schemaOptions{\n\tfilePath: jsii.String(\"filePath\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nconst schemaOptions: appsync.SchemaOptions = {\n  filePath: 'filePath',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.SchemaOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.SchemaOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst schemaOptions: appsync.SchemaOptions = {\n  filePath: 'filePath',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4ac30e0ad41d0681413e361529f06daca1a3466bc48221e269d76802b8f7513e"
    },
    "e2eb1c8be965db924962b875a054d539feb50ca1e0d3229e5b8ba037478da97a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\n\n# assign: appsync.Assign\n\nsort_key_step = appsync.SortKeyStep(assign, \"skey\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\n\nAssign assign;\n\nSortKeyStep sortKeyStep = new SortKeyStep(assign, \"skey\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\n\nAssign assign;\n\nSortKeyStep sortKeyStep = new SortKeyStep(assign, \"skey\");",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\n\nvar assign assign\n\nsortKeyStep := appsync.NewSortKeyStep(assign, jsii.String(\"skey\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const assign: appsync.Assign;\nconst sortKeyStep = new appsync.SortKeyStep(assign, 'skey');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.SortKeyStep"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.Assign",
        "@aws-cdk/aws-appsync.SortKeyStep"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\n\ndeclare const assign: appsync.Assign;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sortKeyStep = new appsync.SortKeyStep(assign, 'skey');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "fb06243aa29ea3e1f60a3ce0fd4b67f7970d85728b145356352194bd235bee9a"
    },
    "d8f1c1654310f9ec40b04704fb8b9573e5f9f626ec68c192b9cd3f72bc3065e6": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\nstring = appsync.GraphqlType.string()\nhuman = appsync.ObjectType(\"Human\", definition={\"name\": string})\ndroid = appsync.ObjectType(\"Droid\", definition={\"name\": string})\nstarship = appsync.ObjectType(\"Starship\", definition={\"name\": string})\nsearch = appsync.UnionType(\"Search\",\n    definition=[human, droid, starship]\n)\napi.add_type(search)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\nGraphqlType string = GraphqlType.String();\nObjectType human = new ObjectType(\"Human\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nObjectType droid = new ObjectType(\"Droid\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nObjectType starship = new ObjectType(\"Starship\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nUnionType search = new UnionType(\"Search\", new UnionTypeOptions {\n    Definition = new [] { human, droid, starship }\n});\napi.AddType(search);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\nGraphqlType string = GraphqlType.string();\nObjectType human = ObjectType.Builder.create(\"Human\").definition(Map.of(\"name\", string)).build();\nObjectType droid = ObjectType.Builder.create(\"Droid\").definition(Map.of(\"name\", string)).build();\nObjectType starship = ObjectType.Builder.create(\"Starship\").definition(Map.of(\"name\", string)).build();\nUnionType search = UnionType.Builder.create(\"Search\")\n        .definition(List.of(human, droid, starship))\n        .build();\napi.addType(search);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\nstring := appsync.graphqlType.string()\nhuman := appsync.NewObjectType(jsii.String(\"Human\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"name\": string,\n\t},\n})\ndroid := appsync.NewObjectType(jsii.String(\"Droid\"), &objectTypeOptions{\n\tdefinition: map[string]*iField{\n\t\t\"name\": string,\n\t},\n})\nstarship := appsync.NewObjectType(jsii.String(\"Starship\"), &objectTypeOptions{\n\tdefinition: map[string]*iField{\n\t\t\"name\": string,\n\t},\n})\nsearch := appsync.NewUnionType(jsii.String(\"Search\"), &unionTypeOptions{\n\tdefinition: []iIntermediateType{\n\t\thuman,\n\t\tdroid,\n\t\tstarship,\n\t},\n})\napi.addType(search)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\nconst string = appsync.GraphqlType.string();\nconst human = new appsync.ObjectType('Human', { definition: { name: string } });\nconst droid = new appsync.ObjectType('Droid', { definition: { name: string } });\nconst starship = new appsync.ObjectType('Starship', { definition: { name: string } }););\nconst search = new appsync.UnionType('Search', {\n  definition: [ human, droid, starship ],\n});\napi.addType(search);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.UnionType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.GraphqlApi#addType",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.IIntermediateType",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions",
        "@aws-cdk/aws-appsync.UnionType",
        "@aws-cdk/aws-appsync.UnionTypeOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst string = appsync.GraphqlType.string();\nconst human = new appsync.ObjectType('Human', { definition: { name: string } });\nconst droid = new appsync.ObjectType('Droid', { definition: { name: string } });\nconst starship = new appsync.ObjectType('Starship', { definition: { name: string } });;\nconst search = new appsync.UnionType('Search', {\n  definition: [ human, droid, starship ],\n});\napi.addType(search);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 35,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 7,
        "194": 7,
        "196": 2,
        "197": 4,
        "224": 1,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "eb1fab36d9de23d1c3ad71a5be7696c5ea6cd927c20625cc195fea6a056f4d3c"
    },
    "ccb623fb03911f8c3e60d589c2ddff6c8d227f51af86ccc54e126e498d95836a": {
      "translations": {
        "python": {
          "source": "# api: appsync.GraphqlApi\n\nstring = appsync.GraphqlType.string()\nhuman = appsync.ObjectType(\"Human\", definition={\"name\": string})\ndroid = appsync.ObjectType(\"Droid\", definition={\"name\": string})\nstarship = appsync.ObjectType(\"Starship\", definition={\"name\": string})\nsearch = appsync.UnionType(\"Search\",\n    definition=[human, droid, starship]\n)\napi.add_type(search)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api;\n\nGraphqlType string = GraphqlType.String();\nObjectType human = new ObjectType(\"Human\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nObjectType droid = new ObjectType(\"Droid\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nObjectType starship = new ObjectType(\"Starship\", new ObjectTypeOptions { Definition = new Dictionary<string, IField> { { \"name\", string } } });\nUnionType search = new UnionType(\"Search\", new UnionTypeOptions {\n    Definition = new [] { human, droid, starship }\n});\napi.AddType(search);",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api;\n\nGraphqlType string = GraphqlType.string();\nObjectType human = ObjectType.Builder.create(\"Human\").definition(Map.of(\"name\", string)).build();\nObjectType droid = ObjectType.Builder.create(\"Droid\").definition(Map.of(\"name\", string)).build();\nObjectType starship = ObjectType.Builder.create(\"Starship\").definition(Map.of(\"name\", string)).build();\nUnionType search = UnionType.Builder.create(\"Search\")\n        .definition(List.of(human, droid, starship))\n        .build();\napi.addType(search);",
          "version": "1"
        },
        "go": {
          "source": "var api graphqlApi\n\nstring := appsync.graphqlType.string()\nhuman := appsync.NewObjectType(jsii.String(\"Human\"), &objectTypeOptions{\n\tdefinition: map[string]iField{\n\t\t\"name\": string,\n\t},\n})\ndroid := appsync.NewObjectType(jsii.String(\"Droid\"), &objectTypeOptions{\n\tdefinition: map[string]*iField{\n\t\t\"name\": string,\n\t},\n})\nstarship := appsync.NewObjectType(jsii.String(\"Starship\"), &objectTypeOptions{\n\tdefinition: map[string]*iField{\n\t\t\"name\": string,\n\t},\n})\nsearch := appsync.NewUnionType(jsii.String(\"Search\"), &unionTypeOptions{\n\tdefinition: []iIntermediateType{\n\t\thuman,\n\t\tdroid,\n\t\tstarship,\n\t},\n})\napi.addType(search)",
          "version": "1"
        },
        "$": {
          "source": "declare const api: appsync.GraphqlApi;\nconst string = appsync.GraphqlType.string();\nconst human = new appsync.ObjectType('Human', { definition: { name: string } });\nconst droid = new appsync.ObjectType('Droid', { definition: { name: string } });\nconst starship = new appsync.ObjectType('Starship', { definition: { name: string } }););\nconst search = new appsync.UnionType('Search', {\n  definition: [ human, droid, starship ],\n});\napi.addType(search);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.UnionTypeOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.GraphqlApi#addType",
        "@aws-cdk/aws-appsync.GraphqlType",
        "@aws-cdk/aws-appsync.GraphqlType#string",
        "@aws-cdk/aws-appsync.IField",
        "@aws-cdk/aws-appsync.IIntermediateType",
        "@aws-cdk/aws-appsync.ObjectType",
        "@aws-cdk/aws-appsync.ObjectTypeOptions",
        "@aws-cdk/aws-appsync.UnionType",
        "@aws-cdk/aws-appsync.UnionTypeOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst string = appsync.GraphqlType.string();\nconst human = new appsync.ObjectType('Human', { definition: { name: string } });\nconst droid = new appsync.ObjectType('Droid', { definition: { name: string } });\nconst starship = new appsync.ObjectType('Starship', { definition: { name: string } });;\nconst search = new appsync.UnionType('Search', {\n  definition: [ human, droid, starship ],\n});\napi.addType(search);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 35,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 7,
        "194": 7,
        "196": 2,
        "197": 4,
        "224": 1,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "eb1fab36d9de23d1c3ad71a5be7696c5ea6cd927c20625cc195fea6a056f4d3c"
    },
    "7280b39294983745f9abd9078a95936ad667051b002e91c3162e574db55862c4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_appsync as appsync\nimport aws_cdk.aws_cognito as cognito\n\n# user_pool: cognito.UserPool\n\nuser_pool_config = appsync.UserPoolConfig(\n    user_pool=user_pool,\n\n    # the properties below are optional\n    app_id_client_regex=\"appIdClientRegex\",\n    default_action=appsync.UserPoolDefaultAction.ALLOW\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AppSync;\nusing Amazon.CDK.AWS.Cognito;\n\nUserPool userPool;\n\nUserPoolConfig userPoolConfig = new UserPoolConfig {\n    UserPool = userPool,\n\n    // the properties below are optional\n    AppIdClientRegex = \"appIdClientRegex\",\n    DefaultAction = UserPoolDefaultAction.ALLOW\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.appsync.*;\nimport software.amazon.awscdk.services.cognito.*;\n\nUserPool userPool;\n\nUserPoolConfig userPoolConfig = UserPoolConfig.builder()\n        .userPool(userPool)\n\n        // the properties below are optional\n        .appIdClientRegex(\"appIdClientRegex\")\n        .defaultAction(UserPoolDefaultAction.ALLOW)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appsync \"github.com/aws-samples/dummy/awscdkawsappsync\"\nimport cognito \"github.com/aws-samples/dummy/awscdkawscognito\"\n\nvar userPool userPool\n\nuserPoolConfig := &userPoolConfig{\n\tuserPool: userPool,\n\n\t// the properties below are optional\n\tappIdClientRegex: jsii.String(\"appIdClientRegex\"),\n\tdefaultAction: appsync.userPoolDefaultAction_ALLOW,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as cognito from '@aws-cdk/aws-cognito';\n\ndeclare const userPool: cognito.UserPool;\nconst userPoolConfig: appsync.UserPoolConfig = {\n  userPool: userPool,\n\n  // the properties below are optional\n  appIdClientRegex: 'appIdClientRegex',\n  defaultAction: appsync.UserPoolDefaultAction.ALLOW,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.UserPoolConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.UserPoolConfig",
        "@aws-cdk/aws-appsync.UserPoolDefaultAction",
        "@aws-cdk/aws-appsync.UserPoolDefaultAction#ALLOW",
        "@aws-cdk/aws-cognito.IUserPool"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync from '@aws-cdk/aws-appsync';\nimport * as cognito from '@aws-cdk/aws-cognito';\n\ndeclare const userPool: cognito.UserPool;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst userPoolConfig: appsync.UserPoolConfig = {\n  userPool: userPool,\n\n  // the properties below are optional\n  appIdClientRegex: 'appIdClientRegex',\n  defaultAction: appsync.UserPoolDefaultAction.ALLOW,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "9b08085391ce672794bbac10509cd54ed9ad15d6497a8ab8fd9cf370cfa5052d"
    },
    "aaef04b93ed4c1417ced969d506a8f0c97248f77332c1509a52eba8659e87b65": {
      "translations": {
        "python": {
          "source": "api = appsync.GraphqlApi(self, \"Api\",\n    name=\"demo\",\n    schema=appsync.Schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.AuthorizationConfig(\n        default_authorization=appsync.AuthorizationMode(\n            authorization_type=appsync.AuthorizationType.IAM\n        )\n    ),\n    xray_enabled=True\n)\n\ndemo_table = dynamodb.Table(self, \"DemoTable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\ndemo_dS = api.add_dynamo_db_data_source(\"demoDataSource\", demo_table)\n\n# Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemo_dS.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getDemos\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_list()\n)\n\n# Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemo_dS.create_resolver(\n    type_name=\"Mutation\",\n    field_name=\"addDemo\",\n    request_mapping_template=appsync.MappingTemplate.dynamo_db_put_item(\n        appsync.PrimaryKey.partition(\"id\").auto(),\n        appsync.Values.projecting(\"input\")),\n    response_mapping_template=appsync.MappingTemplate.dynamo_db_result_item()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "GraphqlApi api = new GraphqlApi(this, \"Api\", new GraphqlApiProps {\n    Name = \"demo\",\n    Schema = Schema.FromAsset(Join(__dirname, \"schema.graphql\")),\n    AuthorizationConfig = new AuthorizationConfig {\n        DefaultAuthorization = new AuthorizationMode {\n            AuthorizationType = AuthorizationType.IAM\n        }\n    },\n    XrayEnabled = true\n});\n\nTable demoTable = new Table(this, \"DemoTable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nDynamoDbDataSource demoDS = api.AddDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getDemos\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbScanTable(),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultList()\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.CreateResolver(new BaseResolverProps {\n    TypeName = \"Mutation\",\n    FieldName = \"addDemo\",\n    RequestMappingTemplate = MappingTemplate.DynamoDbPutItem(PrimaryKey.Partition(\"id\").Auto(), Values.Projecting(\"input\")),\n    ResponseMappingTemplate = MappingTemplate.DynamoDbResultItem()\n});",
          "version": "1"
        },
        "java": {
          "source": "GraphqlApi api = GraphqlApi.Builder.create(this, \"Api\")\n        .name(\"demo\")\n        .schema(Schema.fromAsset(join(__dirname, \"schema.graphql\")))\n        .authorizationConfig(AuthorizationConfig.builder()\n                .defaultAuthorization(AuthorizationMode.builder()\n                        .authorizationType(AuthorizationType.IAM)\n                        .build())\n                .build())\n        .xrayEnabled(true)\n        .build();\n\nTable demoTable = Table.Builder.create(this, \"DemoTable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nDynamoDbDataSource demoDS = api.addDynamoDbDataSource(\"demoDataSource\", demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getDemos\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbScanTable())\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultList())\n        .build());\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(BaseResolverProps.builder()\n        .typeName(\"Mutation\")\n        .fieldName(\"addDemo\")\n        .requestMappingTemplate(MappingTemplate.dynamoDbPutItem(PrimaryKey.partition(\"id\").auto(), Values.projecting(\"input\")))\n        .responseMappingTemplate(MappingTemplate.dynamoDbResultItem())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "api := appsync.NewGraphqlApi(this, jsii.String(\"Api\"), &graphqlApiProps{\n\tname: jsii.String(\"demo\"),\n\tschema: appsync.schema.fromAsset(path.join(__dirname, jsii.String(\"schema.graphql\"))),\n\tauthorizationConfig: &authorizationConfig{\n\t\tdefaultAuthorization: &authorizationMode{\n\t\t\tauthorizationType: appsync.authorizationType_IAM,\n\t\t},\n\t},\n\txrayEnabled: jsii.Boolean(true),\n})\n\ndemoTable := dynamodb.NewTable(this, jsii.String(\"DemoTable\"), &tableProps{\n\tpartitionKey: &attribute{\n\t\tname: jsii.String(\"id\"),\n\t\ttype: dynamodb.attributeType_STRING,\n\t},\n})\n\ndemoDS := api.addDynamoDbDataSource(jsii.String(\"demoDataSource\"), demoTable)\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Query\"),\n\tfieldName: jsii.String(\"getDemos\"),\n\trequestMappingTemplate: appsync.mappingTemplate.dynamoDbScanTable(),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultList(),\n})\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver(&baseResolverProps{\n\ttypeName: jsii.String(\"Mutation\"),\n\tfieldName: jsii.String(\"addDemo\"),\n\trequestMappingTemplate: appsync.*mappingTemplate.dynamoDbPutItem(appsync.primaryKey.partition(jsii.String(\"id\")).auto(), appsync.values.projecting(jsii.String(\"input\"))),\n\tresponseMappingTemplate: appsync.*mappingTemplate.dynamoDbResultItem(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-appsync.Values"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.AttributeValues",
        "@aws-cdk/aws-appsync.AuthorizationConfig",
        "@aws-cdk/aws-appsync.AuthorizationMode",
        "@aws-cdk/aws-appsync.AuthorizationType",
        "@aws-cdk/aws-appsync.AuthorizationType#IAM",
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.DynamoDbDataSource",
        "@aws-cdk/aws-appsync.GraphqlApi",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addDynamoDbDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiProps",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbPutItem",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbResultItem",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbResultList",
        "@aws-cdk/aws-appsync.MappingTemplate#dynamoDbScanTable",
        "@aws-cdk/aws-appsync.PartitionKeyStep#auto",
        "@aws-cdk/aws-appsync.PrimaryKey",
        "@aws-cdk/aws-appsync.PrimaryKey#partition",
        "@aws-cdk/aws-appsync.Schema",
        "@aws-cdk/aws-appsync.Schema#fromAsset",
        "@aws-cdk/aws-appsync.Values",
        "@aws-cdk/aws-appsync.Values#projecting",
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.Schema.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\ndemoDS.createResolver({\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver({\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 62,
        "104": 2,
        "106": 1,
        "193": 7,
        "194": 25,
        "196": 12,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 17
      },
      "fqnsFingerprint": "7337b04f973e903939f6c7bb1b76cfa36d36eb00ba694263e7981c95b7b1a65b"
    }
  }
}