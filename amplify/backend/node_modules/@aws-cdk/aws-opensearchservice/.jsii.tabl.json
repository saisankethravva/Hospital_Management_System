{
  "version": "2",
  "toolVersion": "1.67.0",
  "snippets": {
    "a49d6af01795f32b495544e23fff4813934805017b8855d29cfdde0c1a444dc5": {
      "translations": {
        "python": {
          "source": "dev_domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain devDomain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain devDomain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "devDomain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const devDomain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 33
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst devDomain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "2ef9c2ec44a447dbae521d5609ca5f02820abebe53986066179a077e56e47709"
    },
    "9bfc80418ee794b8ff14bcc5cd301d92d3bd3ab8e24a3bda9bff1d2c67010997": {
      "translations": {
        "python": {
          "source": "dev_domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    enable_version_upgrade=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain devDomain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    EnableVersionUpgrade = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain devDomain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .enableVersionUpgrade(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "devDomain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tenableVersionUpgrade: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "const devDomain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  enableVersionUpgrade: true, // defaults to false\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 41
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst devDomain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  enableVersionUpgrade: true, // defaults to false\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "2ef9c2ec44a447dbae521d5609ca5f02820abebe53986066179a077e56e47709"
    },
    "36b0e2b33c9222f03ab8c623f0d3e4dc2746983cd15d1152bb10e64e34077bc4": {
      "translations": {
        "python": {
          "source": "prod_domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    capacity=opensearch.CapacityConfig(\n        master_nodes=5,\n        data_nodes=20\n    ),\n    ebs=opensearch.EbsOptions(\n        volume_size=20\n    ),\n    zone_awareness=opensearch.ZoneAwarenessConfig(\n        availability_zone_count=3\n    ),\n    logging=opensearch.LoggingOptions(\n        slow_search_log_enabled=True,\n        app_log_enabled=True,\n        slow_index_log_enabled=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain prodDomain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    Capacity = new CapacityConfig {\n        MasterNodes = 5,\n        DataNodes = 20\n    },\n    Ebs = new EbsOptions {\n        VolumeSize = 20\n    },\n    ZoneAwareness = new ZoneAwarenessConfig {\n        AvailabilityZoneCount = 3\n    },\n    Logging = new LoggingOptions {\n        SlowSearchLogEnabled = true,\n        AppLogEnabled = true,\n        SlowIndexLogEnabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain prodDomain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .capacity(CapacityConfig.builder()\n                .masterNodes(5)\n                .dataNodes(20)\n                .build())\n        .ebs(EbsOptions.builder()\n                .volumeSize(20)\n                .build())\n        .zoneAwareness(ZoneAwarenessConfig.builder()\n                .availabilityZoneCount(3)\n                .build())\n        .logging(LoggingOptions.builder()\n                .slowSearchLogEnabled(true)\n                .appLogEnabled(true)\n                .slowIndexLogEnabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "prodDomain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tcapacity: &capacityConfig{\n\t\tmasterNodes: jsii.Number(5),\n\t\tdataNodes: jsii.Number(20),\n\t},\n\tebs: &ebsOptions{\n\t\tvolumeSize: jsii.Number(20),\n\t},\n\tzoneAwareness: &zoneAwarenessConfig{\n\t\tavailabilityZoneCount: jsii.Number(3),\n\t},\n\tlogging: &loggingOptions{\n\t\tslowSearchLogEnabled: jsii.Boolean(true),\n\t\tappLogEnabled: jsii.Boolean(true),\n\t\tslowIndexLogEnabled: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const prodDomain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  capacity: {\n    masterNodes: 5,\n    dataNodes: 20,\n  },\n  ebs: {\n    volumeSize: 20,\n  },\n  zoneAwareness: {\n    availabilityZoneCount: 3,\n  },\n  logging: {\n    slowSearchLogEnabled: true,\n    appLogEnabled: true,\n    slowIndexLogEnabled: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 50
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CapacityConfig",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EbsOptions",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "@aws-cdk/aws-opensearchservice.LoggingOptions",
        "@aws-cdk/aws-opensearchservice.ZoneAwarenessConfig",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst prodDomain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  capacity: {\n    masterNodes: 5,\n    dataNodes: 20,\n  },\n  ebs: {\n    volumeSize: 20,\n  },\n  zoneAwareness: {\n    availabilityZoneCount: 3,\n  },\n  logging: {\n    slowSearchLogEnabled: true,\n    appLogEnabled: true,\n    slowIndexLogEnabled: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 1,
        "75": 18,
        "104": 1,
        "106": 3,
        "193": 5,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 12
      },
      "fqnsFingerprint": "f5623f119a0be5a5bbbc0cda6698ec01359d59dcb465f194077375d59d4f1700"
    },
    "2dfcfceb6ce79923447942bf1634c9bd5e8c8e31619bdcd6bc0901cd818d11a1": {
      "translations": {
        "python": {
          "source": "slr = iam.CfnServiceLinkedRole(self, \"Service Linked Role\",\n    aws_service_name=\"es.amazonaws.com\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CfnServiceLinkedRole slr = new CfnServiceLinkedRole(this, \"Service Linked Role\", new CfnServiceLinkedRoleProps {\n    AwsServiceName = \"es.amazonaws.com\"\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnServiceLinkedRole slr = CfnServiceLinkedRole.Builder.create(this, \"Service Linked Role\")\n        .awsServiceName(\"es.amazonaws.com\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "slr := iam.NewCfnServiceLinkedRole(this, jsii.String(\"Service Linked Role\"), &cfnServiceLinkedRoleProps{\n\tawsServiceName: jsii.String(\"es.amazonaws.com\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const slr = new iam.CfnServiceLinkedRole(this, 'Service Linked Role', {\n  awsServiceName: 'es.amazonaws.com',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 92
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.CfnServiceLinkedRole",
        "@aws-cdk/aws-iam.CfnServiceLinkedRoleProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst slr = new iam.CfnServiceLinkedRole(this, 'Service Linked Role', {\n  awsServiceName: 'es.amazonaws.com',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "6180e6715b98dc4c5671e9278fa77925c150afafb6e11021fb1410db628d5cf4"
    },
    "a4817bf6edf54b42ef84faad623e65060f6e13e28176f8adef85e676bbfcafa1": {
      "translations": {
        "python": {
          "source": "domain_endpoint = \"https://my-domain-jcjotrt6f7otem4sqcwbch3c4u.us-east-1.es.amazonaws.com\"\ndomain = opensearch.Domain.from_domain_endpoint(self, \"ImportedDomain\", domain_endpoint)",
          "version": "2"
        },
        "csharp": {
          "source": "string domainEndpoint = \"https://my-domain-jcjotrt6f7otem4sqcwbch3c4u.us-east-1.es.amazonaws.com\";\nIDomain domain = Domain.FromDomainEndpoint(this, \"ImportedDomain\", domainEndpoint);",
          "version": "1"
        },
        "java": {
          "source": "String domainEndpoint = \"https://my-domain-jcjotrt6f7otem4sqcwbch3c4u.us-east-1.es.amazonaws.com\";\nIDomain domain = Domain.fromDomainEndpoint(this, \"ImportedDomain\", domainEndpoint);",
          "version": "1"
        },
        "go": {
          "source": "domainEndpoint := \"https://my-domain-jcjotrt6f7otem4sqcwbch3c4u.us-east-1.es.amazonaws.com\"\ndomain := opensearch.domain.fromDomainEndpoint(this, jsii.String(\"ImportedDomain\"), domainEndpoint)",
          "version": "1"
        },
        "$": {
          "source": "const domainEndpoint = 'https://my-domain-jcjotrt6f7otem4sqcwbch3c4u.us-east-1.es.amazonaws.com';\nconst domain = opensearch.Domain.fromDomainEndpoint(this, 'ImportedDomain', domainEndpoint);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 103
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.Domain#fromDomainEndpoint",
        "@aws-cdk/aws-opensearchservice.IDomain",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst domainEndpoint = 'https://my-domain-jcjotrt6f7otem4sqcwbch3c4u.us-east-1.es.amazonaws.com';\nconst domain = opensearch.Domain.fromDomainEndpoint(this, 'ImportedDomain', domainEndpoint);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "1e1e10ccdbbfc0c74abac1c8aafd7e2e4d97c921565e141a6c1c67a59a85c0ae"
    },
    "a04d076598447deac1dadca3f2387402c743041c7a8da2b42688913aaa6dc90b": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n# domain: opensearch.Domain\n\n\n# Grant write access to the app-search index\ndomain.grant_index_write(\"app-search\", fn)\n\n# Grant read access to the 'app-search/_search' path\ndomain.grant_path_read(\"app-search/_search\", fn)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\nDomain domain;\n\n\n// Grant write access to the app-search index\ndomain.GrantIndexWrite(\"app-search\", fn);\n\n// Grant read access to the 'app-search/_search' path\ndomain.GrantPathRead(\"app-search/_search\", fn);",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\nDomain domain;\n\n\n// Grant write access to the app-search index\ndomain.grantIndexWrite(\"app-search\", fn);\n\n// Grant read access to the 'app-search/_search' path\ndomain.grantPathRead(\"app-search/_search\", fn);",
          "version": "1"
        },
        "go": {
          "source": "var fn function\nvar domain domain\n\n\n// Grant write access to the app-search index\ndomain.grantIndexWrite(jsii.String(\"app-search\"), fn)\n\n// Grant read access to the 'app-search/_search' path\ndomain.grantPathRead(jsii.String(\"app-search/_search\"), fn)",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\ndeclare const domain: opensearch.Domain;\n\n// Grant write access to the app-search index\ndomain.grantIndexWrite('app-search', fn);\n\n// Grant read access to the 'app-search/_search' path\ndomain.grantPathRead('app-search/_search', fn);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 114
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\ndeclare const domain: opensearch.Domain;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Grant write access to the app-search index\ndomain.grantIndexWrite('app-search', fn);\n\n// Grant read access to the 'app-search/_search' path\ndomain.grantPathRead('app-search/_search', fn);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 2,
        "196": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "1323b60ab94a88d4cf4c7c846ab0af5927a24713050028234cb9426c28ace47b"
    },
    "df692f38bb7dc063b49a8a56ac8a05496e924eaef8ceb8b6af78a90951edade3": {
      "translations": {
        "python": {
          "source": "domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    ebs=opensearch.EbsOptions(\n        volume_size=100,\n        volume_type=ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD\n    ),\n    node_to_node_encryption=True,\n    encryption_at_rest=opensearch.EncryptionAtRestOptions(\n        enabled=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    Ebs = new EbsOptions {\n        VolumeSize = 100,\n        VolumeType = EbsDeviceVolumeType.GENERAL_PURPOSE_SSD\n    },\n    NodeToNodeEncryption = true,\n    EncryptionAtRest = new EncryptionAtRestOptions {\n        Enabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .ebs(EbsOptions.builder()\n                .volumeSize(100)\n                .volumeType(EbsDeviceVolumeType.GENERAL_PURPOSE_SSD)\n                .build())\n        .nodeToNodeEncryption(true)\n        .encryptionAtRest(EncryptionAtRestOptions.builder()\n                .enabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "domain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tebs: &ebsOptions{\n\t\tvolumeSize: jsii.Number(100),\n\t\tvolumeType: ec2.ebsDeviceVolumeType_GENERAL_PURPOSE_SSD,\n\t},\n\tnodeToNodeEncryption: jsii.Boolean(true),\n\tencryptionAtRest: &encryptionAtRestOptions{\n\t\tenabled: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  ebs: {\n    volumeSize: 100,\n    volumeType: ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD,\n  },\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 129
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType",
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType#GENERAL_PURPOSE_SSD",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EbsOptions",
        "@aws-cdk/aws-opensearchservice.EncryptionAtRestOptions",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  ebs: {\n    volumeSize: 100,\n    volumeType: ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD,\n  },\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 16,
        "104": 1,
        "106": 2,
        "193": 3,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "4224c04b42a194d41f6eb121e3cf7ae8dd36e77f5c75c91f8692aba75309f83f"
    },
    "a999c0e2ad680fe84927acc88bb8238986f377377f683d4cf213b41a43f3be6c": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"Vpc\")\ndomain_props = opensearch.DomainProps(\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    removal_policy=RemovalPolicy.DESTROY,\n    vpc=vpc,\n    # must be enabled since our VPC contains multiple private subnets.\n    zone_awareness=opensearch.ZoneAwarenessConfig(\n        enabled=True\n    ),\n    capacity=opensearch.CapacityConfig(\n        # must be an even number since the default az count is 2.\n        data_nodes=2\n    )\n)\nopensearch.Domain(self, \"Domain\", domain_props)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\nDomainProps domainProps = new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    RemovalPolicy = RemovalPolicy.DESTROY,\n    Vpc = vpc,\n    // must be enabled since our VPC contains multiple private subnets.\n    ZoneAwareness = new ZoneAwarenessConfig {\n        Enabled = true\n    },\n    Capacity = new CapacityConfig {\n        // must be an even number since the default az count is 2.\n        DataNodes = 2\n    }\n};\nnew Domain(this, \"Domain\", domainProps);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\nDomainProps domainProps = DomainProps.builder()\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .vpc(vpc)\n        // must be enabled since our VPC contains multiple private subnets.\n        .zoneAwareness(ZoneAwarenessConfig.builder()\n                .enabled(true)\n                .build())\n        .capacity(CapacityConfig.builder()\n                // must be an even number since the default az count is 2.\n                .dataNodes(2)\n                .build())\n        .build();\nnew Domain(this, \"Domain\", domainProps);",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.NewVpc(this, jsii.String(\"Vpc\"))\ndomainProps := &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tremovalPolicy: *awscdkcore.RemovalPolicy_DESTROY,\n\tvpc: vpc,\n\t// must be enabled since our VPC contains multiple private subnets.\n\tzoneAwareness: &zoneAwarenessConfig{\n\t\tenabled: jsii.Boolean(true),\n\t},\n\tcapacity: &capacityConfig{\n\t\t// must be an even number since the default az count is 2.\n\t\tdataNodes: jsii.Number(2),\n\t},\n}\nopensearch.NewDomain(this, jsii.String(\"Domain\"), domainProps)",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'Vpc');\nconst domainProps: opensearch.DomainProps = {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  removalPolicy: RemovalPolicy.DESTROY,\n  vpc,\n  // must be enabled since our VPC contains multiple private subnets.\n  zoneAwareness: {\n    enabled: true,\n  },\n  capacity: {\n    // must be an even number since the default az count is 2.\n    dataNodes: 2,\n  },\n};\nnew opensearch.Domain(this, 'Domain', domainProps);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 153
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-opensearchservice.CapacityConfig",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "@aws-cdk/aws-opensearchservice.ZoneAwarenessConfig",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'Vpc');\nconst domainProps: opensearch.DomainProps = {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  removalPolicy: RemovalPolicy.DESTROY,\n  vpc,\n  // must be enabled since our VPC contains multiple private subnets.\n  zoneAwareness: {\n    enabled: true,\n  },\n  capacity: {\n    // must be an even number since the default az count is 2.\n    dataNodes: 2,\n  },\n};\nnew opensearch.Domain(this, 'Domain', domainProps);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 21,
        "104": 2,
        "106": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1
      },
      "fqnsFingerprint": "fe53e64cd2937879f83d23b21b5d40113a822e8645387c05f578756e973431a3"
    },
    "7879463d0b9adfb7dd2a837567892f59a64c46aeacffe5f5cf088c0a2fddc95c": {
      "translations": {
        "python": {
          "source": "# domain: opensearch.Domain\n\nfree_storage_space = domain.metric_free_storage_space()\nmaster_sys_memory_utilization = domain.metric(\"MasterSysMemoryUtilization\")",
          "version": "2"
        },
        "csharp": {
          "source": "Domain domain;\n\nMetric freeStorageSpace = domain.MetricFreeStorageSpace();\nMetric masterSysMemoryUtilization = domain.Metric(\"MasterSysMemoryUtilization\");",
          "version": "1"
        },
        "java": {
          "source": "Domain domain;\n\nMetric freeStorageSpace = domain.metricFreeStorageSpace();\nMetric masterSysMemoryUtilization = domain.metric(\"MasterSysMemoryUtilization\");",
          "version": "1"
        },
        "go": {
          "source": "var domain domain\n\nfreeStorageSpace := domain.metricFreeStorageSpace()\nmasterSysMemoryUtilization := domain.metric(jsii.String(\"MasterSysMemoryUtilization\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const domain: opensearch.Domain;\nconst freeStorageSpace = domain.metricFreeStorageSpace();\nconst masterSysMemoryUtilization = domain.metric('MasterSysMemoryUtilization');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 178
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const domain: opensearch.Domain;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst freeStorageSpace = domain.metricFreeStorageSpace();\nconst masterSysMemoryUtilization = domain.metric('MasterSysMemoryUtilization');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "196": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "e7f611dea3980ddf6b3c7294b6be09f970eafe1ce82120fe915fb0eeae7422a3"
    },
    "87cd95b4bed71f9b53a165f4acfd20350aadc36c456471e53c0dc88ba1834497": {
      "translations": {
        "python": {
          "source": "domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    enforce_https=True,\n    node_to_node_encryption=True,\n    encryption_at_rest=opensearch.EncryptionAtRestOptions(\n        enabled=True\n    ),\n    fine_grained_access_control=opensearch.AdvancedSecurityOptions(\n        master_user_name=\"master-user\"\n    )\n)\n\nmaster_user_password = domain.master_user_password",
          "version": "2"
        },
        "csharp": {
          "source": "Domain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    EnforceHttps = true,\n    NodeToNodeEncryption = true,\n    EncryptionAtRest = new EncryptionAtRestOptions {\n        Enabled = true\n    },\n    FineGrainedAccessControl = new AdvancedSecurityOptions {\n        MasterUserName = \"master-user\"\n    }\n});\n\nSecretValue? masterUserPassword = domain.MasterUserPassword;",
          "version": "1"
        },
        "java": {
          "source": "Domain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .enforceHttps(true)\n        .nodeToNodeEncryption(true)\n        .encryptionAtRest(EncryptionAtRestOptions.builder()\n                .enabled(true)\n                .build())\n        .fineGrainedAccessControl(AdvancedSecurityOptions.builder()\n                .masterUserName(\"master-user\")\n                .build())\n        .build();\n\nSecretValue masterUserPassword = domain.getMasterUserPassword();",
          "version": "1"
        },
        "go": {
          "source": "domain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tenforceHttps: jsii.Boolean(true),\n\tnodeToNodeEncryption: jsii.Boolean(true),\n\tencryptionAtRest: &encryptionAtRestOptions{\n\t\tenabled: jsii.Boolean(true),\n\t},\n\tfineGrainedAccessControl: &advancedSecurityOptions{\n\t\tmasterUserName: jsii.String(\"master-user\"),\n\t},\n})\n\nmasterUserPassword := domain.masterUserPassword",
          "version": "1"
        },
        "$": {
          "source": "const domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  enforceHttps: true,\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n  fineGrainedAccessControl: {\n    masterUserName: 'master-user',\n  },\n});\n\nconst masterUserPassword = domain.masterUserPassword;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 191
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.AdvancedSecurityOptions",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.Domain#masterUserPassword",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EncryptionAtRestOptions",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  enforceHttps: true,\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n  fineGrainedAccessControl: {\n    masterUserName: 'master-user',\n  },\n});\n\nconst masterUserPassword = domain.masterUserPassword;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "106": 3,
        "193": 3,
        "194": 4,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7
      },
      "fqnsFingerprint": "e42e2ffe0b2586b1f023f81c3eed8e4b6bc736dc179fce071229a5942777c054"
    },
    "e0597d1113c77819ea1e3dbfe5409abd97c649c7f2dbad90404bf79abb6d3472": {
      "translations": {
        "python": {
          "source": "domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    use_unsigned_basic_auth=True\n)\n\nmaster_user_password = domain.master_user_password",
          "version": "2"
        },
        "csharp": {
          "source": "Domain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    UseUnsignedBasicAuth = true\n});\n\nSecretValue? masterUserPassword = domain.MasterUserPassword;",
          "version": "1"
        },
        "java": {
          "source": "Domain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .useUnsignedBasicAuth(true)\n        .build();\n\nSecretValue masterUserPassword = domain.getMasterUserPassword();",
          "version": "1"
        },
        "go": {
          "source": "domain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tuseUnsignedBasicAuth: jsii.Boolean(true),\n})\n\nmasterUserPassword := domain.masterUserPassword",
          "version": "1"
        },
        "$": {
          "source": "const domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  useUnsignedBasicAuth: true,\n});\n\nconst masterUserPassword = domain.masterUserPassword;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 229
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.Domain#masterUserPassword",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  useUnsignedBasicAuth: true,\n});\n\nconst masterUserPassword = domain.masterUserPassword;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 4,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "19055f07f4cc8bac2953f8f9e44e41a8051ffdb8d902615ba26d088a4cb346eb"
    },
    "846d9301adf124fc19b33628b78ff96b38e43581f00c7748a73dac4c029db4a5": {
      "translations": {
        "python": {
          "source": "domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    access_policies=[\n        iam.PolicyStatement(\n            actions=[\"es:*ESHttpPost\", \"es:ESHttpPut*\"],\n            effect=iam.Effect.ALLOW,\n            principals=[iam.AccountPrincipal(\"123456789012\")],\n            resources=[\"*\"]\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    AccessPolicies = new [] {\n        new PolicyStatement(new PolicyStatementProps {\n            Actions = new [] { \"es:*ESHttpPost\", \"es:ESHttpPut*\" },\n            Effect = Effect.ALLOW,\n            Principals = new [] { new AccountPrincipal(\"123456789012\") },\n            Resources = new [] { \"*\" }\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .accessPolicies(List.of(\n            PolicyStatement.Builder.create()\n                    .actions(List.of(\"es:*ESHttpPost\", \"es:ESHttpPut*\"))\n                    .effect(Effect.ALLOW)\n                    .principals(List.of(new AccountPrincipal(\"123456789012\")))\n                    .resources(List.of(\"*\"))\n                    .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "domain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\taccessPolicies: []policyStatement{\n\t\tiam.NewPolicyStatement(&policyStatementProps{\n\t\t\tactions: []*string{\n\t\t\t\tjsii.String(\"es:*ESHttpPost\"),\n\t\t\t\tjsii.String(\"es:ESHttpPut*\"),\n\t\t\t},\n\t\t\teffect: iam.effect_ALLOW,\n\t\t\tprincipals: []iPrincipal{\n\t\t\t\tiam.NewAccountPrincipal(jsii.String(\"123456789012\")),\n\t\t\t},\n\t\t\tresources: []*string{\n\t\t\t\tjsii.String(\"*\"),\n\t\t\t},\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  accessPolicies: [\n    new iam.PolicyStatement({\n      actions: ['es:*ESHttpPost', 'es:ESHttpPut*'],\n      effect: iam.Effect.ALLOW,\n      principals: [new iam.AccountPrincipal('123456789012')],\n      resources: ['*'],\n    }),\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 245
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.Effect",
        "@aws-cdk/aws-iam.Effect#ALLOW",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  accessPolicies: [\n    new iam.PolicyStatement({\n      actions: ['es:*ESHttpPost', 'es:ESHttpPut*'],\n      effect: iam.Effect.ALLOW,\n      principals: [new iam.AccountPrincipal('123456789012')],\n      resources: ['*'],\n    }),\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "192": 4,
        "193": 2,
        "194": 7,
        "197": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "d9c7b66b825bdb80ce3da33c16da2b409bf6994aeb0644b782d35f2ab4a1ad84"
    },
    "a6721c6cc5614c4231e7b0adc49e0556cab3436d0e0629d870ead1e4115979d1": {
      "translations": {
        "python": {
          "source": "domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0\n)\ndomain.add_access_policies(\n    iam.PolicyStatement(\n        actions=[\"es:ESHttpPost\", \"es:ESHttpPut\"],\n        effect=iam.Effect.ALLOW,\n        principals=[iam.AccountPrincipal(\"123456789012\")],\n        resources=[domain.domain_arn, f\"{domain.domainArn}/*\"]\n    ),\n    iam.PolicyStatement(\n        actions=[\"es:ESHttpGet\"],\n        effect=iam.Effect.ALLOW,\n        principals=[iam.AccountPrincipal(\"123456789012\")],\n        resources=[f\"{domain.domainArn}/_all/_settings\", f\"{domain.domainArn}/_cluster/stats\", f\"{domain.domainArn}/index-name*/_mapping/type-name\", f\"{domain.domainArn}/roletest*/_mapping/roletest\", f\"{domain.domainArn}/_nodes\", f\"{domain.domainArn}/_nodes/stats\", f\"{domain.domainArn}/_nodes/*/stats\", f\"{domain.domainArn}/_stats\", f\"{domain.domainArn}/index-name*/_stats\", f\"{domain.domainArn}/roletest*/_stat\"\n        ]\n    ))",
          "version": "2"
        },
        "csharp": {
          "source": "Domain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0\n});\ndomain.AddAccessPolicies(\nnew PolicyStatement(new PolicyStatementProps {\n    Actions = new [] { \"es:ESHttpPost\", \"es:ESHttpPut\" },\n    Effect = Effect.ALLOW,\n    Principals = new [] { new AccountPrincipal(\"123456789012\") },\n    Resources = new [] { domain.DomainArn, $\"{domain.domainArn}/*\" }\n}),\nnew PolicyStatement(new PolicyStatementProps {\n    Actions = new [] { \"es:ESHttpGet\" },\n    Effect = Effect.ALLOW,\n    Principals = new [] { new AccountPrincipal(\"123456789012\") },\n    Resources = new [] { $\"{domain.domainArn}/_all/_settings\", $\"{domain.domainArn}/_cluster/stats\", $\"{domain.domainArn}/index-name*/_mapping/type-name\", $\"{domain.domainArn}/roletest*/_mapping/roletest\", $\"{domain.domainArn}/_nodes\", $\"{domain.domainArn}/_nodes/stats\", $\"{domain.domainArn}/_nodes/*/stats\", $\"{domain.domainArn}/_stats\", $\"{domain.domainArn}/index-name*/_stats\", $\"{domain.domainArn}/roletest*/_stat\" }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Domain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .build();\ndomain.addAccessPolicies(\nPolicyStatement.Builder.create()\n        .actions(List.of(\"es:ESHttpPost\", \"es:ESHttpPut\"))\n        .effect(Effect.ALLOW)\n        .principals(List.of(new AccountPrincipal(\"123456789012\")))\n        .resources(List.of(domain.getDomainArn(), String.format(\"%s/*\", domain.getDomainArn())))\n        .build(),\nPolicyStatement.Builder.create()\n        .actions(List.of(\"es:ESHttpGet\"))\n        .effect(Effect.ALLOW)\n        .principals(List.of(new AccountPrincipal(\"123456789012\")))\n        .resources(List.of(String.format(\"%s/_all/_settings\", domain.getDomainArn()), String.format(\"%s/_cluster/stats\", domain.getDomainArn()), String.format(\"%s/index-name*/_mapping/type-name\", domain.getDomainArn()), String.format(\"%s/roletest*/_mapping/roletest\", domain.getDomainArn()), String.format(\"%s/_nodes\", domain.getDomainArn()), String.format(\"%s/_nodes/stats\", domain.getDomainArn()), String.format(\"%s/_nodes/*/stats\", domain.getDomainArn()), String.format(\"%s/_stats\", domain.getDomainArn()), String.format(\"%s/index-name*/_stats\", domain.getDomainArn()), String.format(\"%s/roletest*/_stat\", domain.getDomainArn())))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "domain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n})\ndomain.addAccessPolicies(\niam.NewPolicyStatement(&policyStatementProps{\n\tactions: []*string{\n\t\tjsii.String(\"es:ESHttpPost\"),\n\t\tjsii.String(\"es:ESHttpPut\"),\n\t},\n\teffect: iam.effect_ALLOW,\n\tprincipals: []iPrincipal{\n\t\tiam.NewAccountPrincipal(jsii.String(\"123456789012\")),\n\t},\n\tresources: []*string{\n\t\tdomain.domainArn,\n\t\tfmt.Sprintf(\"%v/*\", domain.domainArn),\n\t},\n}),\niam.NewPolicyStatement(&policyStatementProps{\n\tactions: []*string{\n\t\tjsii.String(\"es:ESHttpGet\"),\n\t},\n\teffect: iam.*effect_ALLOW,\n\tprincipals: []*iPrincipal{\n\t\tiam.NewAccountPrincipal(jsii.String(\"123456789012\")),\n\t},\n\tresources: []*string{\n\t\tfmt.Sprintf(\"%v/_all/_settings\", domain.domainArn),\n\t\tfmt.Sprintf(\"%v/_cluster/stats\", domain.domainArn),\n\t\tfmt.Sprintf(\"%v/index-name*/_mapping/type-name\", domain.domainArn),\n\t\tfmt.Sprintf(\"%v/roletest*/_mapping/roletest\", domain.domainArn),\n\t\tfmt.Sprintf(\"%v/_nodes\", domain.domainArn),\n\t\tfmt.Sprintf(\"%v/_nodes/stats\", domain.domainArn),\n\t\tfmt.Sprintf(\"%v/_nodes/*/stats\", domain.domainArn),\n\t\tfmt.Sprintf(\"%v/_stats\", domain.domainArn),\n\t\tfmt.Sprintf(\"%v/index-name*/_stats\", domain.domainArn),\n\t\tfmt.Sprintf(\"%v/roletest*/_stat\", domain.domainArn),\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "const domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n});\ndomain.addAccessPolicies(\n  new iam.PolicyStatement({\n    actions: ['es:ESHttpPost', 'es:ESHttpPut'],\n    effect: iam.Effect.ALLOW,\n    principals: [new iam.AccountPrincipal('123456789012')],\n    resources: [domain.domainArn, `${domain.domainArn}/*`],\n  }),\n  new iam.PolicyStatement({\n    actions: ['es:ESHttpGet'],\n    effect: iam.Effect.ALLOW,\n    principals: [new iam.AccountPrincipal('123456789012')],\n    resources: [\n      `${domain.domainArn}/_all/_settings`,\n      `${domain.domainArn}/_cluster/stats`,\n      `${domain.domainArn}/index-name*/_mapping/type-name`,\n      `${domain.domainArn}/roletest*/_mapping/roletest`,\n      `${domain.domainArn}/_nodes`,\n      `${domain.domainArn}/_nodes/stats`,\n      `${domain.domainArn}/_nodes/*/stats`,\n      `${domain.domainArn}/_stats`,\n      `${domain.domainArn}/index-name*/_stats`,\n      `${domain.domainArn}/roletest*/_stat`,\n    ],\n  }),\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 263
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.Effect",
        "@aws-cdk/aws-iam.Effect#ALLOW",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.Domain#addAccessPolicies",
        "@aws-cdk/aws-opensearchservice.Domain#domainArn",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n});\ndomain.addAccessPolicies(\n  new iam.PolicyStatement({\n    actions: ['es:ESHttpPost', 'es:ESHttpPut'],\n    effect: iam.Effect.ALLOW,\n    principals: [new iam.AccountPrincipal('123456789012')],\n    resources: [domain.domainArn, `${domain.domainArn}/*`],\n  }),\n  new iam.PolicyStatement({\n    actions: ['es:ESHttpGet'],\n    effect: iam.Effect.ALLOW,\n    principals: [new iam.AccountPrincipal('123456789012')],\n    resources: [\n      `${domain.domainArn}/_all/_settings`,\n      `${domain.domainArn}/_cluster/stats`,\n      `${domain.domainArn}/index-name*/_mapping/type-name`,\n      `${domain.domainArn}/roletest*/_mapping/roletest`,\n      `${domain.domainArn}/_nodes`,\n      `${domain.domainArn}/_nodes/stats`,\n      `${domain.domainArn}/_nodes/*/stats`,\n      `${domain.domainArn}/_stats`,\n      `${domain.domainArn}/index-name*/_stats`,\n      `${domain.domainArn}/roletest*/_stat`,\n    ],\n  }),\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "15": 11,
        "17": 11,
        "75": 55,
        "104": 1,
        "192": 6,
        "193": 3,
        "194": 24,
        "196": 1,
        "197": 5,
        "211": 11,
        "221": 11,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 9
      },
      "fqnsFingerprint": "3bc05f92db7efdedd25e03952a39b0624f83384b7802cf387e14ca887c4f6b53"
    },
    "34aeb2d6695fa8fcb994d99b33eb0684876692da507078002e0371fe0dd369f9": {
      "translations": {
        "python": {
          "source": "domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    enforce_https=True,\n    node_to_node_encryption=True,\n    encryption_at_rest=opensearch.EncryptionAtRestOptions(\n        enabled=True\n    ),\n    fine_grained_access_control=opensearch.AdvancedSecurityOptions(\n        master_user_name=\"master-user\"\n    ),\n    logging=opensearch.LoggingOptions(\n        audit_log_enabled=True,\n        slow_search_log_enabled=True,\n        app_log_enabled=True,\n        slow_index_log_enabled=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    EnforceHttps = true,\n    NodeToNodeEncryption = true,\n    EncryptionAtRest = new EncryptionAtRestOptions {\n        Enabled = true\n    },\n    FineGrainedAccessControl = new AdvancedSecurityOptions {\n        MasterUserName = \"master-user\"\n    },\n    Logging = new LoggingOptions {\n        AuditLogEnabled = true,\n        SlowSearchLogEnabled = true,\n        AppLogEnabled = true,\n        SlowIndexLogEnabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .enforceHttps(true)\n        .nodeToNodeEncryption(true)\n        .encryptionAtRest(EncryptionAtRestOptions.builder()\n                .enabled(true)\n                .build())\n        .fineGrainedAccessControl(AdvancedSecurityOptions.builder()\n                .masterUserName(\"master-user\")\n                .build())\n        .logging(LoggingOptions.builder()\n                .auditLogEnabled(true)\n                .slowSearchLogEnabled(true)\n                .appLogEnabled(true)\n                .slowIndexLogEnabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "domain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tenforceHttps: jsii.Boolean(true),\n\tnodeToNodeEncryption: jsii.Boolean(true),\n\tencryptionAtRest: &encryptionAtRestOptions{\n\t\tenabled: jsii.Boolean(true),\n\t},\n\tfineGrainedAccessControl: &advancedSecurityOptions{\n\t\tmasterUserName: jsii.String(\"master-user\"),\n\t},\n\tlogging: &loggingOptions{\n\t\tauditLogEnabled: jsii.Boolean(true),\n\t\tslowSearchLogEnabled: jsii.Boolean(true),\n\t\tappLogEnabled: jsii.Boolean(true),\n\t\tslowIndexLogEnabled: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  enforceHttps: true,\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n  fineGrainedAccessControl: {\n    masterUserName: 'master-user',\n  },\n  logging: {\n    auditLogEnabled: true,\n    slowSearchLogEnabled: true,\n    appLogEnabled: true,\n    slowIndexLogEnabled: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 299
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.AdvancedSecurityOptions",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EncryptionAtRestOptions",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "@aws-cdk/aws-opensearchservice.LoggingOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  enforceHttps: true,\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n  fineGrainedAccessControl: {\n    masterUserName: 'master-user',\n  },\n  logging: {\n    auditLogEnabled: true,\n    slowSearchLogEnabled: true,\n    appLogEnabled: true,\n    slowIndexLogEnabled: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 1,
        "106": 7,
        "193": 4,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 12
      },
      "fqnsFingerprint": "7cb3e4e7b9e4ba6c6cc5bf9739d8c1555fa45f3493b579fc02c6efb86eb95bf8"
    },
    "a2cc730c94c71700beac0b97cf87062f6a3737c92fad01918c79c124c18b88ae": {
      "translations": {
        "python": {
          "source": "domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    capacity=opensearch.CapacityConfig(\n        master_nodes=2,\n        warm_nodes=2,\n        warm_instance_type=\"ultrawarm1.medium.search\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    Capacity = new CapacityConfig {\n        MasterNodes = 2,\n        WarmNodes = 2,\n        WarmInstanceType = \"ultrawarm1.medium.search\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .capacity(CapacityConfig.builder()\n                .masterNodes(2)\n                .warmNodes(2)\n                .warmInstanceType(\"ultrawarm1.medium.search\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "domain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tcapacity: &capacityConfig{\n\t\tmasterNodes: jsii.Number(2),\n\t\twarmNodes: jsii.Number(2),\n\t\twarmInstanceType: jsii.String(\"ultrawarm1.medium.search\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  capacity: {\n    masterNodes: 2,\n    warmNodes: 2,\n    warmInstanceType: 'ultrawarm1.medium.search',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 323
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CapacityConfig",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  capacity: {\n    masterNodes: 2,\n    warmNodes: 2,\n    warmInstanceType: 'ultrawarm1.medium.search',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "ad10f9dc7bec4decc3ba1e09e3a4f9902ee1e963f4ad12a0044af960488c7aef"
    },
    "db845ac27e52e8b40bf690df8b1c42c65e868b5987a55c4a7e1bb97b516f42d8": {
      "translations": {
        "python": {
          "source": "opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    custom_endpoint=opensearch.CustomEndpointOptions(\n        domain_name=\"search.example.com\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    CustomEndpoint = new CustomEndpointOptions {\n        DomainName = \"search.example.com\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .customEndpoint(CustomEndpointOptions.builder()\n                .domainName(\"search.example.com\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tcustomEndpoint: &customEndpointOptions{\n\t\tdomainName: jsii.String(\"search.example.com\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  customEndpoint: {\n    domainName: 'search.example.com',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 338
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CustomEndpointOptions",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  customEndpoint: {\n    domainName: 'search.example.com',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "32a44fb6c60e3c61ec9f76aa8dab0aabd926925b36318b3902496ecb7739cada"
    },
    "43d898bfe52fee4b8fa6df175d46ec64711fa9b571cc57d428696c74b2af6ea6": {
      "translations": {
        "python": {
          "source": "opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    advanced_options={\n        \"rest.action.multi.allow_explicit_index\": \"false\",\n        \"indices.fielddata.cache.size\": \"25\",\n        \"indices.query.bool.max_clause_count\": \"2048\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    AdvancedOptions = new Dictionary<string, string> {\n        { \"rest.action.multi.allow_explicit_index\", \"false\" },\n        { \"indices.fielddata.cache.size\", \"25\" },\n        { \"indices.query.bool.max_clause_count\", \"2048\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .advancedOptions(Map.of(\n                \"rest.action.multi.allow_explicit_index\", \"false\",\n                \"indices.fielddata.cache.size\", \"25\",\n                \"indices.query.bool.max_clause_count\", \"2048\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tadvancedOptions: map[string]*string{\n\t\t\"rest.action.multi.allow_explicit_index\": jsii.String(\"false\"),\n\t\t\"indices.fielddata.cache.size\": jsii.String(\"25\"),\n\t\t\"indices.query.bool.max_clause_count\": jsii.String(\"2048\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  advancedOptions: {\n    'rest.action.multi.allow_explicit_index': 'false',\n    'indices.fielddata.cache.size': '25',\n    'indices.query.bool.max_clause_count': '2048',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-opensearchservice"
        },
        "field": {
          "field": "markdown",
          "line": 355
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  advancedOptions: {\n    'rest.action.multi.allow_explicit_index': 'false',\n    'indices.fielddata.cache.size': '25',\n    'indices.query.bool.max_clause_count': '2048',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 7,
        "104": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "2ef9c2ec44a447dbae521d5609ca5f02820abebe53986066179a077e56e47709"
    },
    "bd1f082ba715beddd505c7cd19250aaa0e8915db0d53e5749c19a0130f226382": {
      "translations": {
        "python": {
          "source": "domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    enforce_https=True,\n    node_to_node_encryption=True,\n    encryption_at_rest=opensearch.EncryptionAtRestOptions(\n        enabled=True\n    ),\n    fine_grained_access_control=opensearch.AdvancedSecurityOptions(\n        master_user_name=\"master-user\"\n    ),\n    logging=opensearch.LoggingOptions(\n        audit_log_enabled=True,\n        slow_search_log_enabled=True,\n        app_log_enabled=True,\n        slow_index_log_enabled=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    EnforceHttps = true,\n    NodeToNodeEncryption = true,\n    EncryptionAtRest = new EncryptionAtRestOptions {\n        Enabled = true\n    },\n    FineGrainedAccessControl = new AdvancedSecurityOptions {\n        MasterUserName = \"master-user\"\n    },\n    Logging = new LoggingOptions {\n        AuditLogEnabled = true,\n        SlowSearchLogEnabled = true,\n        AppLogEnabled = true,\n        SlowIndexLogEnabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .enforceHttps(true)\n        .nodeToNodeEncryption(true)\n        .encryptionAtRest(EncryptionAtRestOptions.builder()\n                .enabled(true)\n                .build())\n        .fineGrainedAccessControl(AdvancedSecurityOptions.builder()\n                .masterUserName(\"master-user\")\n                .build())\n        .logging(LoggingOptions.builder()\n                .auditLogEnabled(true)\n                .slowSearchLogEnabled(true)\n                .appLogEnabled(true)\n                .slowIndexLogEnabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "domain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tenforceHttps: jsii.Boolean(true),\n\tnodeToNodeEncryption: jsii.Boolean(true),\n\tencryptionAtRest: &encryptionAtRestOptions{\n\t\tenabled: jsii.Boolean(true),\n\t},\n\tfineGrainedAccessControl: &advancedSecurityOptions{\n\t\tmasterUserName: jsii.String(\"master-user\"),\n\t},\n\tlogging: &loggingOptions{\n\t\tauditLogEnabled: jsii.Boolean(true),\n\t\tslowSearchLogEnabled: jsii.Boolean(true),\n\t\tappLogEnabled: jsii.Boolean(true),\n\t\tslowIndexLogEnabled: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  enforceHttps: true,\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n  fineGrainedAccessControl: {\n    masterUserName: 'master-user',\n  },\n  logging: {\n    auditLogEnabled: true,\n    slowSearchLogEnabled: true,\n    appLogEnabled: true,\n    slowIndexLogEnabled: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.AdvancedSecurityOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.AdvancedSecurityOptions",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EncryptionAtRestOptions",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "@aws-cdk/aws-opensearchservice.LoggingOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  enforceHttps: true,\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n  fineGrainedAccessControl: {\n    masterUserName: 'master-user',\n  },\n  logging: {\n    auditLogEnabled: true,\n    slowSearchLogEnabled: true,\n    appLogEnabled: true,\n    slowIndexLogEnabled: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 1,
        "106": 7,
        "193": 4,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 12
      },
      "fqnsFingerprint": "7cb3e4e7b9e4ba6c6cc5bf9739d8c1555fa45f3493b579fc02c6efb86eb95bf8"
    },
    "289de06da5fd2b4c8f053b1d2035554fa9a35c6dad6fbf29b42a41a351cba092": {
      "translations": {
        "python": {
          "source": "domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    capacity=opensearch.CapacityConfig(\n        master_nodes=2,\n        warm_nodes=2,\n        warm_instance_type=\"ultrawarm1.medium.search\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    Capacity = new CapacityConfig {\n        MasterNodes = 2,\n        WarmNodes = 2,\n        WarmInstanceType = \"ultrawarm1.medium.search\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .capacity(CapacityConfig.builder()\n                .masterNodes(2)\n                .warmNodes(2)\n                .warmInstanceType(\"ultrawarm1.medium.search\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "domain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tcapacity: &capacityConfig{\n\t\tmasterNodes: jsii.Number(2),\n\t\twarmNodes: jsii.Number(2),\n\t\twarmInstanceType: jsii.String(\"ultrawarm1.medium.search\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  capacity: {\n    masterNodes: 2,\n    warmNodes: 2,\n    warmInstanceType: 'ultrawarm1.medium.search',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CapacityConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CapacityConfig",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  capacity: {\n    masterNodes: 2,\n    warmNodes: 2,\n    warmInstanceType: 'ultrawarm1.medium.search',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "ad10f9dc7bec4decc3ba1e09e3a4f9902ee1e963f4ad12a0044af960488c7aef"
    },
    "dce72dd5c8ad3423244625ff608dfb460ea64cf9467342492e9fb839b1daaea4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_opensearchservice as opensearchservice\n\n# access_policies: Any\n\ncfn_domain = opensearchservice.CfnDomain(self, \"MyCfnDomain\",\n    access_policies=access_policies,\n    advanced_options={\n        \"advanced_options_key\": \"advancedOptions\"\n    },\n    advanced_security_options=opensearchservice.CfnDomain.AdvancedSecurityOptionsInputProperty(\n        enabled=False,\n        internal_user_database_enabled=False,\n        master_user_options=opensearchservice.CfnDomain.MasterUserOptionsProperty(\n            master_user_arn=\"masterUserArn\",\n            master_user_name=\"masterUserName\",\n            master_user_password=\"masterUserPassword\"\n        )\n    ),\n    cluster_config=opensearchservice.CfnDomain.ClusterConfigProperty(\n        dedicated_master_count=123,\n        dedicated_master_enabled=False,\n        dedicated_master_type=\"dedicatedMasterType\",\n        instance_count=123,\n        instance_type=\"instanceType\",\n        warm_count=123,\n        warm_enabled=False,\n        warm_type=\"warmType\",\n        zone_awareness_config=opensearchservice.CfnDomain.ZoneAwarenessConfigProperty(\n            availability_zone_count=123\n        ),\n        zone_awareness_enabled=False\n    ),\n    cognito_options=opensearchservice.CfnDomain.CognitoOptionsProperty(\n        enabled=False,\n        identity_pool_id=\"identityPoolId\",\n        role_arn=\"roleArn\",\n        user_pool_id=\"userPoolId\"\n    ),\n    domain_endpoint_options=opensearchservice.CfnDomain.DomainEndpointOptionsProperty(\n        custom_endpoint=\"customEndpoint\",\n        custom_endpoint_certificate_arn=\"customEndpointCertificateArn\",\n        custom_endpoint_enabled=False,\n        enforce_https=False,\n        tls_security_policy=\"tlsSecurityPolicy\"\n    ),\n    domain_name=\"domainName\",\n    ebs_options=opensearchservice.CfnDomain.EBSOptionsProperty(\n        ebs_enabled=False,\n        iops=123,\n        throughput=123,\n        volume_size=123,\n        volume_type=\"volumeType\"\n    ),\n    encryption_at_rest_options=opensearchservice.CfnDomain.EncryptionAtRestOptionsProperty(\n        enabled=False,\n        kms_key_id=\"kmsKeyId\"\n    ),\n    engine_version=\"engineVersion\",\n    log_publishing_options={\n        \"log_publishing_options_key\": opensearchservice.CfnDomain.LogPublishingOptionProperty(\n            cloud_watch_logs_log_group_arn=\"cloudWatchLogsLogGroupArn\",\n            enabled=False\n        )\n    },\n    node_to_node_encryption_options=opensearchservice.CfnDomain.NodeToNodeEncryptionOptionsProperty(\n        enabled=False\n    ),\n    snapshot_options=opensearchservice.CfnDomain.SnapshotOptionsProperty(\n        automated_snapshot_start_hour=123\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    vpc_options=opensearchservice.CfnDomain.VPCOptionsProperty(\n        security_group_ids=[\"securityGroupIds\"],\n        subnet_ids=[\"subnetIds\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.OpenSearchService;\n\nvar accessPolicies;\n\nCfnDomain cfnDomain = new CfnDomain(this, \"MyCfnDomain\", new CfnDomainProps {\n    AccessPolicies = accessPolicies,\n    AdvancedOptions = new Dictionary<string, string> {\n        { \"advancedOptionsKey\", \"advancedOptions\" }\n    },\n    AdvancedSecurityOptions = new AdvancedSecurityOptionsInputProperty {\n        Enabled = false,\n        InternalUserDatabaseEnabled = false,\n        MasterUserOptions = new MasterUserOptionsProperty {\n            MasterUserArn = \"masterUserArn\",\n            MasterUserName = \"masterUserName\",\n            MasterUserPassword = \"masterUserPassword\"\n        }\n    },\n    ClusterConfig = new ClusterConfigProperty {\n        DedicatedMasterCount = 123,\n        DedicatedMasterEnabled = false,\n        DedicatedMasterType = \"dedicatedMasterType\",\n        InstanceCount = 123,\n        InstanceType = \"instanceType\",\n        WarmCount = 123,\n        WarmEnabled = false,\n        WarmType = \"warmType\",\n        ZoneAwarenessConfig = new ZoneAwarenessConfigProperty {\n            AvailabilityZoneCount = 123\n        },\n        ZoneAwarenessEnabled = false\n    },\n    CognitoOptions = new CognitoOptionsProperty {\n        Enabled = false,\n        IdentityPoolId = \"identityPoolId\",\n        RoleArn = \"roleArn\",\n        UserPoolId = \"userPoolId\"\n    },\n    DomainEndpointOptions = new DomainEndpointOptionsProperty {\n        CustomEndpoint = \"customEndpoint\",\n        CustomEndpointCertificateArn = \"customEndpointCertificateArn\",\n        CustomEndpointEnabled = false,\n        EnforceHttps = false,\n        TlsSecurityPolicy = \"tlsSecurityPolicy\"\n    },\n    DomainName = \"domainName\",\n    EbsOptions = new EBSOptionsProperty {\n        EbsEnabled = false,\n        Iops = 123,\n        Throughput = 123,\n        VolumeSize = 123,\n        VolumeType = \"volumeType\"\n    },\n    EncryptionAtRestOptions = new EncryptionAtRestOptionsProperty {\n        Enabled = false,\n        KmsKeyId = \"kmsKeyId\"\n    },\n    EngineVersion = \"engineVersion\",\n    LogPublishingOptions = new Dictionary<string, object> {\n        { \"logPublishingOptionsKey\", new LogPublishingOptionProperty {\n            CloudWatchLogsLogGroupArn = \"cloudWatchLogsLogGroupArn\",\n            Enabled = false\n        } }\n    },\n    NodeToNodeEncryptionOptions = new NodeToNodeEncryptionOptionsProperty {\n        Enabled = false\n    },\n    SnapshotOptions = new SnapshotOptionsProperty {\n        AutomatedSnapshotStartHour = 123\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    VpcOptions = new VPCOptionsProperty {\n        SecurityGroupIds = new [] { \"securityGroupIds\" },\n        SubnetIds = new [] { \"subnetIds\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nObject accessPolicies;\n\nCfnDomain cfnDomain = CfnDomain.Builder.create(this, \"MyCfnDomain\")\n        .accessPolicies(accessPolicies)\n        .advancedOptions(Map.of(\n                \"advancedOptionsKey\", \"advancedOptions\"))\n        .advancedSecurityOptions(AdvancedSecurityOptionsInputProperty.builder()\n                .enabled(false)\n                .internalUserDatabaseEnabled(false)\n                .masterUserOptions(MasterUserOptionsProperty.builder()\n                        .masterUserArn(\"masterUserArn\")\n                        .masterUserName(\"masterUserName\")\n                        .masterUserPassword(\"masterUserPassword\")\n                        .build())\n                .build())\n        .clusterConfig(ClusterConfigProperty.builder()\n                .dedicatedMasterCount(123)\n                .dedicatedMasterEnabled(false)\n                .dedicatedMasterType(\"dedicatedMasterType\")\n                .instanceCount(123)\n                .instanceType(\"instanceType\")\n                .warmCount(123)\n                .warmEnabled(false)\n                .warmType(\"warmType\")\n                .zoneAwarenessConfig(ZoneAwarenessConfigProperty.builder()\n                        .availabilityZoneCount(123)\n                        .build())\n                .zoneAwarenessEnabled(false)\n                .build())\n        .cognitoOptions(CognitoOptionsProperty.builder()\n                .enabled(false)\n                .identityPoolId(\"identityPoolId\")\n                .roleArn(\"roleArn\")\n                .userPoolId(\"userPoolId\")\n                .build())\n        .domainEndpointOptions(DomainEndpointOptionsProperty.builder()\n                .customEndpoint(\"customEndpoint\")\n                .customEndpointCertificateArn(\"customEndpointCertificateArn\")\n                .customEndpointEnabled(false)\n                .enforceHttps(false)\n                .tlsSecurityPolicy(\"tlsSecurityPolicy\")\n                .build())\n        .domainName(\"domainName\")\n        .ebsOptions(EBSOptionsProperty.builder()\n                .ebsEnabled(false)\n                .iops(123)\n                .throughput(123)\n                .volumeSize(123)\n                .volumeType(\"volumeType\")\n                .build())\n        .encryptionAtRestOptions(EncryptionAtRestOptionsProperty.builder()\n                .enabled(false)\n                .kmsKeyId(\"kmsKeyId\")\n                .build())\n        .engineVersion(\"engineVersion\")\n        .logPublishingOptions(Map.of(\n                \"logPublishingOptionsKey\", LogPublishingOptionProperty.builder()\n                        .cloudWatchLogsLogGroupArn(\"cloudWatchLogsLogGroupArn\")\n                        .enabled(false)\n                        .build()))\n        .nodeToNodeEncryptionOptions(NodeToNodeEncryptionOptionsProperty.builder()\n                .enabled(false)\n                .build())\n        .snapshotOptions(SnapshotOptionsProperty.builder()\n                .automatedSnapshotStartHour(123)\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .vpcOptions(VPCOptionsProperty.builder()\n                .securityGroupIds(List.of(\"securityGroupIds\"))\n                .subnetIds(List.of(\"subnetIds\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport opensearchservice \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\nvar accessPolicies interface{}\n\ncfnDomain := opensearchservice.NewCfnDomain(this, jsii.String(\"MyCfnDomain\"), &cfnDomainProps{\n\taccessPolicies: accessPolicies,\n\tadvancedOptions: map[string]*string{\n\t\t\"advancedOptionsKey\": jsii.String(\"advancedOptions\"),\n\t},\n\tadvancedSecurityOptions: &advancedSecurityOptionsInputProperty{\n\t\tenabled: jsii.Boolean(false),\n\t\tinternalUserDatabaseEnabled: jsii.Boolean(false),\n\t\tmasterUserOptions: &masterUserOptionsProperty{\n\t\t\tmasterUserArn: jsii.String(\"masterUserArn\"),\n\t\t\tmasterUserName: jsii.String(\"masterUserName\"),\n\t\t\tmasterUserPassword: jsii.String(\"masterUserPassword\"),\n\t\t},\n\t},\n\tclusterConfig: &clusterConfigProperty{\n\t\tdedicatedMasterCount: jsii.Number(123),\n\t\tdedicatedMasterEnabled: jsii.Boolean(false),\n\t\tdedicatedMasterType: jsii.String(\"dedicatedMasterType\"),\n\t\tinstanceCount: jsii.Number(123),\n\t\tinstanceType: jsii.String(\"instanceType\"),\n\t\twarmCount: jsii.Number(123),\n\t\twarmEnabled: jsii.Boolean(false),\n\t\twarmType: jsii.String(\"warmType\"),\n\t\tzoneAwarenessConfig: &zoneAwarenessConfigProperty{\n\t\t\tavailabilityZoneCount: jsii.Number(123),\n\t\t},\n\t\tzoneAwarenessEnabled: jsii.Boolean(false),\n\t},\n\tcognitoOptions: &cognitoOptionsProperty{\n\t\tenabled: jsii.Boolean(false),\n\t\tidentityPoolId: jsii.String(\"identityPoolId\"),\n\t\troleArn: jsii.String(\"roleArn\"),\n\t\tuserPoolId: jsii.String(\"userPoolId\"),\n\t},\n\tdomainEndpointOptions: &domainEndpointOptionsProperty{\n\t\tcustomEndpoint: jsii.String(\"customEndpoint\"),\n\t\tcustomEndpointCertificateArn: jsii.String(\"customEndpointCertificateArn\"),\n\t\tcustomEndpointEnabled: jsii.Boolean(false),\n\t\tenforceHttps: jsii.Boolean(false),\n\t\ttlsSecurityPolicy: jsii.String(\"tlsSecurityPolicy\"),\n\t},\n\tdomainName: jsii.String(\"domainName\"),\n\tebsOptions: &eBSOptionsProperty{\n\t\tebsEnabled: jsii.Boolean(false),\n\t\tiops: jsii.Number(123),\n\t\tthroughput: jsii.Number(123),\n\t\tvolumeSize: jsii.Number(123),\n\t\tvolumeType: jsii.String(\"volumeType\"),\n\t},\n\tencryptionAtRestOptions: &encryptionAtRestOptionsProperty{\n\t\tenabled: jsii.Boolean(false),\n\t\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\t},\n\tengineVersion: jsii.String(\"engineVersion\"),\n\tlogPublishingOptions: map[string]interface{}{\n\t\t\"logPublishingOptionsKey\": &LogPublishingOptionProperty{\n\t\t\t\"cloudWatchLogsLogGroupArn\": jsii.String(\"cloudWatchLogsLogGroupArn\"),\n\t\t\t\"enabled\": jsii.Boolean(false),\n\t\t},\n\t},\n\tnodeToNodeEncryptionOptions: &nodeToNodeEncryptionOptionsProperty{\n\t\tenabled: jsii.Boolean(false),\n\t},\n\tsnapshotOptions: &snapshotOptionsProperty{\n\t\tautomatedSnapshotStartHour: jsii.Number(123),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tvpcOptions: &vPCOptionsProperty{\n\t\tsecurityGroupIds: []*string{\n\t\t\tjsii.String(\"securityGroupIds\"),\n\t\t},\n\t\tsubnetIds: []*string{\n\t\t\tjsii.String(\"subnetIds\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n\ndeclare const accessPolicies: any;\nconst cfnDomain = new opensearchservice.CfnDomain(this, 'MyCfnDomain', /* all optional props */ {\n  accessPolicies: accessPolicies,\n  advancedOptions: {\n    advancedOptionsKey: 'advancedOptions',\n  },\n  advancedSecurityOptions: {\n    enabled: false,\n    internalUserDatabaseEnabled: false,\n    masterUserOptions: {\n      masterUserArn: 'masterUserArn',\n      masterUserName: 'masterUserName',\n      masterUserPassword: 'masterUserPassword',\n    },\n  },\n  clusterConfig: {\n    dedicatedMasterCount: 123,\n    dedicatedMasterEnabled: false,\n    dedicatedMasterType: 'dedicatedMasterType',\n    instanceCount: 123,\n    instanceType: 'instanceType',\n    warmCount: 123,\n    warmEnabled: false,\n    warmType: 'warmType',\n    zoneAwarenessConfig: {\n      availabilityZoneCount: 123,\n    },\n    zoneAwarenessEnabled: false,\n  },\n  cognitoOptions: {\n    enabled: false,\n    identityPoolId: 'identityPoolId',\n    roleArn: 'roleArn',\n    userPoolId: 'userPoolId',\n  },\n  domainEndpointOptions: {\n    customEndpoint: 'customEndpoint',\n    customEndpointCertificateArn: 'customEndpointCertificateArn',\n    customEndpointEnabled: false,\n    enforceHttps: false,\n    tlsSecurityPolicy: 'tlsSecurityPolicy',\n  },\n  domainName: 'domainName',\n  ebsOptions: {\n    ebsEnabled: false,\n    iops: 123,\n    throughput: 123,\n    volumeSize: 123,\n    volumeType: 'volumeType',\n  },\n  encryptionAtRestOptions: {\n    enabled: false,\n    kmsKeyId: 'kmsKeyId',\n  },\n  engineVersion: 'engineVersion',\n  logPublishingOptions: {\n    logPublishingOptionsKey: {\n      cloudWatchLogsLogGroupArn: 'cloudWatchLogsLogGroupArn',\n      enabled: false,\n    },\n  },\n  nodeToNodeEncryptionOptions: {\n    enabled: false,\n  },\n  snapshotOptions: {\n    automatedSnapshotStartHour: 123,\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcOptions: {\n    securityGroupIds: ['securityGroupIds'],\n    subnetIds: ['subnetIds'],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CfnDomain"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CfnDomain",
        "@aws-cdk/aws-opensearchservice.CfnDomainProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n\ndeclare const accessPolicies: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDomain = new opensearchservice.CfnDomain(this, 'MyCfnDomain', /* all optional props */ {\n  accessPolicies: accessPolicies,\n  advancedOptions: {\n    advancedOptionsKey: 'advancedOptions',\n  },\n  advancedSecurityOptions: {\n    enabled: false,\n    internalUserDatabaseEnabled: false,\n    masterUserOptions: {\n      masterUserArn: 'masterUserArn',\n      masterUserName: 'masterUserName',\n      masterUserPassword: 'masterUserPassword',\n    },\n  },\n  clusterConfig: {\n    dedicatedMasterCount: 123,\n    dedicatedMasterEnabled: false,\n    dedicatedMasterType: 'dedicatedMasterType',\n    instanceCount: 123,\n    instanceType: 'instanceType',\n    warmCount: 123,\n    warmEnabled: false,\n    warmType: 'warmType',\n    zoneAwarenessConfig: {\n      availabilityZoneCount: 123,\n    },\n    zoneAwarenessEnabled: false,\n  },\n  cognitoOptions: {\n    enabled: false,\n    identityPoolId: 'identityPoolId',\n    roleArn: 'roleArn',\n    userPoolId: 'userPoolId',\n  },\n  domainEndpointOptions: {\n    customEndpoint: 'customEndpoint',\n    customEndpointCertificateArn: 'customEndpointCertificateArn',\n    customEndpointEnabled: false,\n    enforceHttps: false,\n    tlsSecurityPolicy: 'tlsSecurityPolicy',\n  },\n  domainName: 'domainName',\n  ebsOptions: {\n    ebsEnabled: false,\n    iops: 123,\n    throughput: 123,\n    volumeSize: 123,\n    volumeType: 'volumeType',\n  },\n  encryptionAtRestOptions: {\n    enabled: false,\n    kmsKeyId: 'kmsKeyId',\n  },\n  engineVersion: 'engineVersion',\n  logPublishingOptions: {\n    logPublishingOptionsKey: {\n      cloudWatchLogsLogGroupArn: 'cloudWatchLogsLogGroupArn',\n      enabled: false,\n    },\n  },\n  nodeToNodeEncryptionOptions: {\n    enabled: false,\n  },\n  snapshotOptions: {\n    automatedSnapshotStartHour: 123,\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcOptions: {\n    securityGroupIds: ['securityGroupIds'],\n    subnetIds: ['subnetIds'],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 8,
        "10": 24,
        "75": 64,
        "91": 12,
        "104": 1,
        "125": 1,
        "130": 1,
        "192": 3,
        "193": 16,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 58,
        "290": 1
      },
      "fqnsFingerprint": "c915574727216120aef54cb515a50832dcbc652dc1a5148796e04af020076026"
    },
    "a8091ec693b3707d7087027ad13b38e8242aa75a17f67de9d521651521b3a0a9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_opensearchservice as opensearchservice\n\nadvanced_security_options_input_property = opensearchservice.CfnDomain.AdvancedSecurityOptionsInputProperty(\n    enabled=False,\n    internal_user_database_enabled=False,\n    master_user_options=opensearchservice.CfnDomain.MasterUserOptionsProperty(\n        master_user_arn=\"masterUserArn\",\n        master_user_name=\"masterUserName\",\n        master_user_password=\"masterUserPassword\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.OpenSearchService;\n\nAdvancedSecurityOptionsInputProperty advancedSecurityOptionsInputProperty = new AdvancedSecurityOptionsInputProperty {\n    Enabled = false,\n    InternalUserDatabaseEnabled = false,\n    MasterUserOptions = new MasterUserOptionsProperty {\n        MasterUserArn = \"masterUserArn\",\n        MasterUserName = \"masterUserName\",\n        MasterUserPassword = \"masterUserPassword\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nAdvancedSecurityOptionsInputProperty advancedSecurityOptionsInputProperty = AdvancedSecurityOptionsInputProperty.builder()\n        .enabled(false)\n        .internalUserDatabaseEnabled(false)\n        .masterUserOptions(MasterUserOptionsProperty.builder()\n                .masterUserArn(\"masterUserArn\")\n                .masterUserName(\"masterUserName\")\n                .masterUserPassword(\"masterUserPassword\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport opensearchservice \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\nadvancedSecurityOptionsInputProperty := &advancedSecurityOptionsInputProperty{\n\tenabled: jsii.Boolean(false),\n\tinternalUserDatabaseEnabled: jsii.Boolean(false),\n\tmasterUserOptions: &masterUserOptionsProperty{\n\t\tmasterUserArn: jsii.String(\"masterUserArn\"),\n\t\tmasterUserName: jsii.String(\"masterUserName\"),\n\t\tmasterUserPassword: jsii.String(\"masterUserPassword\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\nconst advancedSecurityOptionsInputProperty: opensearchservice.CfnDomain.AdvancedSecurityOptionsInputProperty = {\n  enabled: false,\n  internalUserDatabaseEnabled: false,\n  masterUserOptions: {\n    masterUserArn: 'masterUserArn',\n    masterUserName: 'masterUserName',\n    masterUserPassword: 'masterUserPassword',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CfnDomain.AdvancedSecurityOptionsInputProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CfnDomain.AdvancedSecurityOptionsInputProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst advancedSecurityOptionsInputProperty: opensearchservice.CfnDomain.AdvancedSecurityOptionsInputProperty = {\n  enabled: false,\n  internalUserDatabaseEnabled: false,\n  masterUserOptions: {\n    masterUserArn: 'masterUserArn',\n    masterUserName: 'masterUserName',\n    masterUserPassword: 'masterUserPassword',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "8238843f75c38049dbcdba9ddd9f54bd727a1ff4af04d87ab82b37bbe11b4fe7"
    },
    "f171c9a1ee3ea65cdd1195fc32787c44243ed1d3bdd696d7bbf579f889803190": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_opensearchservice as opensearchservice\n\ncluster_config_property = opensearchservice.CfnDomain.ClusterConfigProperty(\n    dedicated_master_count=123,\n    dedicated_master_enabled=False,\n    dedicated_master_type=\"dedicatedMasterType\",\n    instance_count=123,\n    instance_type=\"instanceType\",\n    warm_count=123,\n    warm_enabled=False,\n    warm_type=\"warmType\",\n    zone_awareness_config=opensearchservice.CfnDomain.ZoneAwarenessConfigProperty(\n        availability_zone_count=123\n    ),\n    zone_awareness_enabled=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.OpenSearchService;\n\nClusterConfigProperty clusterConfigProperty = new ClusterConfigProperty {\n    DedicatedMasterCount = 123,\n    DedicatedMasterEnabled = false,\n    DedicatedMasterType = \"dedicatedMasterType\",\n    InstanceCount = 123,\n    InstanceType = \"instanceType\",\n    WarmCount = 123,\n    WarmEnabled = false,\n    WarmType = \"warmType\",\n    ZoneAwarenessConfig = new ZoneAwarenessConfigProperty {\n        AvailabilityZoneCount = 123\n    },\n    ZoneAwarenessEnabled = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nClusterConfigProperty clusterConfigProperty = ClusterConfigProperty.builder()\n        .dedicatedMasterCount(123)\n        .dedicatedMasterEnabled(false)\n        .dedicatedMasterType(\"dedicatedMasterType\")\n        .instanceCount(123)\n        .instanceType(\"instanceType\")\n        .warmCount(123)\n        .warmEnabled(false)\n        .warmType(\"warmType\")\n        .zoneAwarenessConfig(ZoneAwarenessConfigProperty.builder()\n                .availabilityZoneCount(123)\n                .build())\n        .zoneAwarenessEnabled(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport opensearchservice \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\nclusterConfigProperty := &clusterConfigProperty{\n\tdedicatedMasterCount: jsii.Number(123),\n\tdedicatedMasterEnabled: jsii.Boolean(false),\n\tdedicatedMasterType: jsii.String(\"dedicatedMasterType\"),\n\tinstanceCount: jsii.Number(123),\n\tinstanceType: jsii.String(\"instanceType\"),\n\twarmCount: jsii.Number(123),\n\twarmEnabled: jsii.Boolean(false),\n\twarmType: jsii.String(\"warmType\"),\n\tzoneAwarenessConfig: &zoneAwarenessConfigProperty{\n\t\tavailabilityZoneCount: jsii.Number(123),\n\t},\n\tzoneAwarenessEnabled: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\nconst clusterConfigProperty: opensearchservice.CfnDomain.ClusterConfigProperty = {\n  dedicatedMasterCount: 123,\n  dedicatedMasterEnabled: false,\n  dedicatedMasterType: 'dedicatedMasterType',\n  instanceCount: 123,\n  instanceType: 'instanceType',\n  warmCount: 123,\n  warmEnabled: false,\n  warmType: 'warmType',\n  zoneAwarenessConfig: {\n    availabilityZoneCount: 123,\n  },\n  zoneAwarenessEnabled: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CfnDomain.ClusterConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CfnDomain.ClusterConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clusterConfigProperty: opensearchservice.CfnDomain.ClusterConfigProperty = {\n  dedicatedMasterCount: 123,\n  dedicatedMasterEnabled: false,\n  dedicatedMasterType: 'dedicatedMasterType',\n  instanceCount: 123,\n  instanceType: 'instanceType',\n  warmCount: 123,\n  warmEnabled: false,\n  warmType: 'warmType',\n  zoneAwarenessConfig: {\n    availabilityZoneCount: 123,\n  },\n  zoneAwarenessEnabled: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 4,
        "75": 16,
        "91": 3,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "1a97ad4881ca5c50d8e76d698a99c88be662fae518daff6ee8e059f08b8166b7"
    },
    "89fcffe50523e99fd6a328b60b1b36ce99db4386b9a6024d695408206a146492": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_opensearchservice as opensearchservice\n\ncognito_options_property = opensearchservice.CfnDomain.CognitoOptionsProperty(\n    enabled=False,\n    identity_pool_id=\"identityPoolId\",\n    role_arn=\"roleArn\",\n    user_pool_id=\"userPoolId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.OpenSearchService;\n\nCognitoOptionsProperty cognitoOptionsProperty = new CognitoOptionsProperty {\n    Enabled = false,\n    IdentityPoolId = \"identityPoolId\",\n    RoleArn = \"roleArn\",\n    UserPoolId = \"userPoolId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nCognitoOptionsProperty cognitoOptionsProperty = CognitoOptionsProperty.builder()\n        .enabled(false)\n        .identityPoolId(\"identityPoolId\")\n        .roleArn(\"roleArn\")\n        .userPoolId(\"userPoolId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport opensearchservice \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\ncognitoOptionsProperty := &cognitoOptionsProperty{\n\tenabled: jsii.Boolean(false),\n\tidentityPoolId: jsii.String(\"identityPoolId\"),\n\troleArn: jsii.String(\"roleArn\"),\n\tuserPoolId: jsii.String(\"userPoolId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\nconst cognitoOptionsProperty: opensearchservice.CfnDomain.CognitoOptionsProperty = {\n  enabled: false,\n  identityPoolId: 'identityPoolId',\n  roleArn: 'roleArn',\n  userPoolId: 'userPoolId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CfnDomain.CognitoOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CfnDomain.CognitoOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cognitoOptionsProperty: opensearchservice.CfnDomain.CognitoOptionsProperty = {\n  enabled: false,\n  identityPoolId: 'identityPoolId',\n  roleArn: 'roleArn',\n  userPoolId: 'userPoolId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "70b311be0b5efc9478107adccb5c854c7ee78b6fdcaa2c81d3e7e5b451c290e7"
    },
    "0dea39b68b503dcba8d1420092f6abff2cbbe4caf4e23761756a202dab8f831e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_opensearchservice as opensearchservice\n\ndomain_endpoint_options_property = opensearchservice.CfnDomain.DomainEndpointOptionsProperty(\n    custom_endpoint=\"customEndpoint\",\n    custom_endpoint_certificate_arn=\"customEndpointCertificateArn\",\n    custom_endpoint_enabled=False,\n    enforce_https=False,\n    tls_security_policy=\"tlsSecurityPolicy\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.OpenSearchService;\n\nDomainEndpointOptionsProperty domainEndpointOptionsProperty = new DomainEndpointOptionsProperty {\n    CustomEndpoint = \"customEndpoint\",\n    CustomEndpointCertificateArn = \"customEndpointCertificateArn\",\n    CustomEndpointEnabled = false,\n    EnforceHttps = false,\n    TlsSecurityPolicy = \"tlsSecurityPolicy\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nDomainEndpointOptionsProperty domainEndpointOptionsProperty = DomainEndpointOptionsProperty.builder()\n        .customEndpoint(\"customEndpoint\")\n        .customEndpointCertificateArn(\"customEndpointCertificateArn\")\n        .customEndpointEnabled(false)\n        .enforceHttps(false)\n        .tlsSecurityPolicy(\"tlsSecurityPolicy\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport opensearchservice \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\ndomainEndpointOptionsProperty := &domainEndpointOptionsProperty{\n\tcustomEndpoint: jsii.String(\"customEndpoint\"),\n\tcustomEndpointCertificateArn: jsii.String(\"customEndpointCertificateArn\"),\n\tcustomEndpointEnabled: jsii.Boolean(false),\n\tenforceHttps: jsii.Boolean(false),\n\ttlsSecurityPolicy: jsii.String(\"tlsSecurityPolicy\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\nconst domainEndpointOptionsProperty: opensearchservice.CfnDomain.DomainEndpointOptionsProperty = {\n  customEndpoint: 'customEndpoint',\n  customEndpointCertificateArn: 'customEndpointCertificateArn',\n  customEndpointEnabled: false,\n  enforceHttps: false,\n  tlsSecurityPolicy: 'tlsSecurityPolicy',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CfnDomain.DomainEndpointOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CfnDomain.DomainEndpointOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst domainEndpointOptionsProperty: opensearchservice.CfnDomain.DomainEndpointOptionsProperty = {\n  customEndpoint: 'customEndpoint',\n  customEndpointCertificateArn: 'customEndpointCertificateArn',\n  customEndpointEnabled: false,\n  enforceHttps: false,\n  tlsSecurityPolicy: 'tlsSecurityPolicy',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "fcd18d79cb9e1c44c0d1477cba5afc6a1f83519461144bfa74c4417630904743"
    },
    "53e8e0289bf2be2bf88c8733a34d69a016fdccd2c6cb3f494afbb494d25e3b71": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_opensearchservice as opensearchservice\n\ne_bSOptions_property = opensearchservice.CfnDomain.EBSOptionsProperty(\n    ebs_enabled=False,\n    iops=123,\n    throughput=123,\n    volume_size=123,\n    volume_type=\"volumeType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.OpenSearchService;\n\nEBSOptionsProperty eBSOptionsProperty = new EBSOptionsProperty {\n    EbsEnabled = false,\n    Iops = 123,\n    Throughput = 123,\n    VolumeSize = 123,\n    VolumeType = \"volumeType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nEBSOptionsProperty eBSOptionsProperty = EBSOptionsProperty.builder()\n        .ebsEnabled(false)\n        .iops(123)\n        .throughput(123)\n        .volumeSize(123)\n        .volumeType(\"volumeType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport opensearchservice \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\neBSOptionsProperty := &eBSOptionsProperty{\n\tebsEnabled: jsii.Boolean(false),\n\tiops: jsii.Number(123),\n\tthroughput: jsii.Number(123),\n\tvolumeSize: jsii.Number(123),\n\tvolumeType: jsii.String(\"volumeType\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\nconst eBSOptionsProperty: opensearchservice.CfnDomain.EBSOptionsProperty = {\n  ebsEnabled: false,\n  iops: 123,\n  throughput: 123,\n  volumeSize: 123,\n  volumeType: 'volumeType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CfnDomain.EBSOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CfnDomain.EBSOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eBSOptionsProperty: opensearchservice.CfnDomain.EBSOptionsProperty = {\n  ebsEnabled: false,\n  iops: 123,\n  throughput: 123,\n  volumeSize: 123,\n  volumeType: 'volumeType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 10,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "65cf3c0334a5a407799f58f8a5cd6f3aee461daba9ca9820583a81c6942351a1"
    },
    "764f36f733d0d4ee0869c7bf82d8ecd67179374767210c793e60a5f2812c1371": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_opensearchservice as opensearchservice\n\nencryption_at_rest_options_property = opensearchservice.CfnDomain.EncryptionAtRestOptionsProperty(\n    enabled=False,\n    kms_key_id=\"kmsKeyId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.OpenSearchService;\n\nEncryptionAtRestOptionsProperty encryptionAtRestOptionsProperty = new EncryptionAtRestOptionsProperty {\n    Enabled = false,\n    KmsKeyId = \"kmsKeyId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nEncryptionAtRestOptionsProperty encryptionAtRestOptionsProperty = EncryptionAtRestOptionsProperty.builder()\n        .enabled(false)\n        .kmsKeyId(\"kmsKeyId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport opensearchservice \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\nencryptionAtRestOptionsProperty := &encryptionAtRestOptionsProperty{\n\tenabled: jsii.Boolean(false),\n\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\nconst encryptionAtRestOptionsProperty: opensearchservice.CfnDomain.EncryptionAtRestOptionsProperty = {\n  enabled: false,\n  kmsKeyId: 'kmsKeyId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CfnDomain.EncryptionAtRestOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CfnDomain.EncryptionAtRestOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst encryptionAtRestOptionsProperty: opensearchservice.CfnDomain.EncryptionAtRestOptionsProperty = {\n  enabled: false,\n  kmsKeyId: 'kmsKeyId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7e25cf078a745bca3015dcc9ef41b3818ab5fda576ace760d982b3037f1b8ce3"
    },
    "341ceae8dcacb3ff2aedb0ffef20a2a6a19ac83f19f7fcba377a7aa234e654a1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_opensearchservice as opensearchservice\n\nlog_publishing_option_property = opensearchservice.CfnDomain.LogPublishingOptionProperty(\n    cloud_watch_logs_log_group_arn=\"cloudWatchLogsLogGroupArn\",\n    enabled=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.OpenSearchService;\n\nLogPublishingOptionProperty logPublishingOptionProperty = new LogPublishingOptionProperty {\n    CloudWatchLogsLogGroupArn = \"cloudWatchLogsLogGroupArn\",\n    Enabled = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nLogPublishingOptionProperty logPublishingOptionProperty = LogPublishingOptionProperty.builder()\n        .cloudWatchLogsLogGroupArn(\"cloudWatchLogsLogGroupArn\")\n        .enabled(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport opensearchservice \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\nlogPublishingOptionProperty := &logPublishingOptionProperty{\n\tcloudWatchLogsLogGroupArn: jsii.String(\"cloudWatchLogsLogGroupArn\"),\n\tenabled: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\nconst logPublishingOptionProperty: opensearchservice.CfnDomain.LogPublishingOptionProperty = {\n  cloudWatchLogsLogGroupArn: 'cloudWatchLogsLogGroupArn',\n  enabled: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CfnDomain.LogPublishingOptionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CfnDomain.LogPublishingOptionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst logPublishingOptionProperty: opensearchservice.CfnDomain.LogPublishingOptionProperty = {\n  cloudWatchLogsLogGroupArn: 'cloudWatchLogsLogGroupArn',\n  enabled: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7fec55991d6e71b0074e7656810907b9528d6aff08aa8b1dd2e4126cda4ca02b"
    },
    "6b14b7ec419247fcc1f890ac977db9d3a77ec9d9fef22d3f4cd0dfecddf2c9ab": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_opensearchservice as opensearchservice\n\nmaster_user_options_property = opensearchservice.CfnDomain.MasterUserOptionsProperty(\n    master_user_arn=\"masterUserArn\",\n    master_user_name=\"masterUserName\",\n    master_user_password=\"masterUserPassword\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.OpenSearchService;\n\nMasterUserOptionsProperty masterUserOptionsProperty = new MasterUserOptionsProperty {\n    MasterUserArn = \"masterUserArn\",\n    MasterUserName = \"masterUserName\",\n    MasterUserPassword = \"masterUserPassword\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nMasterUserOptionsProperty masterUserOptionsProperty = MasterUserOptionsProperty.builder()\n        .masterUserArn(\"masterUserArn\")\n        .masterUserName(\"masterUserName\")\n        .masterUserPassword(\"masterUserPassword\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport opensearchservice \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\nmasterUserOptionsProperty := &masterUserOptionsProperty{\n\tmasterUserArn: jsii.String(\"masterUserArn\"),\n\tmasterUserName: jsii.String(\"masterUserName\"),\n\tmasterUserPassword: jsii.String(\"masterUserPassword\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\nconst masterUserOptionsProperty: opensearchservice.CfnDomain.MasterUserOptionsProperty = {\n  masterUserArn: 'masterUserArn',\n  masterUserName: 'masterUserName',\n  masterUserPassword: 'masterUserPassword',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CfnDomain.MasterUserOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CfnDomain.MasterUserOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst masterUserOptionsProperty: opensearchservice.CfnDomain.MasterUserOptionsProperty = {\n  masterUserArn: 'masterUserArn',\n  masterUserName: 'masterUserName',\n  masterUserPassword: 'masterUserPassword',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "fc4e1459be67d1a69d9eae65dcab4647f64a9872c612657ada109df43ffc0deb"
    },
    "36fb4b0f5087f257be6e43829cc16708fcd0b106637a183d6e0b08ac5d6226cb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_opensearchservice as opensearchservice\n\nnode_to_node_encryption_options_property = opensearchservice.CfnDomain.NodeToNodeEncryptionOptionsProperty(\n    enabled=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.OpenSearchService;\n\nNodeToNodeEncryptionOptionsProperty nodeToNodeEncryptionOptionsProperty = new NodeToNodeEncryptionOptionsProperty {\n    Enabled = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nNodeToNodeEncryptionOptionsProperty nodeToNodeEncryptionOptionsProperty = NodeToNodeEncryptionOptionsProperty.builder()\n        .enabled(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport opensearchservice \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\nnodeToNodeEncryptionOptionsProperty := &nodeToNodeEncryptionOptionsProperty{\n\tenabled: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\nconst nodeToNodeEncryptionOptionsProperty: opensearchservice.CfnDomain.NodeToNodeEncryptionOptionsProperty = {\n  enabled: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CfnDomain.NodeToNodeEncryptionOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CfnDomain.NodeToNodeEncryptionOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst nodeToNodeEncryptionOptionsProperty: opensearchservice.CfnDomain.NodeToNodeEncryptionOptionsProperty = {\n  enabled: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f99cc1089d4d881c28a7539aadb3939744a8b10b31c5dac99f973da29d6e878a"
    },
    "acba81b352ef3c0a91a24502fe491d369df882fa0fdf5dcc62d996ba612de58c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_opensearchservice as opensearchservice\n\nsnapshot_options_property = opensearchservice.CfnDomain.SnapshotOptionsProperty(\n    automated_snapshot_start_hour=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.OpenSearchService;\n\nSnapshotOptionsProperty snapshotOptionsProperty = new SnapshotOptionsProperty {\n    AutomatedSnapshotStartHour = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nSnapshotOptionsProperty snapshotOptionsProperty = SnapshotOptionsProperty.builder()\n        .automatedSnapshotStartHour(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport opensearchservice \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\nsnapshotOptionsProperty := &snapshotOptionsProperty{\n\tautomatedSnapshotStartHour: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\nconst snapshotOptionsProperty: opensearchservice.CfnDomain.SnapshotOptionsProperty = {\n  automatedSnapshotStartHour: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CfnDomain.SnapshotOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CfnDomain.SnapshotOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst snapshotOptionsProperty: opensearchservice.CfnDomain.SnapshotOptionsProperty = {\n  automatedSnapshotStartHour: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "72c2173d96d7883580dca9d244942fd13a5027967c35bea7f7ebea766815cca1"
    },
    "54c8cc79643a2411143d9ad35296605524e52597343a92474bd9051b399ccd73": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_opensearchservice as opensearchservice\n\nv_pCOptions_property = opensearchservice.CfnDomain.VPCOptionsProperty(\n    security_group_ids=[\"securityGroupIds\"],\n    subnet_ids=[\"subnetIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.OpenSearchService;\n\nVPCOptionsProperty vPCOptionsProperty = new VPCOptionsProperty {\n    SecurityGroupIds = new [] { \"securityGroupIds\" },\n    SubnetIds = new [] { \"subnetIds\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nVPCOptionsProperty vPCOptionsProperty = VPCOptionsProperty.builder()\n        .securityGroupIds(List.of(\"securityGroupIds\"))\n        .subnetIds(List.of(\"subnetIds\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport opensearchservice \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\nvPCOptionsProperty := &vPCOptionsProperty{\n\tsecurityGroupIds: []*string{\n\t\tjsii.String(\"securityGroupIds\"),\n\t},\n\tsubnetIds: []*string{\n\t\tjsii.String(\"subnetIds\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\nconst vPCOptionsProperty: opensearchservice.CfnDomain.VPCOptionsProperty = {\n  securityGroupIds: ['securityGroupIds'],\n  subnetIds: ['subnetIds'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CfnDomain.VPCOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CfnDomain.VPCOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst vPCOptionsProperty: opensearchservice.CfnDomain.VPCOptionsProperty = {\n  securityGroupIds: ['securityGroupIds'],\n  subnetIds: ['subnetIds'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3db5651fb2b6d8ec09af4d9ccfff1071aada800ad97b06b5cb8dd220e1acbdbe"
    },
    "a2442742b7a1ae5686e66d596a2960247d377326545b5b26638a50fdadf783fb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_opensearchservice as opensearchservice\n\nzone_awareness_config_property = opensearchservice.CfnDomain.ZoneAwarenessConfigProperty(\n    availability_zone_count=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.OpenSearchService;\n\nZoneAwarenessConfigProperty zoneAwarenessConfigProperty = new ZoneAwarenessConfigProperty {\n    AvailabilityZoneCount = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nZoneAwarenessConfigProperty zoneAwarenessConfigProperty = ZoneAwarenessConfigProperty.builder()\n        .availabilityZoneCount(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport opensearchservice \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\nzoneAwarenessConfigProperty := &zoneAwarenessConfigProperty{\n\tavailabilityZoneCount: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\nconst zoneAwarenessConfigProperty: opensearchservice.CfnDomain.ZoneAwarenessConfigProperty = {\n  availabilityZoneCount: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CfnDomain.ZoneAwarenessConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CfnDomain.ZoneAwarenessConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst zoneAwarenessConfigProperty: opensearchservice.CfnDomain.ZoneAwarenessConfigProperty = {\n  availabilityZoneCount: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "0fef5b8a09db72c3774e9c1495e0dee68c4b972029ff69a094b6b005beab5625"
    },
    "41254283aabdc186dc7ffd7e503947362d4a9f669c8acb618a03bf161b5cdf76": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_opensearchservice as opensearchservice\n\n# access_policies: Any\n\ncfn_domain_props = opensearchservice.CfnDomainProps(\n    access_policies=access_policies,\n    advanced_options={\n        \"advanced_options_key\": \"advancedOptions\"\n    },\n    advanced_security_options=opensearchservice.CfnDomain.AdvancedSecurityOptionsInputProperty(\n        enabled=False,\n        internal_user_database_enabled=False,\n        master_user_options=opensearchservice.CfnDomain.MasterUserOptionsProperty(\n            master_user_arn=\"masterUserArn\",\n            master_user_name=\"masterUserName\",\n            master_user_password=\"masterUserPassword\"\n        )\n    ),\n    cluster_config=opensearchservice.CfnDomain.ClusterConfigProperty(\n        dedicated_master_count=123,\n        dedicated_master_enabled=False,\n        dedicated_master_type=\"dedicatedMasterType\",\n        instance_count=123,\n        instance_type=\"instanceType\",\n        warm_count=123,\n        warm_enabled=False,\n        warm_type=\"warmType\",\n        zone_awareness_config=opensearchservice.CfnDomain.ZoneAwarenessConfigProperty(\n            availability_zone_count=123\n        ),\n        zone_awareness_enabled=False\n    ),\n    cognito_options=opensearchservice.CfnDomain.CognitoOptionsProperty(\n        enabled=False,\n        identity_pool_id=\"identityPoolId\",\n        role_arn=\"roleArn\",\n        user_pool_id=\"userPoolId\"\n    ),\n    domain_endpoint_options=opensearchservice.CfnDomain.DomainEndpointOptionsProperty(\n        custom_endpoint=\"customEndpoint\",\n        custom_endpoint_certificate_arn=\"customEndpointCertificateArn\",\n        custom_endpoint_enabled=False,\n        enforce_https=False,\n        tls_security_policy=\"tlsSecurityPolicy\"\n    ),\n    domain_name=\"domainName\",\n    ebs_options=opensearchservice.CfnDomain.EBSOptionsProperty(\n        ebs_enabled=False,\n        iops=123,\n        throughput=123,\n        volume_size=123,\n        volume_type=\"volumeType\"\n    ),\n    encryption_at_rest_options=opensearchservice.CfnDomain.EncryptionAtRestOptionsProperty(\n        enabled=False,\n        kms_key_id=\"kmsKeyId\"\n    ),\n    engine_version=\"engineVersion\",\n    log_publishing_options={\n        \"log_publishing_options_key\": opensearchservice.CfnDomain.LogPublishingOptionProperty(\n            cloud_watch_logs_log_group_arn=\"cloudWatchLogsLogGroupArn\",\n            enabled=False\n        )\n    },\n    node_to_node_encryption_options=opensearchservice.CfnDomain.NodeToNodeEncryptionOptionsProperty(\n        enabled=False\n    ),\n    snapshot_options=opensearchservice.CfnDomain.SnapshotOptionsProperty(\n        automated_snapshot_start_hour=123\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    vpc_options=opensearchservice.CfnDomain.VPCOptionsProperty(\n        security_group_ids=[\"securityGroupIds\"],\n        subnet_ids=[\"subnetIds\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.OpenSearchService;\n\nvar accessPolicies;\n\nCfnDomainProps cfnDomainProps = new CfnDomainProps {\n    AccessPolicies = accessPolicies,\n    AdvancedOptions = new Dictionary<string, string> {\n        { \"advancedOptionsKey\", \"advancedOptions\" }\n    },\n    AdvancedSecurityOptions = new AdvancedSecurityOptionsInputProperty {\n        Enabled = false,\n        InternalUserDatabaseEnabled = false,\n        MasterUserOptions = new MasterUserOptionsProperty {\n            MasterUserArn = \"masterUserArn\",\n            MasterUserName = \"masterUserName\",\n            MasterUserPassword = \"masterUserPassword\"\n        }\n    },\n    ClusterConfig = new ClusterConfigProperty {\n        DedicatedMasterCount = 123,\n        DedicatedMasterEnabled = false,\n        DedicatedMasterType = \"dedicatedMasterType\",\n        InstanceCount = 123,\n        InstanceType = \"instanceType\",\n        WarmCount = 123,\n        WarmEnabled = false,\n        WarmType = \"warmType\",\n        ZoneAwarenessConfig = new ZoneAwarenessConfigProperty {\n            AvailabilityZoneCount = 123\n        },\n        ZoneAwarenessEnabled = false\n    },\n    CognitoOptions = new CognitoOptionsProperty {\n        Enabled = false,\n        IdentityPoolId = \"identityPoolId\",\n        RoleArn = \"roleArn\",\n        UserPoolId = \"userPoolId\"\n    },\n    DomainEndpointOptions = new DomainEndpointOptionsProperty {\n        CustomEndpoint = \"customEndpoint\",\n        CustomEndpointCertificateArn = \"customEndpointCertificateArn\",\n        CustomEndpointEnabled = false,\n        EnforceHttps = false,\n        TlsSecurityPolicy = \"tlsSecurityPolicy\"\n    },\n    DomainName = \"domainName\",\n    EbsOptions = new EBSOptionsProperty {\n        EbsEnabled = false,\n        Iops = 123,\n        Throughput = 123,\n        VolumeSize = 123,\n        VolumeType = \"volumeType\"\n    },\n    EncryptionAtRestOptions = new EncryptionAtRestOptionsProperty {\n        Enabled = false,\n        KmsKeyId = \"kmsKeyId\"\n    },\n    EngineVersion = \"engineVersion\",\n    LogPublishingOptions = new Dictionary<string, object> {\n        { \"logPublishingOptionsKey\", new LogPublishingOptionProperty {\n            CloudWatchLogsLogGroupArn = \"cloudWatchLogsLogGroupArn\",\n            Enabled = false\n        } }\n    },\n    NodeToNodeEncryptionOptions = new NodeToNodeEncryptionOptionsProperty {\n        Enabled = false\n    },\n    SnapshotOptions = new SnapshotOptionsProperty {\n        AutomatedSnapshotStartHour = 123\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    VpcOptions = new VPCOptionsProperty {\n        SecurityGroupIds = new [] { \"securityGroupIds\" },\n        SubnetIds = new [] { \"subnetIds\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nObject accessPolicies;\n\nCfnDomainProps cfnDomainProps = CfnDomainProps.builder()\n        .accessPolicies(accessPolicies)\n        .advancedOptions(Map.of(\n                \"advancedOptionsKey\", \"advancedOptions\"))\n        .advancedSecurityOptions(AdvancedSecurityOptionsInputProperty.builder()\n                .enabled(false)\n                .internalUserDatabaseEnabled(false)\n                .masterUserOptions(MasterUserOptionsProperty.builder()\n                        .masterUserArn(\"masterUserArn\")\n                        .masterUserName(\"masterUserName\")\n                        .masterUserPassword(\"masterUserPassword\")\n                        .build())\n                .build())\n        .clusterConfig(ClusterConfigProperty.builder()\n                .dedicatedMasterCount(123)\n                .dedicatedMasterEnabled(false)\n                .dedicatedMasterType(\"dedicatedMasterType\")\n                .instanceCount(123)\n                .instanceType(\"instanceType\")\n                .warmCount(123)\n                .warmEnabled(false)\n                .warmType(\"warmType\")\n                .zoneAwarenessConfig(ZoneAwarenessConfigProperty.builder()\n                        .availabilityZoneCount(123)\n                        .build())\n                .zoneAwarenessEnabled(false)\n                .build())\n        .cognitoOptions(CognitoOptionsProperty.builder()\n                .enabled(false)\n                .identityPoolId(\"identityPoolId\")\n                .roleArn(\"roleArn\")\n                .userPoolId(\"userPoolId\")\n                .build())\n        .domainEndpointOptions(DomainEndpointOptionsProperty.builder()\n                .customEndpoint(\"customEndpoint\")\n                .customEndpointCertificateArn(\"customEndpointCertificateArn\")\n                .customEndpointEnabled(false)\n                .enforceHttps(false)\n                .tlsSecurityPolicy(\"tlsSecurityPolicy\")\n                .build())\n        .domainName(\"domainName\")\n        .ebsOptions(EBSOptionsProperty.builder()\n                .ebsEnabled(false)\n                .iops(123)\n                .throughput(123)\n                .volumeSize(123)\n                .volumeType(\"volumeType\")\n                .build())\n        .encryptionAtRestOptions(EncryptionAtRestOptionsProperty.builder()\n                .enabled(false)\n                .kmsKeyId(\"kmsKeyId\")\n                .build())\n        .engineVersion(\"engineVersion\")\n        .logPublishingOptions(Map.of(\n                \"logPublishingOptionsKey\", LogPublishingOptionProperty.builder()\n                        .cloudWatchLogsLogGroupArn(\"cloudWatchLogsLogGroupArn\")\n                        .enabled(false)\n                        .build()))\n        .nodeToNodeEncryptionOptions(NodeToNodeEncryptionOptionsProperty.builder()\n                .enabled(false)\n                .build())\n        .snapshotOptions(SnapshotOptionsProperty.builder()\n                .automatedSnapshotStartHour(123)\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .vpcOptions(VPCOptionsProperty.builder()\n                .securityGroupIds(List.of(\"securityGroupIds\"))\n                .subnetIds(List.of(\"subnetIds\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport opensearchservice \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\nvar accessPolicies interface{}\n\ncfnDomainProps := &cfnDomainProps{\n\taccessPolicies: accessPolicies,\n\tadvancedOptions: map[string]*string{\n\t\t\"advancedOptionsKey\": jsii.String(\"advancedOptions\"),\n\t},\n\tadvancedSecurityOptions: &advancedSecurityOptionsInputProperty{\n\t\tenabled: jsii.Boolean(false),\n\t\tinternalUserDatabaseEnabled: jsii.Boolean(false),\n\t\tmasterUserOptions: &masterUserOptionsProperty{\n\t\t\tmasterUserArn: jsii.String(\"masterUserArn\"),\n\t\t\tmasterUserName: jsii.String(\"masterUserName\"),\n\t\t\tmasterUserPassword: jsii.String(\"masterUserPassword\"),\n\t\t},\n\t},\n\tclusterConfig: &clusterConfigProperty{\n\t\tdedicatedMasterCount: jsii.Number(123),\n\t\tdedicatedMasterEnabled: jsii.Boolean(false),\n\t\tdedicatedMasterType: jsii.String(\"dedicatedMasterType\"),\n\t\tinstanceCount: jsii.Number(123),\n\t\tinstanceType: jsii.String(\"instanceType\"),\n\t\twarmCount: jsii.Number(123),\n\t\twarmEnabled: jsii.Boolean(false),\n\t\twarmType: jsii.String(\"warmType\"),\n\t\tzoneAwarenessConfig: &zoneAwarenessConfigProperty{\n\t\t\tavailabilityZoneCount: jsii.Number(123),\n\t\t},\n\t\tzoneAwarenessEnabled: jsii.Boolean(false),\n\t},\n\tcognitoOptions: &cognitoOptionsProperty{\n\t\tenabled: jsii.Boolean(false),\n\t\tidentityPoolId: jsii.String(\"identityPoolId\"),\n\t\troleArn: jsii.String(\"roleArn\"),\n\t\tuserPoolId: jsii.String(\"userPoolId\"),\n\t},\n\tdomainEndpointOptions: &domainEndpointOptionsProperty{\n\t\tcustomEndpoint: jsii.String(\"customEndpoint\"),\n\t\tcustomEndpointCertificateArn: jsii.String(\"customEndpointCertificateArn\"),\n\t\tcustomEndpointEnabled: jsii.Boolean(false),\n\t\tenforceHttps: jsii.Boolean(false),\n\t\ttlsSecurityPolicy: jsii.String(\"tlsSecurityPolicy\"),\n\t},\n\tdomainName: jsii.String(\"domainName\"),\n\tebsOptions: &eBSOptionsProperty{\n\t\tebsEnabled: jsii.Boolean(false),\n\t\tiops: jsii.Number(123),\n\t\tthroughput: jsii.Number(123),\n\t\tvolumeSize: jsii.Number(123),\n\t\tvolumeType: jsii.String(\"volumeType\"),\n\t},\n\tencryptionAtRestOptions: &encryptionAtRestOptionsProperty{\n\t\tenabled: jsii.Boolean(false),\n\t\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\t},\n\tengineVersion: jsii.String(\"engineVersion\"),\n\tlogPublishingOptions: map[string]interface{}{\n\t\t\"logPublishingOptionsKey\": &LogPublishingOptionProperty{\n\t\t\t\"cloudWatchLogsLogGroupArn\": jsii.String(\"cloudWatchLogsLogGroupArn\"),\n\t\t\t\"enabled\": jsii.Boolean(false),\n\t\t},\n\t},\n\tnodeToNodeEncryptionOptions: &nodeToNodeEncryptionOptionsProperty{\n\t\tenabled: jsii.Boolean(false),\n\t},\n\tsnapshotOptions: &snapshotOptionsProperty{\n\t\tautomatedSnapshotStartHour: jsii.Number(123),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tvpcOptions: &vPCOptionsProperty{\n\t\tsecurityGroupIds: []*string{\n\t\t\tjsii.String(\"securityGroupIds\"),\n\t\t},\n\t\tsubnetIds: []*string{\n\t\t\tjsii.String(\"subnetIds\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n\ndeclare const accessPolicies: any;\nconst cfnDomainProps: opensearchservice.CfnDomainProps = {\n  accessPolicies: accessPolicies,\n  advancedOptions: {\n    advancedOptionsKey: 'advancedOptions',\n  },\n  advancedSecurityOptions: {\n    enabled: false,\n    internalUserDatabaseEnabled: false,\n    masterUserOptions: {\n      masterUserArn: 'masterUserArn',\n      masterUserName: 'masterUserName',\n      masterUserPassword: 'masterUserPassword',\n    },\n  },\n  clusterConfig: {\n    dedicatedMasterCount: 123,\n    dedicatedMasterEnabled: false,\n    dedicatedMasterType: 'dedicatedMasterType',\n    instanceCount: 123,\n    instanceType: 'instanceType',\n    warmCount: 123,\n    warmEnabled: false,\n    warmType: 'warmType',\n    zoneAwarenessConfig: {\n      availabilityZoneCount: 123,\n    },\n    zoneAwarenessEnabled: false,\n  },\n  cognitoOptions: {\n    enabled: false,\n    identityPoolId: 'identityPoolId',\n    roleArn: 'roleArn',\n    userPoolId: 'userPoolId',\n  },\n  domainEndpointOptions: {\n    customEndpoint: 'customEndpoint',\n    customEndpointCertificateArn: 'customEndpointCertificateArn',\n    customEndpointEnabled: false,\n    enforceHttps: false,\n    tlsSecurityPolicy: 'tlsSecurityPolicy',\n  },\n  domainName: 'domainName',\n  ebsOptions: {\n    ebsEnabled: false,\n    iops: 123,\n    throughput: 123,\n    volumeSize: 123,\n    volumeType: 'volumeType',\n  },\n  encryptionAtRestOptions: {\n    enabled: false,\n    kmsKeyId: 'kmsKeyId',\n  },\n  engineVersion: 'engineVersion',\n  logPublishingOptions: {\n    logPublishingOptionsKey: {\n      cloudWatchLogsLogGroupArn: 'cloudWatchLogsLogGroupArn',\n      enabled: false,\n    },\n  },\n  nodeToNodeEncryptionOptions: {\n    enabled: false,\n  },\n  snapshotOptions: {\n    automatedSnapshotStartHour: 123,\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcOptions: {\n    securityGroupIds: ['securityGroupIds'],\n    subnetIds: ['subnetIds'],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CfnDomainProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CfnDomainProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n\ndeclare const accessPolicies: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDomainProps: opensearchservice.CfnDomainProps = {\n  accessPolicies: accessPolicies,\n  advancedOptions: {\n    advancedOptionsKey: 'advancedOptions',\n  },\n  advancedSecurityOptions: {\n    enabled: false,\n    internalUserDatabaseEnabled: false,\n    masterUserOptions: {\n      masterUserArn: 'masterUserArn',\n      masterUserName: 'masterUserName',\n      masterUserPassword: 'masterUserPassword',\n    },\n  },\n  clusterConfig: {\n    dedicatedMasterCount: 123,\n    dedicatedMasterEnabled: false,\n    dedicatedMasterType: 'dedicatedMasterType',\n    instanceCount: 123,\n    instanceType: 'instanceType',\n    warmCount: 123,\n    warmEnabled: false,\n    warmType: 'warmType',\n    zoneAwarenessConfig: {\n      availabilityZoneCount: 123,\n    },\n    zoneAwarenessEnabled: false,\n  },\n  cognitoOptions: {\n    enabled: false,\n    identityPoolId: 'identityPoolId',\n    roleArn: 'roleArn',\n    userPoolId: 'userPoolId',\n  },\n  domainEndpointOptions: {\n    customEndpoint: 'customEndpoint',\n    customEndpointCertificateArn: 'customEndpointCertificateArn',\n    customEndpointEnabled: false,\n    enforceHttps: false,\n    tlsSecurityPolicy: 'tlsSecurityPolicy',\n  },\n  domainName: 'domainName',\n  ebsOptions: {\n    ebsEnabled: false,\n    iops: 123,\n    throughput: 123,\n    volumeSize: 123,\n    volumeType: 'volumeType',\n  },\n  encryptionAtRestOptions: {\n    enabled: false,\n    kmsKeyId: 'kmsKeyId',\n  },\n  engineVersion: 'engineVersion',\n  logPublishingOptions: {\n    logPublishingOptionsKey: {\n      cloudWatchLogsLogGroupArn: 'cloudWatchLogsLogGroupArn',\n      enabled: false,\n    },\n  },\n  nodeToNodeEncryptionOptions: {\n    enabled: false,\n  },\n  snapshotOptions: {\n    automatedSnapshotStartHour: 123,\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcOptions: {\n    securityGroupIds: ['securityGroupIds'],\n    subnetIds: ['subnetIds'],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 8,
        "10": 23,
        "75": 64,
        "91": 12,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 16,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 58,
        "290": 1
      },
      "fqnsFingerprint": "c9fc118968571b39a2c226eb28487c9505545574232ca342d48ede0c42c26ea6"
    },
    "958e7473e8576a27f9833e03c1bb4a9a2f108a2c796375ac56442f792ea8b1ee": {
      "translations": {
        "python": {
          "source": "opensearch.Domain(self, \"Domain\",\n    cognito_dashboards_auth=opensearch.CognitoOptions(\n        identity_pool_id=\"test-identity-pool-id\",\n        user_pool_id=\"test-user-pool-id\",\n        role=role\n    ),\n    version=open_search_version\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Domain(this, \"Domain\", new DomainProps {\n    CognitoDashboardsAuth = new CognitoOptions {\n        IdentityPoolId = \"test-identity-pool-id\",\n        UserPoolId = \"test-user-pool-id\",\n        Role = role\n    },\n    Version = openSearchVersion\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain.Builder.create(this, \"Domain\")\n        .cognitoDashboardsAuth(CognitoOptions.builder()\n                .identityPoolId(\"test-identity-pool-id\")\n                .userPoolId(\"test-user-pool-id\")\n                .role(role)\n                .build())\n        .version(openSearchVersion)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tcognitoDashboardsAuth: &cognitoOptions{\n\t\tidentityPoolId: jsii.String(\"test-identity-pool-id\"),\n\t\tuserPoolId: jsii.String(\"test-user-pool-id\"),\n\t\trole: role,\n\t},\n\tversion: openSearchVersion,\n})",
          "version": "1"
        },
        "$": {
          "source": "new opensearch.Domain(this, 'Domain', {\n  cognitoDashboardsAuth: {\n    identityPoolId: 'test-identity-pool-id',\n    userPoolId: 'test-user-pool-id',\n    role: role,\n  },\n  version: openSearchVersion,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CognitoOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-opensearchservice.CognitoOptions",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as es from '@aws-cdk/aws-elasticsearch';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\n\ndeclare const role: iam.IRole;\ndeclare const elasticsearchVersion: es.ElasticsearchVersion;\ndeclare const openSearchVersion: opensearch.EngineVersion;\n\nclass Fixture extends cdk.Construct {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew opensearch.Domain(this, 'Domain', {\n  cognitoDashboardsAuth: {\n    identityPoolId: 'test-identity-pool-id',\n    userPoolId: 'test-user-pool-id',\n    role: role,\n  },\n  version: openSearchVersion,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "977ef3cc41a46591f363171157f3c013f9a4876376a32a019e566ba1221abd6f"
    },
    "5eb7865df85191b0030676980de5c258e6971c397eb6951a8cd113e161c6ced5": {
      "translations": {
        "python": {
          "source": "opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    custom_endpoint=opensearch.CustomEndpointOptions(\n        domain_name=\"search.example.com\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    CustomEndpoint = new CustomEndpointOptions {\n        DomainName = \"search.example.com\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .customEndpoint(CustomEndpointOptions.builder()\n                .domainName(\"search.example.com\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tcustomEndpoint: &customEndpointOptions{\n\t\tdomainName: jsii.String(\"search.example.com\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  customEndpoint: {\n    domainName: 'search.example.com',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.CustomEndpointOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CustomEndpointOptions",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  customEndpoint: {\n    domainName: 'search.example.com',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "32a44fb6c60e3c61ec9f76aa8dab0aabd926925b36318b3902496ecb7739cada"
    },
    "09efecf674c4de5596e17fb78dd4f4c44400c0e0149b26374814e5cc1d8b2c7d": {
      "translations": {
        "python": {
          "source": "domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    ebs=opensearch.EbsOptions(\n        volume_size=100,\n        volume_type=ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD\n    ),\n    node_to_node_encryption=True,\n    encryption_at_rest=opensearch.EncryptionAtRestOptions(\n        enabled=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    Ebs = new EbsOptions {\n        VolumeSize = 100,\n        VolumeType = EbsDeviceVolumeType.GENERAL_PURPOSE_SSD\n    },\n    NodeToNodeEncryption = true,\n    EncryptionAtRest = new EncryptionAtRestOptions {\n        Enabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .ebs(EbsOptions.builder()\n                .volumeSize(100)\n                .volumeType(EbsDeviceVolumeType.GENERAL_PURPOSE_SSD)\n                .build())\n        .nodeToNodeEncryption(true)\n        .encryptionAtRest(EncryptionAtRestOptions.builder()\n                .enabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "domain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tebs: &ebsOptions{\n\t\tvolumeSize: jsii.Number(100),\n\t\tvolumeType: ec2.ebsDeviceVolumeType_GENERAL_PURPOSE_SSD,\n\t},\n\tnodeToNodeEncryption: jsii.Boolean(true),\n\tencryptionAtRest: &encryptionAtRestOptions{\n\t\tenabled: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  ebs: {\n    volumeSize: 100,\n    volumeType: ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD,\n  },\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.Domain"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType",
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType#GENERAL_PURPOSE_SSD",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EbsOptions",
        "@aws-cdk/aws-opensearchservice.EncryptionAtRestOptions",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  ebs: {\n    volumeSize: 100,\n    volumeType: ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD,\n  },\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 16,
        "104": 1,
        "106": 2,
        "193": 3,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "4224c04b42a194d41f6eb121e3cf7ae8dd36e77f5c75c91f8692aba75309f83f"
    },
    "c4424e2f65e5a117f4eb7153567a850e4eb4a3066fb6add9d6a08405fba47c26": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_opensearchservice as opensearchservice\n\ndomain_attributes = opensearchservice.DomainAttributes(\n    domain_arn=\"domainArn\",\n    domain_endpoint=\"domainEndpoint\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.OpenSearchService;\n\nDomainAttributes domainAttributes = new DomainAttributes {\n    DomainArn = \"domainArn\",\n    DomainEndpoint = \"domainEndpoint\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.opensearchservice.*;\n\nDomainAttributes domainAttributes = DomainAttributes.builder()\n        .domainArn(\"domainArn\")\n        .domainEndpoint(\"domainEndpoint\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport opensearchservice \"github.com/aws-samples/dummy/awscdkawsopensearchservice\"\n\ndomainAttributes := &domainAttributes{\n\tdomainArn: jsii.String(\"domainArn\"),\n\tdomainEndpoint: jsii.String(\"domainEndpoint\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\nconst domainAttributes: opensearchservice.DomainAttributes = {\n  domainArn: 'domainArn',\n  domainEndpoint: 'domainEndpoint',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.DomainAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.DomainAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as opensearchservice from '@aws-cdk/aws-opensearchservice';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst domainAttributes: opensearchservice.DomainAttributes = {\n  domainArn: 'domainArn',\n  domainEndpoint: 'domainEndpoint',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "fc758a0c169636b7d1d48e81302beaf2da82de3f07c30106a174b91c3e582ab0"
    },
    "41ae33eaea781f41527be1a62976bd908a4ecd2bca980d4391c682345fe373b9": {
      "translations": {
        "python": {
          "source": "domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    ebs=opensearch.EbsOptions(\n        volume_size=100,\n        volume_type=ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD\n    ),\n    node_to_node_encryption=True,\n    encryption_at_rest=opensearch.EncryptionAtRestOptions(\n        enabled=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    Ebs = new EbsOptions {\n        VolumeSize = 100,\n        VolumeType = EbsDeviceVolumeType.GENERAL_PURPOSE_SSD\n    },\n    NodeToNodeEncryption = true,\n    EncryptionAtRest = new EncryptionAtRestOptions {\n        Enabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .ebs(EbsOptions.builder()\n                .volumeSize(100)\n                .volumeType(EbsDeviceVolumeType.GENERAL_PURPOSE_SSD)\n                .build())\n        .nodeToNodeEncryption(true)\n        .encryptionAtRest(EncryptionAtRestOptions.builder()\n                .enabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "domain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tebs: &ebsOptions{\n\t\tvolumeSize: jsii.Number(100),\n\t\tvolumeType: ec2.ebsDeviceVolumeType_GENERAL_PURPOSE_SSD,\n\t},\n\tnodeToNodeEncryption: jsii.Boolean(true),\n\tencryptionAtRest: &encryptionAtRestOptions{\n\t\tenabled: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  ebs: {\n    volumeSize: 100,\n    volumeType: ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD,\n  },\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.DomainProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType",
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType#GENERAL_PURPOSE_SSD",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EbsOptions",
        "@aws-cdk/aws-opensearchservice.EncryptionAtRestOptions",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  ebs: {\n    volumeSize: 100,\n    volumeType: ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD,\n  },\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 16,
        "104": 1,
        "106": 2,
        "193": 3,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "4224c04b42a194d41f6eb121e3cf7ae8dd36e77f5c75c91f8692aba75309f83f"
    },
    "9c60cda7ac4b74366c778cc369b7b4d7eabd189519ee22e05ca4281b1868dee3": {
      "translations": {
        "python": {
          "source": "prod_domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    capacity=opensearch.CapacityConfig(\n        master_nodes=5,\n        data_nodes=20\n    ),\n    ebs=opensearch.EbsOptions(\n        volume_size=20\n    ),\n    zone_awareness=opensearch.ZoneAwarenessConfig(\n        availability_zone_count=3\n    ),\n    logging=opensearch.LoggingOptions(\n        slow_search_log_enabled=True,\n        app_log_enabled=True,\n        slow_index_log_enabled=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain prodDomain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    Capacity = new CapacityConfig {\n        MasterNodes = 5,\n        DataNodes = 20\n    },\n    Ebs = new EbsOptions {\n        VolumeSize = 20\n    },\n    ZoneAwareness = new ZoneAwarenessConfig {\n        AvailabilityZoneCount = 3\n    },\n    Logging = new LoggingOptions {\n        SlowSearchLogEnabled = true,\n        AppLogEnabled = true,\n        SlowIndexLogEnabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain prodDomain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .capacity(CapacityConfig.builder()\n                .masterNodes(5)\n                .dataNodes(20)\n                .build())\n        .ebs(EbsOptions.builder()\n                .volumeSize(20)\n                .build())\n        .zoneAwareness(ZoneAwarenessConfig.builder()\n                .availabilityZoneCount(3)\n                .build())\n        .logging(LoggingOptions.builder()\n                .slowSearchLogEnabled(true)\n                .appLogEnabled(true)\n                .slowIndexLogEnabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "prodDomain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tcapacity: &capacityConfig{\n\t\tmasterNodes: jsii.Number(5),\n\t\tdataNodes: jsii.Number(20),\n\t},\n\tebs: &ebsOptions{\n\t\tvolumeSize: jsii.Number(20),\n\t},\n\tzoneAwareness: &zoneAwarenessConfig{\n\t\tavailabilityZoneCount: jsii.Number(3),\n\t},\n\tlogging: &loggingOptions{\n\t\tslowSearchLogEnabled: jsii.Boolean(true),\n\t\tappLogEnabled: jsii.Boolean(true),\n\t\tslowIndexLogEnabled: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const prodDomain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  capacity: {\n    masterNodes: 5,\n    dataNodes: 20,\n  },\n  ebs: {\n    volumeSize: 20,\n  },\n  zoneAwareness: {\n    availabilityZoneCount: 3,\n  },\n  logging: {\n    slowSearchLogEnabled: true,\n    appLogEnabled: true,\n    slowIndexLogEnabled: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.EbsOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CapacityConfig",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EbsOptions",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "@aws-cdk/aws-opensearchservice.LoggingOptions",
        "@aws-cdk/aws-opensearchservice.ZoneAwarenessConfig",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst prodDomain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  capacity: {\n    masterNodes: 5,\n    dataNodes: 20,\n  },\n  ebs: {\n    volumeSize: 20,\n  },\n  zoneAwareness: {\n    availabilityZoneCount: 3,\n  },\n  logging: {\n    slowSearchLogEnabled: true,\n    appLogEnabled: true,\n    slowIndexLogEnabled: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 1,
        "75": 18,
        "104": 1,
        "106": 3,
        "193": 5,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 12
      },
      "fqnsFingerprint": "f5623f119a0be5a5bbbc0cda6698ec01359d59dcb465f194077375d59d4f1700"
    },
    "76c9e9b2c0b66fcd364fbfe9e7bbc239835f264e7f62a691e6ed1473fdcaa55d": {
      "translations": {
        "python": {
          "source": "domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    enforce_https=True,\n    node_to_node_encryption=True,\n    encryption_at_rest=opensearch.EncryptionAtRestOptions(\n        enabled=True\n    ),\n    fine_grained_access_control=opensearch.AdvancedSecurityOptions(\n        master_user_name=\"master-user\"\n    ),\n    logging=opensearch.LoggingOptions(\n        audit_log_enabled=True,\n        slow_search_log_enabled=True,\n        app_log_enabled=True,\n        slow_index_log_enabled=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    EnforceHttps = true,\n    NodeToNodeEncryption = true,\n    EncryptionAtRest = new EncryptionAtRestOptions {\n        Enabled = true\n    },\n    FineGrainedAccessControl = new AdvancedSecurityOptions {\n        MasterUserName = \"master-user\"\n    },\n    Logging = new LoggingOptions {\n        AuditLogEnabled = true,\n        SlowSearchLogEnabled = true,\n        AppLogEnabled = true,\n        SlowIndexLogEnabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .enforceHttps(true)\n        .nodeToNodeEncryption(true)\n        .encryptionAtRest(EncryptionAtRestOptions.builder()\n                .enabled(true)\n                .build())\n        .fineGrainedAccessControl(AdvancedSecurityOptions.builder()\n                .masterUserName(\"master-user\")\n                .build())\n        .logging(LoggingOptions.builder()\n                .auditLogEnabled(true)\n                .slowSearchLogEnabled(true)\n                .appLogEnabled(true)\n                .slowIndexLogEnabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "domain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tenforceHttps: jsii.Boolean(true),\n\tnodeToNodeEncryption: jsii.Boolean(true),\n\tencryptionAtRest: &encryptionAtRestOptions{\n\t\tenabled: jsii.Boolean(true),\n\t},\n\tfineGrainedAccessControl: &advancedSecurityOptions{\n\t\tmasterUserName: jsii.String(\"master-user\"),\n\t},\n\tlogging: &loggingOptions{\n\t\tauditLogEnabled: jsii.Boolean(true),\n\t\tslowSearchLogEnabled: jsii.Boolean(true),\n\t\tappLogEnabled: jsii.Boolean(true),\n\t\tslowIndexLogEnabled: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  enforceHttps: true,\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n  fineGrainedAccessControl: {\n    masterUserName: 'master-user',\n  },\n  logging: {\n    auditLogEnabled: true,\n    slowSearchLogEnabled: true,\n    appLogEnabled: true,\n    slowIndexLogEnabled: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.EncryptionAtRestOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.AdvancedSecurityOptions",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EncryptionAtRestOptions",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "@aws-cdk/aws-opensearchservice.LoggingOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  enforceHttps: true,\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n  fineGrainedAccessControl: {\n    masterUserName: 'master-user',\n  },\n  logging: {\n    auditLogEnabled: true,\n    slowSearchLogEnabled: true,\n    appLogEnabled: true,\n    slowIndexLogEnabled: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 1,
        "106": 7,
        "193": 4,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 12
      },
      "fqnsFingerprint": "7cb3e4e7b9e4ba6c6cc5bf9739d8c1555fa45f3493b579fc02c6efb86eb95bf8"
    },
    "cd1a1e0d17ac54359ae93e117ca1a2afdb66075eb5d6deaa3f864cb24583134f": {
      "translations": {
        "python": {
          "source": "domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    ebs=opensearch.EbsOptions(\n        volume_size=100,\n        volume_type=ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD\n    ),\n    node_to_node_encryption=True,\n    encryption_at_rest=opensearch.EncryptionAtRestOptions(\n        enabled=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    Ebs = new EbsOptions {\n        VolumeSize = 100,\n        VolumeType = EbsDeviceVolumeType.GENERAL_PURPOSE_SSD\n    },\n    NodeToNodeEncryption = true,\n    EncryptionAtRest = new EncryptionAtRestOptions {\n        Enabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain domain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .ebs(EbsOptions.builder()\n                .volumeSize(100)\n                .volumeType(EbsDeviceVolumeType.GENERAL_PURPOSE_SSD)\n                .build())\n        .nodeToNodeEncryption(true)\n        .encryptionAtRest(EncryptionAtRestOptions.builder()\n                .enabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "domain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tebs: &ebsOptions{\n\t\tvolumeSize: jsii.Number(100),\n\t\tvolumeType: ec2.ebsDeviceVolumeType_GENERAL_PURPOSE_SSD,\n\t},\n\tnodeToNodeEncryption: jsii.Boolean(true),\n\tencryptionAtRest: &encryptionAtRestOptions{\n\t\tenabled: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  ebs: {\n    volumeSize: 100,\n    volumeType: ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD,\n  },\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.EngineVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType",
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType#GENERAL_PURPOSE_SSD",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EbsOptions",
        "@aws-cdk/aws-opensearchservice.EncryptionAtRestOptions",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  ebs: {\n    volumeSize: 100,\n    volumeType: ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD,\n  },\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 16,
        "104": 1,
        "106": 2,
        "193": 3,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "4224c04b42a194d41f6eb121e3cf7ae8dd36e77f5c75c91f8692aba75309f83f"
    },
    "d63d10a6776dd3d93118ccd67aded477b20a91239aa5297b319779d3246b0c96": {
      "translations": {
        "python": {
          "source": "prod_domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    capacity=opensearch.CapacityConfig(\n        master_nodes=5,\n        data_nodes=20\n    ),\n    ebs=opensearch.EbsOptions(\n        volume_size=20\n    ),\n    zone_awareness=opensearch.ZoneAwarenessConfig(\n        availability_zone_count=3\n    ),\n    logging=opensearch.LoggingOptions(\n        slow_search_log_enabled=True,\n        app_log_enabled=True,\n        slow_index_log_enabled=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain prodDomain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    Capacity = new CapacityConfig {\n        MasterNodes = 5,\n        DataNodes = 20\n    },\n    Ebs = new EbsOptions {\n        VolumeSize = 20\n    },\n    ZoneAwareness = new ZoneAwarenessConfig {\n        AvailabilityZoneCount = 3\n    },\n    Logging = new LoggingOptions {\n        SlowSearchLogEnabled = true,\n        AppLogEnabled = true,\n        SlowIndexLogEnabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain prodDomain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .capacity(CapacityConfig.builder()\n                .masterNodes(5)\n                .dataNodes(20)\n                .build())\n        .ebs(EbsOptions.builder()\n                .volumeSize(20)\n                .build())\n        .zoneAwareness(ZoneAwarenessConfig.builder()\n                .availabilityZoneCount(3)\n                .build())\n        .logging(LoggingOptions.builder()\n                .slowSearchLogEnabled(true)\n                .appLogEnabled(true)\n                .slowIndexLogEnabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "prodDomain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tcapacity: &capacityConfig{\n\t\tmasterNodes: jsii.Number(5),\n\t\tdataNodes: jsii.Number(20),\n\t},\n\tebs: &ebsOptions{\n\t\tvolumeSize: jsii.Number(20),\n\t},\n\tzoneAwareness: &zoneAwarenessConfig{\n\t\tavailabilityZoneCount: jsii.Number(3),\n\t},\n\tlogging: &loggingOptions{\n\t\tslowSearchLogEnabled: jsii.Boolean(true),\n\t\tappLogEnabled: jsii.Boolean(true),\n\t\tslowIndexLogEnabled: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const prodDomain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  capacity: {\n    masterNodes: 5,\n    dataNodes: 20,\n  },\n  ebs: {\n    volumeSize: 20,\n  },\n  zoneAwareness: {\n    availabilityZoneCount: 3,\n  },\n  logging: {\n    slowSearchLogEnabled: true,\n    appLogEnabled: true,\n    slowIndexLogEnabled: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.LoggingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CapacityConfig",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EbsOptions",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "@aws-cdk/aws-opensearchservice.LoggingOptions",
        "@aws-cdk/aws-opensearchservice.ZoneAwarenessConfig",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst prodDomain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  capacity: {\n    masterNodes: 5,\n    dataNodes: 20,\n  },\n  ebs: {\n    volumeSize: 20,\n  },\n  zoneAwareness: {\n    availabilityZoneCount: 3,\n  },\n  logging: {\n    slowSearchLogEnabled: true,\n    appLogEnabled: true,\n    slowIndexLogEnabled: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 1,
        "75": 18,
        "104": 1,
        "106": 3,
        "193": 5,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 12
      },
      "fqnsFingerprint": "f5623f119a0be5a5bbbc0cda6698ec01359d59dcb465f194077375d59d4f1700"
    },
    "e03c21cafae29c78eae0c94b55ca501710cb0179e2a5ec956476fd4383929e3e": {
      "translations": {
        "python": {
          "source": "prod_domain = opensearch.Domain(self, \"Domain\",\n    version=opensearch.EngineVersion.OPENSEARCH_1_0,\n    capacity=opensearch.CapacityConfig(\n        master_nodes=5,\n        data_nodes=20\n    ),\n    ebs=opensearch.EbsOptions(\n        volume_size=20\n    ),\n    zone_awareness=opensearch.ZoneAwarenessConfig(\n        availability_zone_count=3\n    ),\n    logging=opensearch.LoggingOptions(\n        slow_search_log_enabled=True,\n        app_log_enabled=True,\n        slow_index_log_enabled=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Domain prodDomain = new Domain(this, \"Domain\", new DomainProps {\n    Version = EngineVersion.OPENSEARCH_1_0,\n    Capacity = new CapacityConfig {\n        MasterNodes = 5,\n        DataNodes = 20\n    },\n    Ebs = new EbsOptions {\n        VolumeSize = 20\n    },\n    ZoneAwareness = new ZoneAwarenessConfig {\n        AvailabilityZoneCount = 3\n    },\n    Logging = new LoggingOptions {\n        SlowSearchLogEnabled = true,\n        AppLogEnabled = true,\n        SlowIndexLogEnabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain prodDomain = Domain.Builder.create(this, \"Domain\")\n        .version(EngineVersion.OPENSEARCH_1_0)\n        .capacity(CapacityConfig.builder()\n                .masterNodes(5)\n                .dataNodes(20)\n                .build())\n        .ebs(EbsOptions.builder()\n                .volumeSize(20)\n                .build())\n        .zoneAwareness(ZoneAwarenessConfig.builder()\n                .availabilityZoneCount(3)\n                .build())\n        .logging(LoggingOptions.builder()\n                .slowSearchLogEnabled(true)\n                .appLogEnabled(true)\n                .slowIndexLogEnabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "prodDomain := opensearch.NewDomain(this, jsii.String(\"Domain\"), &domainProps{\n\tversion: opensearch.engineVersion_OPENSEARCH_1_0(),\n\tcapacity: &capacityConfig{\n\t\tmasterNodes: jsii.Number(5),\n\t\tdataNodes: jsii.Number(20),\n\t},\n\tebs: &ebsOptions{\n\t\tvolumeSize: jsii.Number(20),\n\t},\n\tzoneAwareness: &zoneAwarenessConfig{\n\t\tavailabilityZoneCount: jsii.Number(3),\n\t},\n\tlogging: &loggingOptions{\n\t\tslowSearchLogEnabled: jsii.Boolean(true),\n\t\tappLogEnabled: jsii.Boolean(true),\n\t\tslowIndexLogEnabled: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const prodDomain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  capacity: {\n    masterNodes: 5,\n    dataNodes: 20,\n  },\n  ebs: {\n    volumeSize: 20,\n  },\n  zoneAwareness: {\n    availabilityZoneCount: 3,\n  },\n  logging: {\n    slowSearchLogEnabled: true,\n    appLogEnabled: true,\n    slowIndexLogEnabled: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-opensearchservice.ZoneAwarenessConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-opensearchservice.CapacityConfig",
        "@aws-cdk/aws-opensearchservice.Domain",
        "@aws-cdk/aws-opensearchservice.DomainProps",
        "@aws-cdk/aws-opensearchservice.EbsOptions",
        "@aws-cdk/aws-opensearchservice.EngineVersion",
        "@aws-cdk/aws-opensearchservice.EngineVersion#OPENSEARCH_1_0",
        "@aws-cdk/aws-opensearchservice.LoggingOptions",
        "@aws-cdk/aws-opensearchservice.ZoneAwarenessConfig",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as opensearch from '@aws-cdk/aws-opensearchservice';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst prodDomain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_0,\n  capacity: {\n    masterNodes: 5,\n    dataNodes: 20,\n  },\n  ebs: {\n    volumeSize: 20,\n  },\n  zoneAwareness: {\n    availabilityZoneCount: 3,\n  },\n  logging: {\n    slowSearchLogEnabled: true,\n    appLogEnabled: true,\n    slowIndexLogEnabled: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 1,
        "75": 18,
        "104": 1,
        "106": 3,
        "193": 5,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 12
      },
      "fqnsFingerprint": "f5623f119a0be5a5bbbc0cda6698ec01359d59dcb465f194077375d59d4f1700"
    }
  }
}