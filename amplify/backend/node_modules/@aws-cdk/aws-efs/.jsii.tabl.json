{
  "version": "2",
  "toolVersion": "1.67.0",
  "snippets": {
    "f63bd6315ead86d3c62d6a86e0c0105c186bc6ed35a778473a9eebbe2bee78ae": {
      "translations": {
        "python": {
          "source": "file_system = efs.FileSystem(self, \"MyEfsFileSystem\",\n    vpc=ec2.Vpc(self, \"VPC\"),\n    lifecycle_policy=efs.LifecyclePolicy.AFTER_14_DAYS,  # files are not transitioned to infrequent access (IA) storage by default\n    performance_mode=efs.PerformanceMode.GENERAL_PURPOSE,  # default\n    out_of_infrequent_access_policy=efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n)",
          "version": "2"
        },
        "csharp": {
          "source": "FileSystem fileSystem = new FileSystem(this, \"MyEfsFileSystem\", new FileSystemProps {\n    Vpc = new Vpc(this, \"VPC\"),\n    LifecyclePolicy = LifecyclePolicy.AFTER_14_DAYS,  // files are not transitioned to infrequent access (IA) storage by default\n    PerformanceMode = PerformanceMode.GENERAL_PURPOSE,  // default\n    OutOfInfrequentAccessPolicy = OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n});",
          "version": "1"
        },
        "java": {
          "source": "FileSystem fileSystem = FileSystem.Builder.create(this, \"MyEfsFileSystem\")\n        .vpc(new Vpc(this, \"VPC\"))\n        .lifecyclePolicy(LifecyclePolicy.AFTER_14_DAYS) // files are not transitioned to infrequent access (IA) storage by default\n        .performanceMode(PerformanceMode.GENERAL_PURPOSE) // default\n        .outOfInfrequentAccessPolicy(OutOfInfrequentAccessPolicy.AFTER_1_ACCESS)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "fileSystem := efs.NewFileSystem(this, jsii.String(\"MyEfsFileSystem\"), &fileSystemProps{\n\tvpc: ec2.NewVpc(this, jsii.String(\"VPC\")),\n\tlifecyclePolicy: efs.lifecyclePolicy_AFTER_14_DAYS,\n\t // files are not transitioned to infrequent access (IA) storage by default\n\tperformanceMode: efs.performanceMode_GENERAL_PURPOSE,\n\t // default\n\toutOfInfrequentAccessPolicy: efs.outOfInfrequentAccessPolicy_AFTER_1_ACCESS,\n})",
          "version": "1"
        },
        "$": {
          "source": "const fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-efs"
        },
        "field": {
          "field": "markdown",
          "line": 34
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.LifecyclePolicy",
        "@aws-cdk/aws-efs.LifecyclePolicy#AFTER_14_DAYS",
        "@aws-cdk/aws-efs.OutOfInfrequentAccessPolicy",
        "@aws-cdk/aws-efs.OutOfInfrequentAccessPolicy#AFTER_1_ACCESS",
        "@aws-cdk/aws-efs.PerformanceMode",
        "@aws-cdk/aws-efs.PerformanceMode#GENERAL_PURPOSE",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 8,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "8c469831ba7ef8f99e5a3ec5f21a00a510e6d1a012fbdaf303c823a86a90f156"
    },
    "278568058d6b07835d5f9cef86885954d12d96e86b1bf82727ddb26c7d8b1445": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_iam as iam\n\n\nimported_file_system = efs.FileSystem.from_file_system_attributes(self, \"existingFS\",\n    file_system_id=\"fs-12345678\",  # You can also use fileSystemArn instead of fileSystemId.\n    security_group=ec2.SecurityGroup.from_security_group_id(self, \"SG\", \"sg-123456789\",\n        allow_all_outbound=False\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.IAM;\n\n\nIFileSystem importedFileSystem = FileSystem.FromFileSystemAttributes(this, \"existingFS\", new FileSystemAttributes {\n    FileSystemId = \"fs-12345678\",  // You can also use fileSystemArn instead of fileSystemId.\n    SecurityGroup = SecurityGroup.FromSecurityGroupId(this, \"SG\", \"sg-123456789\", new SecurityGroupImportOptions {\n        AllowAllOutbound = false\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.iam.*;\n\n\nIFileSystem importedFileSystem = FileSystem.fromFileSystemAttributes(this, \"existingFS\", FileSystemAttributes.builder()\n        .fileSystemId(\"fs-12345678\") // You can also use fileSystemArn instead of fileSystemId.\n        .securityGroup(SecurityGroup.fromSecurityGroupId(this, \"SG\", \"sg-123456789\", SecurityGroupImportOptions.builder()\n                .allowAllOutbound(false)\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\n\nimportedFileSystem := efs.fileSystem.fromFileSystemAttributes(this, jsii.String(\"existingFS\"), &fileSystemAttributes{\n\tfileSystemId: jsii.String(\"fs-12345678\"),\n\t // You can also use fileSystemArn instead of fileSystemId.\n\tsecurityGroup: ec2.securityGroup.fromSecurityGroupId(this, jsii.String(\"SG\"), jsii.String(\"sg-123456789\"), &securityGroupImportOptions{\n\t\tallowAllOutbound: jsii.Boolean(false),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as iam from '@aws-cdk/aws-iam';\n\nconst importedFileSystem = efs.FileSystem.fromFileSystemAttributes(this, 'existingFS', {\n  fileSystemId: 'fs-12345678', // You can also use fileSystemArn instead of fileSystemId.\n  securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-123456789', {\n    allowAllOutbound: false,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-efs"
        },
        "field": {
          "field": "markdown",
          "line": 51
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-ec2.SecurityGroupImportOptions",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#fromFileSystemAttributes",
        "@aws-cdk/aws-efs.FileSystemAttributes",
        "@aws-cdk/aws-efs.IFileSystem",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as iam from '@aws-cdk/aws-iam';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst importedFileSystem = efs.FileSystem.fromFileSystemAttributes(this, 'existingFS', {\n  fileSystemId: 'fs-12345678', // You can also use fileSystemArn instead of fileSystemId.\n  securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-123456789', {\n    allowAllOutbound: false,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 11,
        "91": 1,
        "104": 2,
        "193": 2,
        "194": 4,
        "196": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "80f1eab8894619976b771f7723e03d5f61aa45ec4fc8aecc9f1ffbeab955a17e"
    },
    "fb2b2b311d521c231e47b6f415a595f625d90e58812a9b06da3a25eacd535624": {
      "translations": {
        "python": {
          "source": "role = iam.Role(self, \"Role\",\n    assumed_by=iam.AnyPrincipal()\n)\n\nfile_system.grant(role, \"elasticfilesystem:ClientWrite\")",
          "version": "2"
        },
        "csharp": {
          "source": "Role role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new AnyPrincipal()\n});\n\nfileSystem.Grant(role, \"elasticfilesystem:ClientWrite\");",
          "version": "1"
        },
        "java": {
          "source": "Role role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new AnyPrincipal())\n        .build();\n\nfileSystem.grant(role, \"elasticfilesystem:ClientWrite\");",
          "version": "1"
        },
        "go": {
          "source": "role := iam.NewRole(this, jsii.String(\"Role\"), &roleProps{\n\tassumedBy: iam.NewAnyPrincipal(),\n})\n\nfileSystem.grant(role, jsii.String(\"elasticfilesystem:ClientWrite\"))",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.AnyPrincipal(),\n});\n\nfileSystem.grant(role, 'elasticfilesystem:ClientWrite');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-efs"
        },
        "field": {
          "field": "markdown",
          "line": 67
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with file system and an EC2 instance created in a VPC\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    const fileSystem = new efs.FileSystem(this, 'FileSystem', {\n      vpc,\n    });\n\n    const instance = new ec2.Instance(this, 'instance', {\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.LARGE),\n      machineImage: new ec2.AmazonLinuxImage({\n        generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n      }),\n      vpc,\n      vpcSubnets: {\n        subnetType: ec2.SubnetType.PUBLIC,\n      }\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.AnyPrincipal(),\n});\n\nfileSystem.grant(role, 'elasticfilesystem:ClientWrite');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "7639696641fed5ed0854b7b3fa672583a783d8624b76d0a94cde2d684f46c92d"
    },
    "959a03813e1f3758e242911ad0c2e3a6706b06a6b20a16ba42d47a35b1cd1706": {
      "translations": {
        "python": {
          "source": "file_system.add_access_point(\"AccessPoint\")",
          "version": "2"
        },
        "csharp": {
          "source": "fileSystem.AddAccessPoint(\"AccessPoint\");",
          "version": "1"
        },
        "java": {
          "source": "fileSystem.addAccessPoint(\"AccessPoint\");",
          "version": "1"
        },
        "go": {
          "source": "fileSystem.addAccessPoint(jsii.String(\"AccessPoint\"))",
          "version": "1"
        },
        "$": {
          "source": "fileSystem.addAccessPoint('AccessPoint');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-efs"
        },
        "field": {
          "field": "markdown",
          "line": 85
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-efs.FileSystem#addAccessPoint"
      ],
      "fullSource": "// Fixture with file system and an EC2 instance created in a VPC\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    const fileSystem = new efs.FileSystem(this, 'FileSystem', {\n      vpc,\n    });\n\n    const instance = new ec2.Instance(this, 'instance', {\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.LARGE),\n      machineImage: new ec2.AmazonLinuxImage({\n        generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n      }),\n      vpc,\n      vpcSubnets: {\n        subnetType: ec2.SubnetType.PUBLIC,\n      }\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nfileSystem.addAccessPoint('AccessPoint');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 2,
        "194": 1,
        "196": 1,
        "226": 1
      },
      "fqnsFingerprint": "e5294bc937c5ff0c8f5e7a48f1f5a3b99e1a17be8cdfa008b2b6a03cad176693"
    },
    "4659017467eb18c8887c3c0487744479dc70c4394454fabea94586cc2b5a9ffb": {
      "translations": {
        "python": {
          "source": "efs.AccessPoint.from_access_point_attributes(self, \"ap\",\n    access_point_id=\"fsap-1293c4d9832fo0912\",\n    file_system=efs.FileSystem.from_file_system_attributes(self, \"efs\",\n        file_system_id=\"fs-099d3e2f\",\n        security_group=ec2.SecurityGroup.from_security_group_id(self, \"sg\", \"sg-51530134\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AccessPoint.FromAccessPointAttributes(this, \"ap\", new AccessPointAttributes {\n    AccessPointId = \"fsap-1293c4d9832fo0912\",\n    FileSystem = FileSystem.FromFileSystemAttributes(this, \"efs\", new FileSystemAttributes {\n        FileSystemId = \"fs-099d3e2f\",\n        SecurityGroup = SecurityGroup.FromSecurityGroupId(this, \"sg\", \"sg-51530134\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "AccessPoint.fromAccessPointAttributes(this, \"ap\", AccessPointAttributes.builder()\n        .accessPointId(\"fsap-1293c4d9832fo0912\")\n        .fileSystem(FileSystem.fromFileSystemAttributes(this, \"efs\", FileSystemAttributes.builder()\n                .fileSystemId(\"fs-099d3e2f\")\n                .securityGroup(SecurityGroup.fromSecurityGroupId(this, \"sg\", \"sg-51530134\"))\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "efs.accessPoint.fromAccessPointAttributes(this, jsii.String(\"ap\"), &accessPointAttributes{\n\taccessPointId: jsii.String(\"fsap-1293c4d9832fo0912\"),\n\tfileSystem: efs.fileSystem.fromFileSystemAttributes(this, jsii.String(\"efs\"), &fileSystemAttributes{\n\t\tfileSystemId: jsii.String(\"fs-099d3e2f\"),\n\t\tsecurityGroup: ec2.securityGroup.fromSecurityGroupId(this, jsii.String(\"sg\"), jsii.String(\"sg-51530134\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "efs.AccessPoint.fromAccessPointAttributes(this, 'ap', {\n  accessPointId: 'fsap-1293c4d9832fo0912',\n  fileSystem: efs.FileSystem.fromFileSystemAttributes(this, 'efs', {\n    fileSystemId: 'fs-099d3e2f',\n    securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'sg', 'sg-51530134'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-efs"
        },
        "field": {
          "field": "markdown",
          "line": 99
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-efs.AccessPoint",
        "@aws-cdk/aws-efs.AccessPoint#fromAccessPointAttributes",
        "@aws-cdk/aws-efs.AccessPointAttributes",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#fromFileSystemAttributes",
        "@aws-cdk/aws-efs.FileSystemAttributes",
        "@aws-cdk/aws-efs.IFileSystem",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nefs.AccessPoint.fromAccessPointAttributes(this, 'ap', {\n  accessPointId: 'fsap-1293c4d9832fo0912',\n  fileSystem: efs.FileSystem.fromFileSystemAttributes(this, 'efs', {\n    fileSystemId: 'fs-099d3e2f',\n    securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'sg', 'sg-51530134'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "104": 3,
        "193": 2,
        "194": 6,
        "196": 3,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "2f31da9d68213978af885ebf2d336020230639462f6b972369f0459b7eb7b72f"
    },
    "4419d2862f929cbb8312b28ac326a2004619cb1de9c622acfd2b8646111c5056": {
      "translations": {
        "python": {
          "source": "file_system.connections.allow_default_port_from(instance)",
          "version": "2"
        },
        "csharp": {
          "source": "fileSystem.Connections.AllowDefaultPortFrom(instance);",
          "version": "1"
        },
        "java": {
          "source": "fileSystem.connections.allowDefaultPortFrom(instance);",
          "version": "1"
        },
        "go": {
          "source": "fileSystem.connections.allowDefaultPortFrom(instance)",
          "version": "1"
        },
        "$": {
          "source": "fileSystem.connections.allowDefaultPortFrom(instance);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-efs"
        },
        "field": {
          "field": "markdown",
          "line": 122
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-efs.FileSystem#connections"
      ],
      "fullSource": "// Fixture with file system and an EC2 instance created in a VPC\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    const fileSystem = new efs.FileSystem(this, 'FileSystem', {\n      vpc,\n    });\n\n    const instance = new ec2.Instance(this, 'instance', {\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.LARGE),\n      machineImage: new ec2.AmazonLinuxImage({\n        generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n      }),\n      vpc,\n      vpcSubnets: {\n        subnetType: ec2.SubnetType.PUBLIC,\n      }\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nfileSystem.connections.allowDefaultPortFrom(instance);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 4,
        "194": 2,
        "196": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3af14cda0b5bad6de7bc1c421ec6a205c4ad9ae4c085f2c86698e4f51f2791e"
    },
    "6999e6072a357d6f3e2e1079b5b416f307155165f7a26b0ccd637ffd692de334": {
      "translations": {
        "python": {
          "source": "file_system.connections.allow_default_port_from(instance)\n\ninstance.user_data.add_commands(\"yum check-update -y\", \"yum upgrade -y\", \"yum install -y amazon-efs-utils\", \"yum install -y nfs-utils\", \"file_system_id_1=\" + file_system.file_system_id, \"efs_mount_point_1=/mnt/efs/fs1\", \"mkdir -p \\\"${efs_mount_point_1}\\\"\", \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack.of(self).region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\", \"mount -a -t efs,nfs4 defaults\")",
          "version": "2"
        },
        "csharp": {
          "source": "fileSystem.Connections.AllowDefaultPortFrom(instance);\n\ninstance.UserData.AddCommands(\"yum check-update -y\", \"yum upgrade -y\", \"yum install -y amazon-efs-utils\", \"yum install -y nfs-utils\", \"file_system_id_1=\" + fileSystem.FileSystemId, \"efs_mount_point_1=/mnt/efs/fs1\", \"mkdir -p \\\"${efs_mount_point_1}\\\"\", \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack.Of(this).Region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\", \"mount -a -t efs,nfs4 defaults\");",
          "version": "1"
        },
        "java": {
          "source": "fileSystem.connections.allowDefaultPortFrom(instance);\n\ninstance.userData.addCommands(\"yum check-update -y\", \"yum upgrade -y\", \"yum install -y amazon-efs-utils\", \"yum install -y nfs-utils\", \"file_system_id_1=\" + fileSystem.getFileSystemId(), \"efs_mount_point_1=/mnt/efs/fs1\", \"mkdir -p \\\"${efs_mount_point_1}\\\"\", \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack.of(this).getRegion() + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\", \"mount -a -t efs,nfs4 defaults\");",
          "version": "1"
        },
        "go": {
          "source": "fileSystem.connections.allowDefaultPortFrom(instance)\n\ninstance.userData.addCommands(jsii.String(\"yum check-update -y\"), jsii.String(\"yum upgrade -y\"), jsii.String(\"yum install -y amazon-efs-utils\"), jsii.String(\"yum install -y nfs-utils\"), jsii.String(\"file_system_id_1=\" + fileSystem.fileSystemId), jsii.String(\"efs_mount_point_1=/mnt/efs/fs1\"), jsii.String(\"mkdir -p \\\"${efs_mount_point_1}\\\"\"), jsii.String(\"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + awscdkcore.stack.of(this).region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\"), jsii.String(\"mount -a -t efs,nfs4 defaults\"))",
          "version": "1"
        },
        "$": {
          "source": "fileSystem.connections.allowDefaultPortFrom(instance);\n\ninstance.userData.addCommands(\"yum check-update -y\",    // Ubuntu: apt-get -y update\n  \"yum upgrade -y\",                                 // Ubuntu: apt-get -y upgrade\n  \"yum install -y amazon-efs-utils\",                // Ubuntu: apt-get -y install amazon-efs-utils\n  \"yum install -y nfs-utils\",                       // Ubuntu: apt-get -y install nfs-common\n  \"file_system_id_1=\" + fileSystem.fileSystemId,\n  \"efs_mount_point_1=/mnt/efs/fs1\",\n  \"mkdir -p \\\"${efs_mount_point_1}\\\"\",\n  \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" +\n  \"echo \\\"${file_system_id_1}.efs.\" + Stack.of(this).region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\",\n  \"mount -a -t efs,nfs4 defaults\");",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-efs"
        },
        "field": {
          "field": "markdown",
          "line": 135
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance#userData",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-efs.FileSystem#connections",
        "@aws-cdk/aws-efs.FileSystem#fileSystemId",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region",
        "constructs.IConstruct"
      ],
      "fullSource": "// Fixture with file system and an EC2 instance created in a VPC\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    const fileSystem = new efs.FileSystem(this, 'FileSystem', {\n      vpc,\n    });\n\n    const instance = new ec2.Instance(this, 'instance', {\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.LARGE),\n      machineImage: new ec2.AmazonLinuxImage({\n        generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n      }),\n      vpc,\n      vpcSubnets: {\n        subnetType: ec2.SubnetType.PUBLIC,\n      }\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nfileSystem.connections.allowDefaultPortFrom(instance);\n\ninstance.userData.addCommands(\"yum check-update -y\",    // Ubuntu: apt-get -y update\n  \"yum upgrade -y\",                                 // Ubuntu: apt-get -y upgrade\n  \"yum install -y amazon-efs-utils\",                // Ubuntu: apt-get -y install amazon-efs-utils\n  \"yum install -y nfs-utils\",                       // Ubuntu: apt-get -y install nfs-common\n  \"file_system_id_1=\" + fileSystem.fileSystemId,\n  \"efs_mount_point_1=/mnt/efs/fs1\",\n  \"mkdir -p \\\"${efs_mount_point_1}\\\"\",\n  \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" +\n  \"echo \\\"${file_system_id_1}.efs.\" + Stack.of(this).region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\",\n  \"mount -a -t efs,nfs4 defaults\");\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 11,
        "39": 4,
        "75": 12,
        "104": 1,
        "194": 7,
        "196": 3,
        "209": 4,
        "226": 2
      },
      "fqnsFingerprint": "27852dfa039b8b2bc2d2ff95289da8bfe1983bbd044af41b0344d21d9c1c229f"
    },
    "27be39d892af8ce66be16400ddf7a6a517735c7beaaaa4687ff729d69eec62db": {
      "translations": {
        "python": {
          "source": "file_system = efs.FileSystem(self, \"EfsFileSystem\",\n    vpc=ec2.Vpc(self, \"VPC\"),\n    removal_policy=RemovalPolicy.DESTROY\n)",
          "version": "2"
        },
        "csharp": {
          "source": "FileSystem fileSystem = new FileSystem(this, \"EfsFileSystem\", new FileSystemProps {\n    Vpc = new Vpc(this, \"VPC\"),\n    RemovalPolicy = RemovalPolicy.DESTROY\n});",
          "version": "1"
        },
        "java": {
          "source": "FileSystem fileSystem = FileSystem.Builder.create(this, \"EfsFileSystem\")\n        .vpc(new Vpc(this, \"VPC\"))\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "fileSystem := efs.NewFileSystem(this, jsii.String(\"EfsFileSystem\"), &fileSystemProps{\n\tvpc: ec2.NewVpc(this, jsii.String(\"VPC\")),\n\tremovalPolicy: *awscdkcore.RemovalPolicy_DESTROY,\n})",
          "version": "1"
        },
        "$": {
          "source": "const fileSystem =  new efs.FileSystem(this, 'EfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  removalPolicy: RemovalPolicy.DESTROY,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-efs"
        },
        "field": {
          "field": "markdown",
          "line": 159
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fileSystem =  new efs.FileSystem(this, 'EfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  removalPolicy: RemovalPolicy.DESTROY,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 2,
        "193": 1,
        "194": 3,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "236756315b874c0b9ecb4176238d2f7b6de9386702a2d54ef6a23e7805c84e65"
    },
    "5771841d6e8afe278ee6285823cae4175b553a39df2a760eebd131f47febff8f": {
      "translations": {
        "python": {
          "source": "efs.AccessPoint.from_access_point_attributes(self, \"ap\",\n    access_point_id=\"fsap-1293c4d9832fo0912\",\n    file_system=efs.FileSystem.from_file_system_attributes(self, \"efs\",\n        file_system_id=\"fs-099d3e2f\",\n        security_group=ec2.SecurityGroup.from_security_group_id(self, \"sg\", \"sg-51530134\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AccessPoint.FromAccessPointAttributes(this, \"ap\", new AccessPointAttributes {\n    AccessPointId = \"fsap-1293c4d9832fo0912\",\n    FileSystem = FileSystem.FromFileSystemAttributes(this, \"efs\", new FileSystemAttributes {\n        FileSystemId = \"fs-099d3e2f\",\n        SecurityGroup = SecurityGroup.FromSecurityGroupId(this, \"sg\", \"sg-51530134\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "AccessPoint.fromAccessPointAttributes(this, \"ap\", AccessPointAttributes.builder()\n        .accessPointId(\"fsap-1293c4d9832fo0912\")\n        .fileSystem(FileSystem.fromFileSystemAttributes(this, \"efs\", FileSystemAttributes.builder()\n                .fileSystemId(\"fs-099d3e2f\")\n                .securityGroup(SecurityGroup.fromSecurityGroupId(this, \"sg\", \"sg-51530134\"))\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "efs.accessPoint.fromAccessPointAttributes(this, jsii.String(\"ap\"), &accessPointAttributes{\n\taccessPointId: jsii.String(\"fsap-1293c4d9832fo0912\"),\n\tfileSystem: efs.fileSystem.fromFileSystemAttributes(this, jsii.String(\"efs\"), &fileSystemAttributes{\n\t\tfileSystemId: jsii.String(\"fs-099d3e2f\"),\n\t\tsecurityGroup: ec2.securityGroup.fromSecurityGroupId(this, jsii.String(\"sg\"), jsii.String(\"sg-51530134\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "efs.AccessPoint.fromAccessPointAttributes(this, 'ap', {\n  accessPointId: 'fsap-1293c4d9832fo0912',\n  fileSystem: efs.FileSystem.fromFileSystemAttributes(this, 'efs', {\n    fileSystemId: 'fs-099d3e2f',\n    securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'sg', 'sg-51530134'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.AccessPoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-efs.AccessPoint",
        "@aws-cdk/aws-efs.AccessPoint#fromAccessPointAttributes",
        "@aws-cdk/aws-efs.AccessPointAttributes",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#fromFileSystemAttributes",
        "@aws-cdk/aws-efs.FileSystemAttributes",
        "@aws-cdk/aws-efs.IFileSystem",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nefs.AccessPoint.fromAccessPointAttributes(this, 'ap', {\n  accessPointId: 'fsap-1293c4d9832fo0912',\n  fileSystem: efs.FileSystem.fromFileSystemAttributes(this, 'efs', {\n    fileSystemId: 'fs-099d3e2f',\n    securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'sg', 'sg-51530134'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "104": 3,
        "193": 2,
        "194": 6,
        "196": 3,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "2f31da9d68213978af885ebf2d336020230639462f6b972369f0459b7eb7b72f"
    },
    "d1caf5d84f39228b86f10e740265878ffde9d9a9f44b47dcdbe9b17bb9b00bb5": {
      "translations": {
        "python": {
          "source": "efs.AccessPoint.from_access_point_attributes(self, \"ap\",\n    access_point_id=\"fsap-1293c4d9832fo0912\",\n    file_system=efs.FileSystem.from_file_system_attributes(self, \"efs\",\n        file_system_id=\"fs-099d3e2f\",\n        security_group=ec2.SecurityGroup.from_security_group_id(self, \"sg\", \"sg-51530134\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "AccessPoint.FromAccessPointAttributes(this, \"ap\", new AccessPointAttributes {\n    AccessPointId = \"fsap-1293c4d9832fo0912\",\n    FileSystem = FileSystem.FromFileSystemAttributes(this, \"efs\", new FileSystemAttributes {\n        FileSystemId = \"fs-099d3e2f\",\n        SecurityGroup = SecurityGroup.FromSecurityGroupId(this, \"sg\", \"sg-51530134\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "AccessPoint.fromAccessPointAttributes(this, \"ap\", AccessPointAttributes.builder()\n        .accessPointId(\"fsap-1293c4d9832fo0912\")\n        .fileSystem(FileSystem.fromFileSystemAttributes(this, \"efs\", FileSystemAttributes.builder()\n                .fileSystemId(\"fs-099d3e2f\")\n                .securityGroup(SecurityGroup.fromSecurityGroupId(this, \"sg\", \"sg-51530134\"))\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "efs.accessPoint.fromAccessPointAttributes(this, jsii.String(\"ap\"), &accessPointAttributes{\n\taccessPointId: jsii.String(\"fsap-1293c4d9832fo0912\"),\n\tfileSystem: efs.fileSystem.fromFileSystemAttributes(this, jsii.String(\"efs\"), &fileSystemAttributes{\n\t\tfileSystemId: jsii.String(\"fs-099d3e2f\"),\n\t\tsecurityGroup: ec2.securityGroup.fromSecurityGroupId(this, jsii.String(\"sg\"), jsii.String(\"sg-51530134\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "efs.AccessPoint.fromAccessPointAttributes(this, 'ap', {\n  accessPointId: 'fsap-1293c4d9832fo0912',\n  fileSystem: efs.FileSystem.fromFileSystemAttributes(this, 'efs', {\n    fileSystemId: 'fs-099d3e2f',\n    securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'sg', 'sg-51530134'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.AccessPointAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-efs.AccessPoint",
        "@aws-cdk/aws-efs.AccessPoint#fromAccessPointAttributes",
        "@aws-cdk/aws-efs.AccessPointAttributes",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#fromFileSystemAttributes",
        "@aws-cdk/aws-efs.FileSystemAttributes",
        "@aws-cdk/aws-efs.IFileSystem",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nefs.AccessPoint.fromAccessPointAttributes(this, 'ap', {\n  accessPointId: 'fsap-1293c4d9832fo0912',\n  fileSystem: efs.FileSystem.fromFileSystemAttributes(this, 'efs', {\n    fileSystemId: 'fs-099d3e2f',\n    securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'sg', 'sg-51530134'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "104": 3,
        "193": 2,
        "194": 6,
        "196": 3,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "2f31da9d68213978af885ebf2d336020230639462f6b972369f0459b7eb7b72f"
    },
    "88c828e922051937e8754aa54744efc4217dbf9359aaa5c72da197163e1d0d29": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_efs as efs\n\n\n# create a new VPC\nvpc = ec2.Vpc(self, \"VPC\")\n\n# create a new Amazon EFS filesystem\nfile_system = efs.FileSystem(self, \"Efs\", vpc=vpc)\n\n# create a new access point from the filesystem\naccess_point = file_system.add_access_point(\"AccessPoint\",\n    # set /export/lambda as the root of the access point\n    path=\"/export/lambda\",\n    # as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    create_acl=efs.Acl(\n        owner_uid=\"1001\",\n        owner_gid=\"1001\",\n        permissions=\"750\"\n    ),\n    # enforce the POSIX identity so lambda function will access with this identity\n    posix_user=efs.PosixUser(\n        uid=\"1001\",\n        gid=\"1001\"\n    )\n)\n\nfn = lambda_.Function(self, \"MyLambda\",\n    # mount the access point to /mnt/msg in the lambda runtime environment\n    filesystem=lambda_.FileSystem.from_efs_access_point(access_point, \"/mnt/msg\"),\n    runtime=lambda_.Runtime.NODEJS_16_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.EFS;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = new FileSystem(this, \"Efs\", new FileSystemProps { Vpc = vpc });\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.AddAccessPoint(\"AccessPoint\", new AccessPointOptions {\n    // set /export/lambda as the root of the access point\n    Path = \"/export/lambda\",\n    // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    CreateAcl = new Acl {\n        OwnerUid = \"1001\",\n        OwnerGid = \"1001\",\n        Permissions = \"750\"\n    },\n    // enforce the POSIX identity so lambda function will access with this identity\n    PosixUser = new PosixUser {\n        Uid = \"1001\",\n        Gid = \"1001\"\n    }\n});\n\nFunction fn = new Function(this, \"MyLambda\", new FunctionProps {\n    // mount the access point to /mnt/msg in the lambda runtime environment\n    Filesystem = FileSystem.FromEfsAccessPoint(accessPoint, \"/mnt/msg\"),\n    Runtime = Runtime.NODEJS_16_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.efs.*;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = FileSystem.Builder.create(this, \"Efs\").vpc(vpc).build();\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.addAccessPoint(\"AccessPoint\", AccessPointOptions.builder()\n        // set /export/lambda as the root of the access point\n        .path(\"/export/lambda\")\n        // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n        .createAcl(Acl.builder()\n                .ownerUid(\"1001\")\n                .ownerGid(\"1001\")\n                .permissions(\"750\")\n                .build())\n        // enforce the POSIX identity so lambda function will access with this identity\n        .posixUser(PosixUser.builder()\n                .uid(\"1001\")\n                .gid(\"1001\")\n                .build())\n        .build());\n\nFunction fn = Function.Builder.create(this, \"MyLambda\")\n        // mount the access point to /mnt/msg in the lambda runtime environment\n        .filesystem(FileSystem.fromEfsAccessPoint(accessPoint, \"/mnt/msg\"))\n        .runtime(Runtime.NODEJS_16_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\n\n// create a new VPC\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\n\n// create a new Amazon EFS filesystem\nfileSystem := efs.NewFileSystem(this, jsii.String(\"Efs\"), &fileSystemProps{\n\tvpc: vpc,\n})\n\n// create a new access point from the filesystem\naccessPoint := fileSystem.addAccessPoint(jsii.String(\"AccessPoint\"), &accessPointOptions{\n\t// set /export/lambda as the root of the access point\n\tpath: jsii.String(\"/export/lambda\"),\n\t// as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n\tcreateAcl: &acl{\n\t\townerUid: jsii.String(\"1001\"),\n\t\townerGid: jsii.String(\"1001\"),\n\t\tpermissions: jsii.String(\"750\"),\n\t},\n\t// enforce the POSIX identity so lambda function will access with this identity\n\tposixUser: &posixUser{\n\t\tuid: jsii.String(\"1001\"),\n\t\tgid: jsii.String(\"1001\"),\n\t},\n})\n\nfn := lambda.NewFunction(this, jsii.String(\"MyLambda\"), &functionProps{\n\t// mount the access point to /mnt/msg in the lambda runtime environment\n\tfilesystem: lambda.fileSystem.fromEfsAccessPoint(accessPoint, jsii.String(\"/mnt/msg\")),\n\truntime: lambda.runtime_NODEJS_16_X(),\n\thandler: jsii.String(\"index.handler\"),\n\tcode: lambda.code.fromAsset(path.join(__dirname, jsii.String(\"lambda-handler\"))),\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_16_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.AccessPointOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.AccessPoint",
        "@aws-cdk/aws-efs.AccessPointOptions",
        "@aws-cdk/aws-efs.Acl",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#addAccessPoint",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.IAccessPoint",
        "@aws-cdk/aws-efs.PosixUser",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.FileSystem",
        "@aws-cdk/aws-lambda.FileSystem#fromEfsAccessPoint",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_16_X",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { Aspects, CfnOutput, DockerImage, Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { LAMBDA_RECOGNIZE_VERSION_PROPS, LAMBDA_RECOGNIZE_LAYER_VERSION } from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_16_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 41,
        "104": 3,
        "193": 5,
        "194": 11,
        "196": 4,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "4aa0a4a3d07e0877470385b940bd6f92e2136ced6b31bd6cb86db7ce6b362c93"
    },
    "ccbd9610ea21717b98b7371e80cef95de7ac3a7345af36e286c465cee1e74144": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_efs as efs\n\n# file_system: efs.FileSystem\n\naccess_point_props = efs.AccessPointProps(\n    file_system=file_system,\n\n    # the properties below are optional\n    create_acl=efs.Acl(\n        owner_gid=\"ownerGid\",\n        owner_uid=\"ownerUid\",\n        permissions=\"permissions\"\n    ),\n    path=\"path\",\n    posix_user=efs.PosixUser(\n        gid=\"gid\",\n        uid=\"uid\",\n\n        # the properties below are optional\n        secondary_gids=[\"secondaryGids\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EFS;\n\nFileSystem fileSystem;\n\nAccessPointProps accessPointProps = new AccessPointProps {\n    FileSystem = fileSystem,\n\n    // the properties below are optional\n    CreateAcl = new Acl {\n        OwnerGid = \"ownerGid\",\n        OwnerUid = \"ownerUid\",\n        Permissions = \"permissions\"\n    },\n    Path = \"path\",\n    PosixUser = new PosixUser {\n        Gid = \"gid\",\n        Uid = \"uid\",\n\n        // the properties below are optional\n        SecondaryGids = new [] { \"secondaryGids\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.efs.*;\n\nFileSystem fileSystem;\n\nAccessPointProps accessPointProps = AccessPointProps.builder()\n        .fileSystem(fileSystem)\n\n        // the properties below are optional\n        .createAcl(Acl.builder()\n                .ownerGid(\"ownerGid\")\n                .ownerUid(\"ownerUid\")\n                .permissions(\"permissions\")\n                .build())\n        .path(\"path\")\n        .posixUser(PosixUser.builder()\n                .gid(\"gid\")\n                .uid(\"uid\")\n\n                // the properties below are optional\n                .secondaryGids(List.of(\"secondaryGids\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\nvar fileSystem fileSystem\n\naccessPointProps := &accessPointProps{\n\tfileSystem: fileSystem,\n\n\t// the properties below are optional\n\tcreateAcl: &acl{\n\t\townerGid: jsii.String(\"ownerGid\"),\n\t\townerUid: jsii.String(\"ownerUid\"),\n\t\tpermissions: jsii.String(\"permissions\"),\n\t},\n\tpath: jsii.String(\"path\"),\n\tposixUser: &posixUser{\n\t\tgid: jsii.String(\"gid\"),\n\t\tuid: jsii.String(\"uid\"),\n\n\t\t// the properties below are optional\n\t\tsecondaryGids: []*string{\n\t\t\tjsii.String(\"secondaryGids\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n\ndeclare const fileSystem: efs.FileSystem;\nconst accessPointProps: efs.AccessPointProps = {\n  fileSystem: fileSystem,\n\n  // the properties below are optional\n  createAcl: {\n    ownerGid: 'ownerGid',\n    ownerUid: 'ownerUid',\n    permissions: 'permissions',\n  },\n  path: 'path',\n  posixUser: {\n    gid: 'gid',\n    uid: 'uid',\n\n    // the properties below are optional\n    secondaryGids: ['secondaryGids'],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.AccessPointProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-efs.AccessPointProps",
        "@aws-cdk/aws-efs.Acl",
        "@aws-cdk/aws-efs.IFileSystem",
        "@aws-cdk/aws-efs.PosixUser"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n\ndeclare const fileSystem: efs.FileSystem;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst accessPointProps: efs.AccessPointProps = {\n  fileSystem: fileSystem,\n\n  // the properties below are optional\n  createAcl: {\n    ownerGid: 'ownerGid',\n    ownerUid: 'ownerUid',\n    permissions: 'permissions',\n  },\n  path: 'path',\n  posixUser: {\n    gid: 'gid',\n    uid: 'uid',\n\n    // the properties below are optional\n    secondaryGids: ['secondaryGids'],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 18,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "60d01bf264c163d6450f02592ebab59cabc8bf278363d304f3719d58f1726692"
    },
    "6152bb605ccfd14c9f07fba0f1331e8f45ad4c4d1100fcf683321463b24b8e0c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_efs as efs\n\n\n# create a new VPC\nvpc = ec2.Vpc(self, \"VPC\")\n\n# create a new Amazon EFS filesystem\nfile_system = efs.FileSystem(self, \"Efs\", vpc=vpc)\n\n# create a new access point from the filesystem\naccess_point = file_system.add_access_point(\"AccessPoint\",\n    # set /export/lambda as the root of the access point\n    path=\"/export/lambda\",\n    # as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    create_acl=efs.Acl(\n        owner_uid=\"1001\",\n        owner_gid=\"1001\",\n        permissions=\"750\"\n    ),\n    # enforce the POSIX identity so lambda function will access with this identity\n    posix_user=efs.PosixUser(\n        uid=\"1001\",\n        gid=\"1001\"\n    )\n)\n\nfn = lambda_.Function(self, \"MyLambda\",\n    # mount the access point to /mnt/msg in the lambda runtime environment\n    filesystem=lambda_.FileSystem.from_efs_access_point(access_point, \"/mnt/msg\"),\n    runtime=lambda_.Runtime.NODEJS_16_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.EFS;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = new FileSystem(this, \"Efs\", new FileSystemProps { Vpc = vpc });\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.AddAccessPoint(\"AccessPoint\", new AccessPointOptions {\n    // set /export/lambda as the root of the access point\n    Path = \"/export/lambda\",\n    // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    CreateAcl = new Acl {\n        OwnerUid = \"1001\",\n        OwnerGid = \"1001\",\n        Permissions = \"750\"\n    },\n    // enforce the POSIX identity so lambda function will access with this identity\n    PosixUser = new PosixUser {\n        Uid = \"1001\",\n        Gid = \"1001\"\n    }\n});\n\nFunction fn = new Function(this, \"MyLambda\", new FunctionProps {\n    // mount the access point to /mnt/msg in the lambda runtime environment\n    Filesystem = FileSystem.FromEfsAccessPoint(accessPoint, \"/mnt/msg\"),\n    Runtime = Runtime.NODEJS_16_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.efs.*;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = FileSystem.Builder.create(this, \"Efs\").vpc(vpc).build();\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.addAccessPoint(\"AccessPoint\", AccessPointOptions.builder()\n        // set /export/lambda as the root of the access point\n        .path(\"/export/lambda\")\n        // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n        .createAcl(Acl.builder()\n                .ownerUid(\"1001\")\n                .ownerGid(\"1001\")\n                .permissions(\"750\")\n                .build())\n        // enforce the POSIX identity so lambda function will access with this identity\n        .posixUser(PosixUser.builder()\n                .uid(\"1001\")\n                .gid(\"1001\")\n                .build())\n        .build());\n\nFunction fn = Function.Builder.create(this, \"MyLambda\")\n        // mount the access point to /mnt/msg in the lambda runtime environment\n        .filesystem(FileSystem.fromEfsAccessPoint(accessPoint, \"/mnt/msg\"))\n        .runtime(Runtime.NODEJS_16_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\n\n// create a new VPC\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\n\n// create a new Amazon EFS filesystem\nfileSystem := efs.NewFileSystem(this, jsii.String(\"Efs\"), &fileSystemProps{\n\tvpc: vpc,\n})\n\n// create a new access point from the filesystem\naccessPoint := fileSystem.addAccessPoint(jsii.String(\"AccessPoint\"), &accessPointOptions{\n\t// set /export/lambda as the root of the access point\n\tpath: jsii.String(\"/export/lambda\"),\n\t// as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n\tcreateAcl: &acl{\n\t\townerUid: jsii.String(\"1001\"),\n\t\townerGid: jsii.String(\"1001\"),\n\t\tpermissions: jsii.String(\"750\"),\n\t},\n\t// enforce the POSIX identity so lambda function will access with this identity\n\tposixUser: &posixUser{\n\t\tuid: jsii.String(\"1001\"),\n\t\tgid: jsii.String(\"1001\"),\n\t},\n})\n\nfn := lambda.NewFunction(this, jsii.String(\"MyLambda\"), &functionProps{\n\t// mount the access point to /mnt/msg in the lambda runtime environment\n\tfilesystem: lambda.fileSystem.fromEfsAccessPoint(accessPoint, jsii.String(\"/mnt/msg\")),\n\truntime: lambda.runtime_NODEJS_16_X(),\n\thandler: jsii.String(\"index.handler\"),\n\tcode: lambda.code.fromAsset(path.join(__dirname, jsii.String(\"lambda-handler\"))),\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_16_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.Acl"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.AccessPoint",
        "@aws-cdk/aws-efs.AccessPointOptions",
        "@aws-cdk/aws-efs.Acl",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#addAccessPoint",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.IAccessPoint",
        "@aws-cdk/aws-efs.PosixUser",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.FileSystem",
        "@aws-cdk/aws-lambda.FileSystem#fromEfsAccessPoint",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_16_X",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { Aspects, CfnOutput, DockerImage, Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { LAMBDA_RECOGNIZE_VERSION_PROPS, LAMBDA_RECOGNIZE_LAYER_VERSION } from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_16_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 41,
        "104": 3,
        "193": 5,
        "194": 11,
        "196": 4,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "4aa0a4a3d07e0877470385b940bd6f92e2136ced6b31bd6cb86db7ce6b362c93"
    },
    "47d6198d3f6ebf359a1a33674ef3a91a358ff4f7563b6783d2976fcf382eccab": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_efs as efs\n\ncfn_access_point = efs.CfnAccessPoint(self, \"MyCfnAccessPoint\",\n    file_system_id=\"fileSystemId\",\n\n    # the properties below are optional\n    access_point_tags=[efs.CfnAccessPoint.AccessPointTagProperty(\n        key=\"key\",\n        value=\"value\"\n    )],\n    client_token=\"clientToken\",\n    posix_user=efs.CfnAccessPoint.PosixUserProperty(\n        gid=\"gid\",\n        uid=\"uid\",\n\n        # the properties below are optional\n        secondary_gids=[\"secondaryGids\"]\n    ),\n    root_directory=efs.CfnAccessPoint.RootDirectoryProperty(\n        creation_info=efs.CfnAccessPoint.CreationInfoProperty(\n            owner_gid=\"ownerGid\",\n            owner_uid=\"ownerUid\",\n            permissions=\"permissions\"\n        ),\n        path=\"path\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EFS;\n\nCfnAccessPoint cfnAccessPoint = new CfnAccessPoint(this, \"MyCfnAccessPoint\", new CfnAccessPointProps {\n    FileSystemId = \"fileSystemId\",\n\n    // the properties below are optional\n    AccessPointTags = new [] { new AccessPointTagProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    ClientToken = \"clientToken\",\n    PosixUser = new PosixUserProperty {\n        Gid = \"gid\",\n        Uid = \"uid\",\n\n        // the properties below are optional\n        SecondaryGids = new [] { \"secondaryGids\" }\n    },\n    RootDirectory = new RootDirectoryProperty {\n        CreationInfo = new CreationInfoProperty {\n            OwnerGid = \"ownerGid\",\n            OwnerUid = \"ownerUid\",\n            Permissions = \"permissions\"\n        },\n        Path = \"path\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.efs.*;\n\nCfnAccessPoint cfnAccessPoint = CfnAccessPoint.Builder.create(this, \"MyCfnAccessPoint\")\n        .fileSystemId(\"fileSystemId\")\n\n        // the properties below are optional\n        .accessPointTags(List.of(AccessPointTagProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .clientToken(\"clientToken\")\n        .posixUser(PosixUserProperty.builder()\n                .gid(\"gid\")\n                .uid(\"uid\")\n\n                // the properties below are optional\n                .secondaryGids(List.of(\"secondaryGids\"))\n                .build())\n        .rootDirectory(RootDirectoryProperty.builder()\n                .creationInfo(CreationInfoProperty.builder()\n                        .ownerGid(\"ownerGid\")\n                        .ownerUid(\"ownerUid\")\n                        .permissions(\"permissions\")\n                        .build())\n                .path(\"path\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\ncfnAccessPoint := efs.NewCfnAccessPoint(this, jsii.String(\"MyCfnAccessPoint\"), &cfnAccessPointProps{\n\tfileSystemId: jsii.String(\"fileSystemId\"),\n\n\t// the properties below are optional\n\taccessPointTags: []interface{}{\n\t\t&accessPointTagProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tclientToken: jsii.String(\"clientToken\"),\n\tposixUser: &posixUserProperty{\n\t\tgid: jsii.String(\"gid\"),\n\t\tuid: jsii.String(\"uid\"),\n\n\t\t// the properties below are optional\n\t\tsecondaryGids: []*string{\n\t\t\tjsii.String(\"secondaryGids\"),\n\t\t},\n\t},\n\trootDirectory: &rootDirectoryProperty{\n\t\tcreationInfo: &creationInfoProperty{\n\t\t\townerGid: jsii.String(\"ownerGid\"),\n\t\t\townerUid: jsii.String(\"ownerUid\"),\n\t\t\tpermissions: jsii.String(\"permissions\"),\n\t\t},\n\t\tpath: jsii.String(\"path\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst cfnAccessPoint = new efs.CfnAccessPoint(this, 'MyCfnAccessPoint', {\n  fileSystemId: 'fileSystemId',\n\n  // the properties below are optional\n  accessPointTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  clientToken: 'clientToken',\n  posixUser: {\n    gid: 'gid',\n    uid: 'uid',\n\n    // the properties below are optional\n    secondaryGids: ['secondaryGids'],\n  },\n  rootDirectory: {\n    creationInfo: {\n      ownerGid: 'ownerGid',\n      ownerUid: 'ownerUid',\n      permissions: 'permissions',\n    },\n    path: 'path',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.CfnAccessPoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-efs.CfnAccessPoint",
        "@aws-cdk/aws-efs.CfnAccessPointProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAccessPoint = new efs.CfnAccessPoint(this, 'MyCfnAccessPoint', {\n  fileSystemId: 'fileSystemId',\n\n  // the properties below are optional\n  accessPointTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  clientToken: 'clientToken',\n  posixUser: {\n    gid: 'gid',\n    uid: 'uid',\n\n    // the properties below are optional\n    secondaryGids: ['secondaryGids'],\n  },\n  rootDirectory: {\n    creationInfo: {\n      ownerGid: 'ownerGid',\n      ownerUid: 'ownerUid',\n      permissions: 'permissions',\n    },\n    path: 'path',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 13,
        "75": 19,
        "104": 1,
        "192": 2,
        "193": 5,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "b479a35e1683f84353605ecc5e9c8015bf00e0a5ca19ae23a30f296aabd9a266"
    },
    "7327de25ed0f79131fc1b66eec6c6b91365a3f9cadb532e4fff3d88f10725962": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_efs as efs\n\naccess_point_tag_property = efs.CfnAccessPoint.AccessPointTagProperty(\n    key=\"key\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EFS;\n\nAccessPointTagProperty accessPointTagProperty = new AccessPointTagProperty {\n    Key = \"key\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.efs.*;\n\nAccessPointTagProperty accessPointTagProperty = AccessPointTagProperty.builder()\n        .key(\"key\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\naccessPointTagProperty := &accessPointTagProperty{\n\tkey: jsii.String(\"key\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst accessPointTagProperty: efs.CfnAccessPoint.AccessPointTagProperty = {\n  key: 'key',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.CfnAccessPoint.AccessPointTagProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-efs.CfnAccessPoint.AccessPointTagProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst accessPointTagProperty: efs.CfnAccessPoint.AccessPointTagProperty = {\n  key: 'key',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3767cfcb27fb639fe6221732a9e9a6009d696f74abb0c5f1511f4b82862dbaf8"
    },
    "94b20566b3701e1a12c880efe9e5510dd62378f6b2d611fbb08f662e9d356bfc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_efs as efs\n\ncreation_info_property = efs.CfnAccessPoint.CreationInfoProperty(\n    owner_gid=\"ownerGid\",\n    owner_uid=\"ownerUid\",\n    permissions=\"permissions\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EFS;\n\nCreationInfoProperty creationInfoProperty = new CreationInfoProperty {\n    OwnerGid = \"ownerGid\",\n    OwnerUid = \"ownerUid\",\n    Permissions = \"permissions\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.efs.*;\n\nCreationInfoProperty creationInfoProperty = CreationInfoProperty.builder()\n        .ownerGid(\"ownerGid\")\n        .ownerUid(\"ownerUid\")\n        .permissions(\"permissions\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\ncreationInfoProperty := &creationInfoProperty{\n\townerGid: jsii.String(\"ownerGid\"),\n\townerUid: jsii.String(\"ownerUid\"),\n\tpermissions: jsii.String(\"permissions\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst creationInfoProperty: efs.CfnAccessPoint.CreationInfoProperty = {\n  ownerGid: 'ownerGid',\n  ownerUid: 'ownerUid',\n  permissions: 'permissions',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.CfnAccessPoint.CreationInfoProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-efs.CfnAccessPoint.CreationInfoProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst creationInfoProperty: efs.CfnAccessPoint.CreationInfoProperty = {\n  ownerGid: 'ownerGid',\n  ownerUid: 'ownerUid',\n  permissions: 'permissions',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4fbfe78c74205591acd5bdd2dc5669b496ad720dd9b3541ce6d3bd32099da258"
    },
    "bee87371f0617634f015b34acd66f21800d5d4ee6786da6b05b10a127e85e8e7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_efs as efs\n\nposix_user_property = efs.CfnAccessPoint.PosixUserProperty(\n    gid=\"gid\",\n    uid=\"uid\",\n\n    # the properties below are optional\n    secondary_gids=[\"secondaryGids\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EFS;\n\nPosixUserProperty posixUserProperty = new PosixUserProperty {\n    Gid = \"gid\",\n    Uid = \"uid\",\n\n    // the properties below are optional\n    SecondaryGids = new [] { \"secondaryGids\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.efs.*;\n\nPosixUserProperty posixUserProperty = PosixUserProperty.builder()\n        .gid(\"gid\")\n        .uid(\"uid\")\n\n        // the properties below are optional\n        .secondaryGids(List.of(\"secondaryGids\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\nposixUserProperty := &posixUserProperty{\n\tgid: jsii.String(\"gid\"),\n\tuid: jsii.String(\"uid\"),\n\n\t// the properties below are optional\n\tsecondaryGids: []*string{\n\t\tjsii.String(\"secondaryGids\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst posixUserProperty: efs.CfnAccessPoint.PosixUserProperty = {\n  gid: 'gid',\n  uid: 'uid',\n\n  // the properties below are optional\n  secondaryGids: ['secondaryGids'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.CfnAccessPoint.PosixUserProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-efs.CfnAccessPoint.PosixUserProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst posixUserProperty: efs.CfnAccessPoint.PosixUserProperty = {\n  gid: 'gid',\n  uid: 'uid',\n\n  // the properties below are optional\n  secondaryGids: ['secondaryGids'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "bd7f2e07afc6b9a7a72d111ef76e8de5187a26d8defa8b66efa61e108e80f944"
    },
    "93dab4ff5424e82d99590f0cdd742542049219e14e56238925a6fe06129507b8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_efs as efs\n\nroot_directory_property = efs.CfnAccessPoint.RootDirectoryProperty(\n    creation_info=efs.CfnAccessPoint.CreationInfoProperty(\n        owner_gid=\"ownerGid\",\n        owner_uid=\"ownerUid\",\n        permissions=\"permissions\"\n    ),\n    path=\"path\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EFS;\n\nRootDirectoryProperty rootDirectoryProperty = new RootDirectoryProperty {\n    CreationInfo = new CreationInfoProperty {\n        OwnerGid = \"ownerGid\",\n        OwnerUid = \"ownerUid\",\n        Permissions = \"permissions\"\n    },\n    Path = \"path\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.efs.*;\n\nRootDirectoryProperty rootDirectoryProperty = RootDirectoryProperty.builder()\n        .creationInfo(CreationInfoProperty.builder()\n                .ownerGid(\"ownerGid\")\n                .ownerUid(\"ownerUid\")\n                .permissions(\"permissions\")\n                .build())\n        .path(\"path\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\nrootDirectoryProperty := &rootDirectoryProperty{\n\tcreationInfo: &creationInfoProperty{\n\t\townerGid: jsii.String(\"ownerGid\"),\n\t\townerUid: jsii.String(\"ownerUid\"),\n\t\tpermissions: jsii.String(\"permissions\"),\n\t},\n\tpath: jsii.String(\"path\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst rootDirectoryProperty: efs.CfnAccessPoint.RootDirectoryProperty = {\n  creationInfo: {\n    ownerGid: 'ownerGid',\n    ownerUid: 'ownerUid',\n    permissions: 'permissions',\n  },\n  path: 'path',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.CfnAccessPoint.RootDirectoryProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-efs.CfnAccessPoint.RootDirectoryProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst rootDirectoryProperty: efs.CfnAccessPoint.RootDirectoryProperty = {\n  creationInfo: {\n    ownerGid: 'ownerGid',\n    ownerUid: 'ownerUid',\n    permissions: 'permissions',\n  },\n  path: 'path',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "138ac17e6568c5eac8e6245ec3376bd3ba8af05111882e76175a107aa4d16235"
    },
    "3ebbbfada939b3eb0509469d2157bbea0e34d866fa6ee268ae669055482e2bbb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_efs as efs\n\ncfn_access_point_props = efs.CfnAccessPointProps(\n    file_system_id=\"fileSystemId\",\n\n    # the properties below are optional\n    access_point_tags=[efs.CfnAccessPoint.AccessPointTagProperty(\n        key=\"key\",\n        value=\"value\"\n    )],\n    client_token=\"clientToken\",\n    posix_user=efs.CfnAccessPoint.PosixUserProperty(\n        gid=\"gid\",\n        uid=\"uid\",\n\n        # the properties below are optional\n        secondary_gids=[\"secondaryGids\"]\n    ),\n    root_directory=efs.CfnAccessPoint.RootDirectoryProperty(\n        creation_info=efs.CfnAccessPoint.CreationInfoProperty(\n            owner_gid=\"ownerGid\",\n            owner_uid=\"ownerUid\",\n            permissions=\"permissions\"\n        ),\n        path=\"path\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EFS;\n\nCfnAccessPointProps cfnAccessPointProps = new CfnAccessPointProps {\n    FileSystemId = \"fileSystemId\",\n\n    // the properties below are optional\n    AccessPointTags = new [] { new AccessPointTagProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    ClientToken = \"clientToken\",\n    PosixUser = new PosixUserProperty {\n        Gid = \"gid\",\n        Uid = \"uid\",\n\n        // the properties below are optional\n        SecondaryGids = new [] { \"secondaryGids\" }\n    },\n    RootDirectory = new RootDirectoryProperty {\n        CreationInfo = new CreationInfoProperty {\n            OwnerGid = \"ownerGid\",\n            OwnerUid = \"ownerUid\",\n            Permissions = \"permissions\"\n        },\n        Path = \"path\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.efs.*;\n\nCfnAccessPointProps cfnAccessPointProps = CfnAccessPointProps.builder()\n        .fileSystemId(\"fileSystemId\")\n\n        // the properties below are optional\n        .accessPointTags(List.of(AccessPointTagProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .clientToken(\"clientToken\")\n        .posixUser(PosixUserProperty.builder()\n                .gid(\"gid\")\n                .uid(\"uid\")\n\n                // the properties below are optional\n                .secondaryGids(List.of(\"secondaryGids\"))\n                .build())\n        .rootDirectory(RootDirectoryProperty.builder()\n                .creationInfo(CreationInfoProperty.builder()\n                        .ownerGid(\"ownerGid\")\n                        .ownerUid(\"ownerUid\")\n                        .permissions(\"permissions\")\n                        .build())\n                .path(\"path\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\ncfnAccessPointProps := &cfnAccessPointProps{\n\tfileSystemId: jsii.String(\"fileSystemId\"),\n\n\t// the properties below are optional\n\taccessPointTags: []interface{}{\n\t\t&accessPointTagProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tclientToken: jsii.String(\"clientToken\"),\n\tposixUser: &posixUserProperty{\n\t\tgid: jsii.String(\"gid\"),\n\t\tuid: jsii.String(\"uid\"),\n\n\t\t// the properties below are optional\n\t\tsecondaryGids: []*string{\n\t\t\tjsii.String(\"secondaryGids\"),\n\t\t},\n\t},\n\trootDirectory: &rootDirectoryProperty{\n\t\tcreationInfo: &creationInfoProperty{\n\t\t\townerGid: jsii.String(\"ownerGid\"),\n\t\t\townerUid: jsii.String(\"ownerUid\"),\n\t\t\tpermissions: jsii.String(\"permissions\"),\n\t\t},\n\t\tpath: jsii.String(\"path\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst cfnAccessPointProps: efs.CfnAccessPointProps = {\n  fileSystemId: 'fileSystemId',\n\n  // the properties below are optional\n  accessPointTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  clientToken: 'clientToken',\n  posixUser: {\n    gid: 'gid',\n    uid: 'uid',\n\n    // the properties below are optional\n    secondaryGids: ['secondaryGids'],\n  },\n  rootDirectory: {\n    creationInfo: {\n      ownerGid: 'ownerGid',\n      ownerUid: 'ownerUid',\n      permissions: 'permissions',\n    },\n    path: 'path',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.CfnAccessPointProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-efs.CfnAccessPointProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAccessPointProps: efs.CfnAccessPointProps = {\n  fileSystemId: 'fileSystemId',\n\n  // the properties below are optional\n  accessPointTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  clientToken: 'clientToken',\n  posixUser: {\n    gid: 'gid',\n    uid: 'uid',\n\n    // the properties below are optional\n    secondaryGids: ['secondaryGids'],\n  },\n  rootDirectory: {\n    creationInfo: {\n      ownerGid: 'ownerGid',\n      ownerUid: 'ownerUid',\n      permissions: 'permissions',\n    },\n    path: 'path',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 12,
        "75": 19,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 5,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "eb3f5ee0e2de0775cc918917794bdbf47ac2dbbc1d56cd174dff1e98069b5088"
    },
    "a29670906b4f48f3cc65060b65d93350dc9d65a09f611b26cc0211d9cb8f8fd7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_efs as efs\n\n# file_system_policy: Any\n\ncfn_file_system = efs.CfnFileSystem(self, \"MyCfnFileSystem\",\n    availability_zone_name=\"availabilityZoneName\",\n    backup_policy=efs.CfnFileSystem.BackupPolicyProperty(\n        status=\"status\"\n    ),\n    bypass_policy_lockout_safety_check=False,\n    encrypted=False,\n    file_system_policy=file_system_policy,\n    file_system_tags=[efs.CfnFileSystem.ElasticFileSystemTagProperty(\n        key=\"key\",\n        value=\"value\"\n    )],\n    kms_key_id=\"kmsKeyId\",\n    lifecycle_policies=[efs.CfnFileSystem.LifecyclePolicyProperty(\n        transition_to_ia=\"transitionToIa\",\n        transition_to_primary_storage_class=\"transitionToPrimaryStorageClass\"\n    )],\n    performance_mode=\"performanceMode\",\n    provisioned_throughput_in_mibps=123,\n    throughput_mode=\"throughputMode\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EFS;\n\nvar fileSystemPolicy;\n\nCfnFileSystem cfnFileSystem = new CfnFileSystem(this, \"MyCfnFileSystem\", new CfnFileSystemProps {\n    AvailabilityZoneName = \"availabilityZoneName\",\n    BackupPolicy = new BackupPolicyProperty {\n        Status = \"status\"\n    },\n    BypassPolicyLockoutSafetyCheck = false,\n    Encrypted = false,\n    FileSystemPolicy = fileSystemPolicy,\n    FileSystemTags = new [] { new ElasticFileSystemTagProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    KmsKeyId = \"kmsKeyId\",\n    LifecyclePolicies = new [] { new LifecyclePolicyProperty {\n        TransitionToIa = \"transitionToIa\",\n        TransitionToPrimaryStorageClass = \"transitionToPrimaryStorageClass\"\n    } },\n    PerformanceMode = \"performanceMode\",\n    ProvisionedThroughputInMibps = 123,\n    ThroughputMode = \"throughputMode\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.efs.*;\n\nObject fileSystemPolicy;\n\nCfnFileSystem cfnFileSystem = CfnFileSystem.Builder.create(this, \"MyCfnFileSystem\")\n        .availabilityZoneName(\"availabilityZoneName\")\n        .backupPolicy(BackupPolicyProperty.builder()\n                .status(\"status\")\n                .build())\n        .bypassPolicyLockoutSafetyCheck(false)\n        .encrypted(false)\n        .fileSystemPolicy(fileSystemPolicy)\n        .fileSystemTags(List.of(ElasticFileSystemTagProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .kmsKeyId(\"kmsKeyId\")\n        .lifecyclePolicies(List.of(LifecyclePolicyProperty.builder()\n                .transitionToIa(\"transitionToIa\")\n                .transitionToPrimaryStorageClass(\"transitionToPrimaryStorageClass\")\n                .build()))\n        .performanceMode(\"performanceMode\")\n        .provisionedThroughputInMibps(123)\n        .throughputMode(\"throughputMode\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\nvar fileSystemPolicy interface{}\n\ncfnFileSystem := efs.NewCfnFileSystem(this, jsii.String(\"MyCfnFileSystem\"), &cfnFileSystemProps{\n\tavailabilityZoneName: jsii.String(\"availabilityZoneName\"),\n\tbackupPolicy: &backupPolicyProperty{\n\t\tstatus: jsii.String(\"status\"),\n\t},\n\tbypassPolicyLockoutSafetyCheck: jsii.Boolean(false),\n\tencrypted: jsii.Boolean(false),\n\tfileSystemPolicy: fileSystemPolicy,\n\tfileSystemTags: []elasticFileSystemTagProperty{\n\t\t&elasticFileSystemTagProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\tlifecyclePolicies: []interface{}{\n\t\t&lifecyclePolicyProperty{\n\t\t\ttransitionToIa: jsii.String(\"transitionToIa\"),\n\t\t\ttransitionToPrimaryStorageClass: jsii.String(\"transitionToPrimaryStorageClass\"),\n\t\t},\n\t},\n\tperformanceMode: jsii.String(\"performanceMode\"),\n\tprovisionedThroughputInMibps: jsii.Number(123),\n\tthroughputMode: jsii.String(\"throughputMode\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n\ndeclare const fileSystemPolicy: any;\nconst cfnFileSystem = new efs.CfnFileSystem(this, 'MyCfnFileSystem', /* all optional props */ {\n  availabilityZoneName: 'availabilityZoneName',\n  backupPolicy: {\n    status: 'status',\n  },\n  bypassPolicyLockoutSafetyCheck: false,\n  encrypted: false,\n  fileSystemPolicy: fileSystemPolicy,\n  fileSystemTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  kmsKeyId: 'kmsKeyId',\n  lifecyclePolicies: [{\n    transitionToIa: 'transitionToIa',\n    transitionToPrimaryStorageClass: 'transitionToPrimaryStorageClass',\n  }],\n  performanceMode: 'performanceMode',\n  provisionedThroughputInMibps: 123,\n  throughputMode: 'throughputMode',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.CfnFileSystem"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-efs.CfnFileSystem",
        "@aws-cdk/aws-efs.CfnFileSystemProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n\ndeclare const fileSystemPolicy: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnFileSystem = new efs.CfnFileSystem(this, 'MyCfnFileSystem', /* all optional props */ {\n  availabilityZoneName: 'availabilityZoneName',\n  backupPolicy: {\n    status: 'status',\n  },\n  bypassPolicyLockoutSafetyCheck: false,\n  encrypted: false,\n  fileSystemPolicy: fileSystemPolicy,\n  fileSystemTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  kmsKeyId: 'kmsKeyId',\n  lifecyclePolicies: [{\n    transitionToIa: 'transitionToIa',\n    transitionToPrimaryStorageClass: 'transitionToPrimaryStorageClass',\n  }],\n  performanceMode: 'performanceMode',\n  provisionedThroughputInMibps: 123,\n  throughputMode: 'throughputMode',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 11,
        "75": 22,
        "91": 2,
        "104": 1,
        "125": 1,
        "130": 1,
        "192": 2,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 16,
        "290": 1
      },
      "fqnsFingerprint": "37302cd5cedad735000c87c04ba13588b8774570c602c718ac6275598ab19032"
    },
    "3175aeb6a30b7e1c7c0f46370e498c6d5e0d04d6d488dbd22f639adf9ac900f5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_efs as efs\n\nbackup_policy_property = efs.CfnFileSystem.BackupPolicyProperty(\n    status=\"status\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EFS;\n\nBackupPolicyProperty backupPolicyProperty = new BackupPolicyProperty {\n    Status = \"status\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.efs.*;\n\nBackupPolicyProperty backupPolicyProperty = BackupPolicyProperty.builder()\n        .status(\"status\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\nbackupPolicyProperty := &backupPolicyProperty{\n\tstatus: jsii.String(\"status\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst backupPolicyProperty: efs.CfnFileSystem.BackupPolicyProperty = {\n  status: 'status',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.CfnFileSystem.BackupPolicyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-efs.CfnFileSystem.BackupPolicyProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst backupPolicyProperty: efs.CfnFileSystem.BackupPolicyProperty = {\n  status: 'status',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "a22cc4f14d10f4a121bc01fd29fc87543848442ea465f41da53564df5cdd0ea3"
    },
    "97c1497c1623db307b41223c6cf6876f7aef4b7dc80954e61a49328011863b3e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_efs as efs\n\nelastic_file_system_tag_property = efs.CfnFileSystem.ElasticFileSystemTagProperty(\n    key=\"key\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EFS;\n\nElasticFileSystemTagProperty elasticFileSystemTagProperty = new ElasticFileSystemTagProperty {\n    Key = \"key\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.efs.*;\n\nElasticFileSystemTagProperty elasticFileSystemTagProperty = ElasticFileSystemTagProperty.builder()\n        .key(\"key\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\nelasticFileSystemTagProperty := &elasticFileSystemTagProperty{\n\tkey: jsii.String(\"key\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst elasticFileSystemTagProperty: efs.CfnFileSystem.ElasticFileSystemTagProperty = {\n  key: 'key',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.CfnFileSystem.ElasticFileSystemTagProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-efs.CfnFileSystem.ElasticFileSystemTagProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst elasticFileSystemTagProperty: efs.CfnFileSystem.ElasticFileSystemTagProperty = {\n  key: 'key',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f73815ddde33771e4bc573ae8eb51e3b746bc4d6c2f29b0753aa103008b7ebe4"
    },
    "01a920580481029d14e6aa45452219c2580d4a9dfad684c8cf83100ec7c09dcf": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_efs as efs\n\nlifecycle_policy_property = efs.CfnFileSystem.LifecyclePolicyProperty(\n    transition_to_ia=\"transitionToIa\",\n    transition_to_primary_storage_class=\"transitionToPrimaryStorageClass\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EFS;\n\nLifecyclePolicyProperty lifecyclePolicyProperty = new LifecyclePolicyProperty {\n    TransitionToIa = \"transitionToIa\",\n    TransitionToPrimaryStorageClass = \"transitionToPrimaryStorageClass\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.efs.*;\n\nLifecyclePolicyProperty lifecyclePolicyProperty = LifecyclePolicyProperty.builder()\n        .transitionToIa(\"transitionToIa\")\n        .transitionToPrimaryStorageClass(\"transitionToPrimaryStorageClass\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\nlifecyclePolicyProperty := &lifecyclePolicyProperty{\n\ttransitionToIa: jsii.String(\"transitionToIa\"),\n\ttransitionToPrimaryStorageClass: jsii.String(\"transitionToPrimaryStorageClass\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst lifecyclePolicyProperty: efs.CfnFileSystem.LifecyclePolicyProperty = {\n  transitionToIa: 'transitionToIa',\n  transitionToPrimaryStorageClass: 'transitionToPrimaryStorageClass',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.CfnFileSystem.LifecyclePolicyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-efs.CfnFileSystem.LifecyclePolicyProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lifecyclePolicyProperty: efs.CfnFileSystem.LifecyclePolicyProperty = {\n  transitionToIa: 'transitionToIa',\n  transitionToPrimaryStorageClass: 'transitionToPrimaryStorageClass',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3a20f2e74c65e93b7b23ddd15c56a2551fe33a98b5d2c3748ed666802a11274f"
    },
    "2806feec747ac9be5122bff6c5d158112cedc7633d6a35729b4efe26007002e1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_efs as efs\n\n# file_system_policy: Any\n\ncfn_file_system_props = efs.CfnFileSystemProps(\n    availability_zone_name=\"availabilityZoneName\",\n    backup_policy=efs.CfnFileSystem.BackupPolicyProperty(\n        status=\"status\"\n    ),\n    bypass_policy_lockout_safety_check=False,\n    encrypted=False,\n    file_system_policy=file_system_policy,\n    file_system_tags=[efs.CfnFileSystem.ElasticFileSystemTagProperty(\n        key=\"key\",\n        value=\"value\"\n    )],\n    kms_key_id=\"kmsKeyId\",\n    lifecycle_policies=[efs.CfnFileSystem.LifecyclePolicyProperty(\n        transition_to_ia=\"transitionToIa\",\n        transition_to_primary_storage_class=\"transitionToPrimaryStorageClass\"\n    )],\n    performance_mode=\"performanceMode\",\n    provisioned_throughput_in_mibps=123,\n    throughput_mode=\"throughputMode\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EFS;\n\nvar fileSystemPolicy;\n\nCfnFileSystemProps cfnFileSystemProps = new CfnFileSystemProps {\n    AvailabilityZoneName = \"availabilityZoneName\",\n    BackupPolicy = new BackupPolicyProperty {\n        Status = \"status\"\n    },\n    BypassPolicyLockoutSafetyCheck = false,\n    Encrypted = false,\n    FileSystemPolicy = fileSystemPolicy,\n    FileSystemTags = new [] { new ElasticFileSystemTagProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    KmsKeyId = \"kmsKeyId\",\n    LifecyclePolicies = new [] { new LifecyclePolicyProperty {\n        TransitionToIa = \"transitionToIa\",\n        TransitionToPrimaryStorageClass = \"transitionToPrimaryStorageClass\"\n    } },\n    PerformanceMode = \"performanceMode\",\n    ProvisionedThroughputInMibps = 123,\n    ThroughputMode = \"throughputMode\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.efs.*;\n\nObject fileSystemPolicy;\n\nCfnFileSystemProps cfnFileSystemProps = CfnFileSystemProps.builder()\n        .availabilityZoneName(\"availabilityZoneName\")\n        .backupPolicy(BackupPolicyProperty.builder()\n                .status(\"status\")\n                .build())\n        .bypassPolicyLockoutSafetyCheck(false)\n        .encrypted(false)\n        .fileSystemPolicy(fileSystemPolicy)\n        .fileSystemTags(List.of(ElasticFileSystemTagProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .kmsKeyId(\"kmsKeyId\")\n        .lifecyclePolicies(List.of(LifecyclePolicyProperty.builder()\n                .transitionToIa(\"transitionToIa\")\n                .transitionToPrimaryStorageClass(\"transitionToPrimaryStorageClass\")\n                .build()))\n        .performanceMode(\"performanceMode\")\n        .provisionedThroughputInMibps(123)\n        .throughputMode(\"throughputMode\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\nvar fileSystemPolicy interface{}\n\ncfnFileSystemProps := &cfnFileSystemProps{\n\tavailabilityZoneName: jsii.String(\"availabilityZoneName\"),\n\tbackupPolicy: &backupPolicyProperty{\n\t\tstatus: jsii.String(\"status\"),\n\t},\n\tbypassPolicyLockoutSafetyCheck: jsii.Boolean(false),\n\tencrypted: jsii.Boolean(false),\n\tfileSystemPolicy: fileSystemPolicy,\n\tfileSystemTags: []elasticFileSystemTagProperty{\n\t\t&elasticFileSystemTagProperty{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\tlifecyclePolicies: []interface{}{\n\t\t&lifecyclePolicyProperty{\n\t\t\ttransitionToIa: jsii.String(\"transitionToIa\"),\n\t\t\ttransitionToPrimaryStorageClass: jsii.String(\"transitionToPrimaryStorageClass\"),\n\t\t},\n\t},\n\tperformanceMode: jsii.String(\"performanceMode\"),\n\tprovisionedThroughputInMibps: jsii.Number(123),\n\tthroughputMode: jsii.String(\"throughputMode\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n\ndeclare const fileSystemPolicy: any;\nconst cfnFileSystemProps: efs.CfnFileSystemProps = {\n  availabilityZoneName: 'availabilityZoneName',\n  backupPolicy: {\n    status: 'status',\n  },\n  bypassPolicyLockoutSafetyCheck: false,\n  encrypted: false,\n  fileSystemPolicy: fileSystemPolicy,\n  fileSystemTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  kmsKeyId: 'kmsKeyId',\n  lifecyclePolicies: [{\n    transitionToIa: 'transitionToIa',\n    transitionToPrimaryStorageClass: 'transitionToPrimaryStorageClass',\n  }],\n  performanceMode: 'performanceMode',\n  provisionedThroughputInMibps: 123,\n  throughputMode: 'throughputMode',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.CfnFileSystemProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-efs.CfnFileSystemProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n\ndeclare const fileSystemPolicy: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnFileSystemProps: efs.CfnFileSystemProps = {\n  availabilityZoneName: 'availabilityZoneName',\n  backupPolicy: {\n    status: 'status',\n  },\n  bypassPolicyLockoutSafetyCheck: false,\n  encrypted: false,\n  fileSystemPolicy: fileSystemPolicy,\n  fileSystemTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  kmsKeyId: 'kmsKeyId',\n  lifecyclePolicies: [{\n    transitionToIa: 'transitionToIa',\n    transitionToPrimaryStorageClass: 'transitionToPrimaryStorageClass',\n  }],\n  performanceMode: 'performanceMode',\n  provisionedThroughputInMibps: 123,\n  throughputMode: 'throughputMode',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 10,
        "75": 22,
        "91": 2,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 4,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 16,
        "290": 1
      },
      "fqnsFingerprint": "09b3bb79636e3152863ed51c3fb0b6b7ef72bf0e477fb8c1d06c6284108980ce"
    },
    "9096faf525a73a5e09f583c1bf8eef86406d089ad0d2e44d689b69400e4630db": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_efs as efs\n\ncfn_mount_target = efs.CfnMountTarget(self, \"MyCfnMountTarget\",\n    file_system_id=\"fileSystemId\",\n    security_groups=[\"securityGroups\"],\n    subnet_id=\"subnetId\",\n\n    # the properties below are optional\n    ip_address=\"ipAddress\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EFS;\n\nCfnMountTarget cfnMountTarget = new CfnMountTarget(this, \"MyCfnMountTarget\", new CfnMountTargetProps {\n    FileSystemId = \"fileSystemId\",\n    SecurityGroups = new [] { \"securityGroups\" },\n    SubnetId = \"subnetId\",\n\n    // the properties below are optional\n    IpAddress = \"ipAddress\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.efs.*;\n\nCfnMountTarget cfnMountTarget = CfnMountTarget.Builder.create(this, \"MyCfnMountTarget\")\n        .fileSystemId(\"fileSystemId\")\n        .securityGroups(List.of(\"securityGroups\"))\n        .subnetId(\"subnetId\")\n\n        // the properties below are optional\n        .ipAddress(\"ipAddress\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\ncfnMountTarget := efs.NewCfnMountTarget(this, jsii.String(\"MyCfnMountTarget\"), &cfnMountTargetProps{\n\tfileSystemId: jsii.String(\"fileSystemId\"),\n\tsecurityGroups: []*string{\n\t\tjsii.String(\"securityGroups\"),\n\t},\n\tsubnetId: jsii.String(\"subnetId\"),\n\n\t// the properties below are optional\n\tipAddress: jsii.String(\"ipAddress\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst cfnMountTarget = new efs.CfnMountTarget(this, 'MyCfnMountTarget', {\n  fileSystemId: 'fileSystemId',\n  securityGroups: ['securityGroups'],\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  ipAddress: 'ipAddress',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.CfnMountTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-efs.CfnMountTarget",
        "@aws-cdk/aws-efs.CfnMountTargetProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnMountTarget = new efs.CfnMountTarget(this, 'MyCfnMountTarget', {\n  fileSystemId: 'fileSystemId',\n  securityGroups: ['securityGroups'],\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  ipAddress: 'ipAddress',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 8,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "23fa94b8a5d32d9e65896e6783c49c04836e3f7687ca7008e898753a387dbbf4"
    },
    "36039efc1b007dcd8920cd31af2b3f9e8d236af6eba2f4d834cb363c6f7e303f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_efs as efs\n\ncfn_mount_target_props = efs.CfnMountTargetProps(\n    file_system_id=\"fileSystemId\",\n    security_groups=[\"securityGroups\"],\n    subnet_id=\"subnetId\",\n\n    # the properties below are optional\n    ip_address=\"ipAddress\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EFS;\n\nCfnMountTargetProps cfnMountTargetProps = new CfnMountTargetProps {\n    FileSystemId = \"fileSystemId\",\n    SecurityGroups = new [] { \"securityGroups\" },\n    SubnetId = \"subnetId\",\n\n    // the properties below are optional\n    IpAddress = \"ipAddress\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.efs.*;\n\nCfnMountTargetProps cfnMountTargetProps = CfnMountTargetProps.builder()\n        .fileSystemId(\"fileSystemId\")\n        .securityGroups(List.of(\"securityGroups\"))\n        .subnetId(\"subnetId\")\n\n        // the properties below are optional\n        .ipAddress(\"ipAddress\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\ncfnMountTargetProps := &cfnMountTargetProps{\n\tfileSystemId: jsii.String(\"fileSystemId\"),\n\tsecurityGroups: []*string{\n\t\tjsii.String(\"securityGroups\"),\n\t},\n\tsubnetId: jsii.String(\"subnetId\"),\n\n\t// the properties below are optional\n\tipAddress: jsii.String(\"ipAddress\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst cfnMountTargetProps: efs.CfnMountTargetProps = {\n  fileSystemId: 'fileSystemId',\n  securityGroups: ['securityGroups'],\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  ipAddress: 'ipAddress',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.CfnMountTargetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-efs.CfnMountTargetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnMountTargetProps: efs.CfnMountTargetProps = {\n  fileSystemId: 'fileSystemId',\n  securityGroups: ['securityGroups'],\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  ipAddress: 'ipAddress',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "c975fa63f00c726142800703459997d7de5625a561f57a5d840b869b348bdbc4"
    },
    "547e7ed273a45adf52d3b2610e0801d43cf804f81d1d8b69f0e2fa6e2e3662cc": {
      "translations": {
        "python": {
          "source": "file_system = efs.FileSystem(self, \"MyEfsFileSystem\",\n    vpc=ec2.Vpc(self, \"VPC\"),\n    lifecycle_policy=efs.LifecyclePolicy.AFTER_14_DAYS,  # files are not transitioned to infrequent access (IA) storage by default\n    performance_mode=efs.PerformanceMode.GENERAL_PURPOSE,  # default\n    out_of_infrequent_access_policy=efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n)",
          "version": "2"
        },
        "csharp": {
          "source": "FileSystem fileSystem = new FileSystem(this, \"MyEfsFileSystem\", new FileSystemProps {\n    Vpc = new Vpc(this, \"VPC\"),\n    LifecyclePolicy = LifecyclePolicy.AFTER_14_DAYS,  // files are not transitioned to infrequent access (IA) storage by default\n    PerformanceMode = PerformanceMode.GENERAL_PURPOSE,  // default\n    OutOfInfrequentAccessPolicy = OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n});",
          "version": "1"
        },
        "java": {
          "source": "FileSystem fileSystem = FileSystem.Builder.create(this, \"MyEfsFileSystem\")\n        .vpc(new Vpc(this, \"VPC\"))\n        .lifecyclePolicy(LifecyclePolicy.AFTER_14_DAYS) // files are not transitioned to infrequent access (IA) storage by default\n        .performanceMode(PerformanceMode.GENERAL_PURPOSE) // default\n        .outOfInfrequentAccessPolicy(OutOfInfrequentAccessPolicy.AFTER_1_ACCESS)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "fileSystem := efs.NewFileSystem(this, jsii.String(\"MyEfsFileSystem\"), &fileSystemProps{\n\tvpc: ec2.NewVpc(this, jsii.String(\"VPC\")),\n\tlifecyclePolicy: efs.lifecyclePolicy_AFTER_14_DAYS,\n\t // files are not transitioned to infrequent access (IA) storage by default\n\tperformanceMode: efs.performanceMode_GENERAL_PURPOSE,\n\t // default\n\toutOfInfrequentAccessPolicy: efs.outOfInfrequentAccessPolicy_AFTER_1_ACCESS,\n})",
          "version": "1"
        },
        "$": {
          "source": "const fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.FileSystem"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.LifecyclePolicy",
        "@aws-cdk/aws-efs.LifecyclePolicy#AFTER_14_DAYS",
        "@aws-cdk/aws-efs.OutOfInfrequentAccessPolicy",
        "@aws-cdk/aws-efs.OutOfInfrequentAccessPolicy#AFTER_1_ACCESS",
        "@aws-cdk/aws-efs.PerformanceMode",
        "@aws-cdk/aws-efs.PerformanceMode#GENERAL_PURPOSE",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 8,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "8c469831ba7ef8f99e5a3ec5f21a00a510e6d1a012fbdaf303c823a86a90f156"
    },
    "6205b9e09219b88ca3fc7f9f01f30e595b1707b2a695cd42150b468e2b37385e": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_iam as iam\n\n\nimported_file_system = efs.FileSystem.from_file_system_attributes(self, \"existingFS\",\n    file_system_id=\"fs-12345678\",  # You can also use fileSystemArn instead of fileSystemId.\n    security_group=ec2.SecurityGroup.from_security_group_id(self, \"SG\", \"sg-123456789\",\n        allow_all_outbound=False\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.IAM;\n\n\nIFileSystem importedFileSystem = FileSystem.FromFileSystemAttributes(this, \"existingFS\", new FileSystemAttributes {\n    FileSystemId = \"fs-12345678\",  // You can also use fileSystemArn instead of fileSystemId.\n    SecurityGroup = SecurityGroup.FromSecurityGroupId(this, \"SG\", \"sg-123456789\", new SecurityGroupImportOptions {\n        AllowAllOutbound = false\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.iam.*;\n\n\nIFileSystem importedFileSystem = FileSystem.fromFileSystemAttributes(this, \"existingFS\", FileSystemAttributes.builder()\n        .fileSystemId(\"fs-12345678\") // You can also use fileSystemArn instead of fileSystemId.\n        .securityGroup(SecurityGroup.fromSecurityGroupId(this, \"SG\", \"sg-123456789\", SecurityGroupImportOptions.builder()\n                .allowAllOutbound(false)\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\n\nimportedFileSystem := efs.fileSystem.fromFileSystemAttributes(this, jsii.String(\"existingFS\"), &fileSystemAttributes{\n\tfileSystemId: jsii.String(\"fs-12345678\"),\n\t // You can also use fileSystemArn instead of fileSystemId.\n\tsecurityGroup: ec2.securityGroup.fromSecurityGroupId(this, jsii.String(\"SG\"), jsii.String(\"sg-123456789\"), &securityGroupImportOptions{\n\t\tallowAllOutbound: jsii.Boolean(false),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as iam from '@aws-cdk/aws-iam';\n\nconst importedFileSystem = efs.FileSystem.fromFileSystemAttributes(this, 'existingFS', {\n  fileSystemId: 'fs-12345678', // You can also use fileSystemArn instead of fileSystemId.\n  securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-123456789', {\n    allowAllOutbound: false,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.FileSystemAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-ec2.SecurityGroupImportOptions",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#fromFileSystemAttributes",
        "@aws-cdk/aws-efs.FileSystemAttributes",
        "@aws-cdk/aws-efs.IFileSystem",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as iam from '@aws-cdk/aws-iam';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst importedFileSystem = efs.FileSystem.fromFileSystemAttributes(this, 'existingFS', {\n  fileSystemId: 'fs-12345678', // You can also use fileSystemArn instead of fileSystemId.\n  securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-123456789', {\n    allowAllOutbound: false,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 11,
        "91": 1,
        "104": 2,
        "193": 2,
        "194": 4,
        "196": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "80f1eab8894619976b771f7723e03d5f61aa45ec4fc8aecc9f1ffbeab955a17e"
    },
    "9013dc851e3bf9ec3efb8c6eeb824629e63fd6ff838f9ae62c50afacdcfd58f9": {
      "translations": {
        "python": {
          "source": "file_system = efs.FileSystem(self, \"MyEfsFileSystem\",\n    vpc=ec2.Vpc(self, \"VPC\"),\n    lifecycle_policy=efs.LifecyclePolicy.AFTER_14_DAYS,  # files are not transitioned to infrequent access (IA) storage by default\n    performance_mode=efs.PerformanceMode.GENERAL_PURPOSE,  # default\n    out_of_infrequent_access_policy=efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n)",
          "version": "2"
        },
        "csharp": {
          "source": "FileSystem fileSystem = new FileSystem(this, \"MyEfsFileSystem\", new FileSystemProps {\n    Vpc = new Vpc(this, \"VPC\"),\n    LifecyclePolicy = LifecyclePolicy.AFTER_14_DAYS,  // files are not transitioned to infrequent access (IA) storage by default\n    PerformanceMode = PerformanceMode.GENERAL_PURPOSE,  // default\n    OutOfInfrequentAccessPolicy = OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n});",
          "version": "1"
        },
        "java": {
          "source": "FileSystem fileSystem = FileSystem.Builder.create(this, \"MyEfsFileSystem\")\n        .vpc(new Vpc(this, \"VPC\"))\n        .lifecyclePolicy(LifecyclePolicy.AFTER_14_DAYS) // files are not transitioned to infrequent access (IA) storage by default\n        .performanceMode(PerformanceMode.GENERAL_PURPOSE) // default\n        .outOfInfrequentAccessPolicy(OutOfInfrequentAccessPolicy.AFTER_1_ACCESS)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "fileSystem := efs.NewFileSystem(this, jsii.String(\"MyEfsFileSystem\"), &fileSystemProps{\n\tvpc: ec2.NewVpc(this, jsii.String(\"VPC\")),\n\tlifecyclePolicy: efs.lifecyclePolicy_AFTER_14_DAYS,\n\t // files are not transitioned to infrequent access (IA) storage by default\n\tperformanceMode: efs.performanceMode_GENERAL_PURPOSE,\n\t // default\n\toutOfInfrequentAccessPolicy: efs.outOfInfrequentAccessPolicy_AFTER_1_ACCESS,\n})",
          "version": "1"
        },
        "$": {
          "source": "const fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.FileSystemProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.LifecyclePolicy",
        "@aws-cdk/aws-efs.LifecyclePolicy#AFTER_14_DAYS",
        "@aws-cdk/aws-efs.OutOfInfrequentAccessPolicy",
        "@aws-cdk/aws-efs.OutOfInfrequentAccessPolicy#AFTER_1_ACCESS",
        "@aws-cdk/aws-efs.PerformanceMode",
        "@aws-cdk/aws-efs.PerformanceMode#GENERAL_PURPOSE",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 8,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "8c469831ba7ef8f99e5a3ec5f21a00a510e6d1a012fbdaf303c823a86a90f156"
    },
    "66e87c4ef708ef87ecee6549b8fdea1fcb99ec29b6c84b47cba45b796697f4d9": {
      "translations": {
        "python": {
          "source": "file_system = efs.FileSystem(self, \"MyEfsFileSystem\",\n    vpc=ec2.Vpc(self, \"VPC\"),\n    lifecycle_policy=efs.LifecyclePolicy.AFTER_14_DAYS,  # files are not transitioned to infrequent access (IA) storage by default\n    performance_mode=efs.PerformanceMode.GENERAL_PURPOSE,  # default\n    out_of_infrequent_access_policy=efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n)",
          "version": "2"
        },
        "csharp": {
          "source": "FileSystem fileSystem = new FileSystem(this, \"MyEfsFileSystem\", new FileSystemProps {\n    Vpc = new Vpc(this, \"VPC\"),\n    LifecyclePolicy = LifecyclePolicy.AFTER_14_DAYS,  // files are not transitioned to infrequent access (IA) storage by default\n    PerformanceMode = PerformanceMode.GENERAL_PURPOSE,  // default\n    OutOfInfrequentAccessPolicy = OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n});",
          "version": "1"
        },
        "java": {
          "source": "FileSystem fileSystem = FileSystem.Builder.create(this, \"MyEfsFileSystem\")\n        .vpc(new Vpc(this, \"VPC\"))\n        .lifecyclePolicy(LifecyclePolicy.AFTER_14_DAYS) // files are not transitioned to infrequent access (IA) storage by default\n        .performanceMode(PerformanceMode.GENERAL_PURPOSE) // default\n        .outOfInfrequentAccessPolicy(OutOfInfrequentAccessPolicy.AFTER_1_ACCESS)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "fileSystem := efs.NewFileSystem(this, jsii.String(\"MyEfsFileSystem\"), &fileSystemProps{\n\tvpc: ec2.NewVpc(this, jsii.String(\"VPC\")),\n\tlifecyclePolicy: efs.lifecyclePolicy_AFTER_14_DAYS,\n\t // files are not transitioned to infrequent access (IA) storage by default\n\tperformanceMode: efs.performanceMode_GENERAL_PURPOSE,\n\t // default\n\toutOfInfrequentAccessPolicy: efs.outOfInfrequentAccessPolicy_AFTER_1_ACCESS,\n})",
          "version": "1"
        },
        "$": {
          "source": "const fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.LifecyclePolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.LifecyclePolicy",
        "@aws-cdk/aws-efs.LifecyclePolicy#AFTER_14_DAYS",
        "@aws-cdk/aws-efs.OutOfInfrequentAccessPolicy",
        "@aws-cdk/aws-efs.OutOfInfrequentAccessPolicy#AFTER_1_ACCESS",
        "@aws-cdk/aws-efs.PerformanceMode",
        "@aws-cdk/aws-efs.PerformanceMode#GENERAL_PURPOSE",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 8,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "8c469831ba7ef8f99e5a3ec5f21a00a510e6d1a012fbdaf303c823a86a90f156"
    },
    "5298482b6a63aec07ef2e666e125010ce27144bc03ec3d05f4171cd1ef0dac8b": {
      "translations": {
        "python": {
          "source": "file_system = efs.FileSystem(self, \"MyEfsFileSystem\",\n    vpc=ec2.Vpc(self, \"VPC\"),\n    lifecycle_policy=efs.LifecyclePolicy.AFTER_14_DAYS,  # files are not transitioned to infrequent access (IA) storage by default\n    performance_mode=efs.PerformanceMode.GENERAL_PURPOSE,  # default\n    out_of_infrequent_access_policy=efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n)",
          "version": "2"
        },
        "csharp": {
          "source": "FileSystem fileSystem = new FileSystem(this, \"MyEfsFileSystem\", new FileSystemProps {\n    Vpc = new Vpc(this, \"VPC\"),\n    LifecyclePolicy = LifecyclePolicy.AFTER_14_DAYS,  // files are not transitioned to infrequent access (IA) storage by default\n    PerformanceMode = PerformanceMode.GENERAL_PURPOSE,  // default\n    OutOfInfrequentAccessPolicy = OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n});",
          "version": "1"
        },
        "java": {
          "source": "FileSystem fileSystem = FileSystem.Builder.create(this, \"MyEfsFileSystem\")\n        .vpc(new Vpc(this, \"VPC\"))\n        .lifecyclePolicy(LifecyclePolicy.AFTER_14_DAYS) // files are not transitioned to infrequent access (IA) storage by default\n        .performanceMode(PerformanceMode.GENERAL_PURPOSE) // default\n        .outOfInfrequentAccessPolicy(OutOfInfrequentAccessPolicy.AFTER_1_ACCESS)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "fileSystem := efs.NewFileSystem(this, jsii.String(\"MyEfsFileSystem\"), &fileSystemProps{\n\tvpc: ec2.NewVpc(this, jsii.String(\"VPC\")),\n\tlifecyclePolicy: efs.lifecyclePolicy_AFTER_14_DAYS,\n\t // files are not transitioned to infrequent access (IA) storage by default\n\tperformanceMode: efs.performanceMode_GENERAL_PURPOSE,\n\t // default\n\toutOfInfrequentAccessPolicy: efs.outOfInfrequentAccessPolicy_AFTER_1_ACCESS,\n})",
          "version": "1"
        },
        "$": {
          "source": "const fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.OutOfInfrequentAccessPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.LifecyclePolicy",
        "@aws-cdk/aws-efs.LifecyclePolicy#AFTER_14_DAYS",
        "@aws-cdk/aws-efs.OutOfInfrequentAccessPolicy",
        "@aws-cdk/aws-efs.OutOfInfrequentAccessPolicy#AFTER_1_ACCESS",
        "@aws-cdk/aws-efs.PerformanceMode",
        "@aws-cdk/aws-efs.PerformanceMode#GENERAL_PURPOSE",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 8,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "8c469831ba7ef8f99e5a3ec5f21a00a510e6d1a012fbdaf303c823a86a90f156"
    },
    "7d72e4b5b8b1238ddc593c378a8ef51b29d26610d536c0556ffe75c7561f2a79": {
      "translations": {
        "python": {
          "source": "file_system = efs.FileSystem(self, \"MyEfsFileSystem\",\n    vpc=ec2.Vpc(self, \"VPC\"),\n    lifecycle_policy=efs.LifecyclePolicy.AFTER_14_DAYS,  # files are not transitioned to infrequent access (IA) storage by default\n    performance_mode=efs.PerformanceMode.GENERAL_PURPOSE,  # default\n    out_of_infrequent_access_policy=efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n)",
          "version": "2"
        },
        "csharp": {
          "source": "FileSystem fileSystem = new FileSystem(this, \"MyEfsFileSystem\", new FileSystemProps {\n    Vpc = new Vpc(this, \"VPC\"),\n    LifecyclePolicy = LifecyclePolicy.AFTER_14_DAYS,  // files are not transitioned to infrequent access (IA) storage by default\n    PerformanceMode = PerformanceMode.GENERAL_PURPOSE,  // default\n    OutOfInfrequentAccessPolicy = OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n});",
          "version": "1"
        },
        "java": {
          "source": "FileSystem fileSystem = FileSystem.Builder.create(this, \"MyEfsFileSystem\")\n        .vpc(new Vpc(this, \"VPC\"))\n        .lifecyclePolicy(LifecyclePolicy.AFTER_14_DAYS) // files are not transitioned to infrequent access (IA) storage by default\n        .performanceMode(PerformanceMode.GENERAL_PURPOSE) // default\n        .outOfInfrequentAccessPolicy(OutOfInfrequentAccessPolicy.AFTER_1_ACCESS)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "fileSystem := efs.NewFileSystem(this, jsii.String(\"MyEfsFileSystem\"), &fileSystemProps{\n\tvpc: ec2.NewVpc(this, jsii.String(\"VPC\")),\n\tlifecyclePolicy: efs.lifecyclePolicy_AFTER_14_DAYS,\n\t // files are not transitioned to infrequent access (IA) storage by default\n\tperformanceMode: efs.performanceMode_GENERAL_PURPOSE,\n\t // default\n\toutOfInfrequentAccessPolicy: efs.outOfInfrequentAccessPolicy_AFTER_1_ACCESS,\n})",
          "version": "1"
        },
        "$": {
          "source": "const fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.PerformanceMode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.LifecyclePolicy",
        "@aws-cdk/aws-efs.LifecyclePolicy#AFTER_14_DAYS",
        "@aws-cdk/aws-efs.OutOfInfrequentAccessPolicy",
        "@aws-cdk/aws-efs.OutOfInfrequentAccessPolicy#AFTER_1_ACCESS",
        "@aws-cdk/aws-efs.PerformanceMode",
        "@aws-cdk/aws-efs.PerformanceMode#GENERAL_PURPOSE",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 8,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "8c469831ba7ef8f99e5a3ec5f21a00a510e6d1a012fbdaf303c823a86a90f156"
    },
    "7eeb951fa297f2cb737b894a85c0f427fa2f87dbe19d010add7f3554d6f354e3": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_efs as efs\n\n\n# create a new VPC\nvpc = ec2.Vpc(self, \"VPC\")\n\n# create a new Amazon EFS filesystem\nfile_system = efs.FileSystem(self, \"Efs\", vpc=vpc)\n\n# create a new access point from the filesystem\naccess_point = file_system.add_access_point(\"AccessPoint\",\n    # set /export/lambda as the root of the access point\n    path=\"/export/lambda\",\n    # as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    create_acl=efs.Acl(\n        owner_uid=\"1001\",\n        owner_gid=\"1001\",\n        permissions=\"750\"\n    ),\n    # enforce the POSIX identity so lambda function will access with this identity\n    posix_user=efs.PosixUser(\n        uid=\"1001\",\n        gid=\"1001\"\n    )\n)\n\nfn = lambda_.Function(self, \"MyLambda\",\n    # mount the access point to /mnt/msg in the lambda runtime environment\n    filesystem=lambda_.FileSystem.from_efs_access_point(access_point, \"/mnt/msg\"),\n    runtime=lambda_.Runtime.NODEJS_16_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.EFS;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = new FileSystem(this, \"Efs\", new FileSystemProps { Vpc = vpc });\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.AddAccessPoint(\"AccessPoint\", new AccessPointOptions {\n    // set /export/lambda as the root of the access point\n    Path = \"/export/lambda\",\n    // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    CreateAcl = new Acl {\n        OwnerUid = \"1001\",\n        OwnerGid = \"1001\",\n        Permissions = \"750\"\n    },\n    // enforce the POSIX identity so lambda function will access with this identity\n    PosixUser = new PosixUser {\n        Uid = \"1001\",\n        Gid = \"1001\"\n    }\n});\n\nFunction fn = new Function(this, \"MyLambda\", new FunctionProps {\n    // mount the access point to /mnt/msg in the lambda runtime environment\n    Filesystem = FileSystem.FromEfsAccessPoint(accessPoint, \"/mnt/msg\"),\n    Runtime = Runtime.NODEJS_16_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.efs.*;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = FileSystem.Builder.create(this, \"Efs\").vpc(vpc).build();\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.addAccessPoint(\"AccessPoint\", AccessPointOptions.builder()\n        // set /export/lambda as the root of the access point\n        .path(\"/export/lambda\")\n        // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n        .createAcl(Acl.builder()\n                .ownerUid(\"1001\")\n                .ownerGid(\"1001\")\n                .permissions(\"750\")\n                .build())\n        // enforce the POSIX identity so lambda function will access with this identity\n        .posixUser(PosixUser.builder()\n                .uid(\"1001\")\n                .gid(\"1001\")\n                .build())\n        .build());\n\nFunction fn = Function.Builder.create(this, \"MyLambda\")\n        // mount the access point to /mnt/msg in the lambda runtime environment\n        .filesystem(FileSystem.fromEfsAccessPoint(accessPoint, \"/mnt/msg\"))\n        .runtime(Runtime.NODEJS_16_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nimport efs \"github.com/aws-samples/dummy/awscdkawsefs\"\n\n\n// create a new VPC\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\n\n// create a new Amazon EFS filesystem\nfileSystem := efs.NewFileSystem(this, jsii.String(\"Efs\"), &fileSystemProps{\n\tvpc: vpc,\n})\n\n// create a new access point from the filesystem\naccessPoint := fileSystem.addAccessPoint(jsii.String(\"AccessPoint\"), &accessPointOptions{\n\t// set /export/lambda as the root of the access point\n\tpath: jsii.String(\"/export/lambda\"),\n\t// as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n\tcreateAcl: &acl{\n\t\townerUid: jsii.String(\"1001\"),\n\t\townerGid: jsii.String(\"1001\"),\n\t\tpermissions: jsii.String(\"750\"),\n\t},\n\t// enforce the POSIX identity so lambda function will access with this identity\n\tposixUser: &posixUser{\n\t\tuid: jsii.String(\"1001\"),\n\t\tgid: jsii.String(\"1001\"),\n\t},\n})\n\nfn := lambda.NewFunction(this, jsii.String(\"MyLambda\"), &functionProps{\n\t// mount the access point to /mnt/msg in the lambda runtime environment\n\tfilesystem: lambda.fileSystem.fromEfsAccessPoint(accessPoint, jsii.String(\"/mnt/msg\")),\n\truntime: lambda.runtime_NODEJS_16_X(),\n\thandler: jsii.String(\"index.handler\"),\n\tcode: lambda.code.fromAsset(path.join(__dirname, jsii.String(\"lambda-handler\"))),\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_16_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.PosixUser"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.AccessPoint",
        "@aws-cdk/aws-efs.AccessPointOptions",
        "@aws-cdk/aws-efs.Acl",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#addAccessPoint",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.IAccessPoint",
        "@aws-cdk/aws-efs.PosixUser",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.FileSystem",
        "@aws-cdk/aws-lambda.FileSystem#fromEfsAccessPoint",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_16_X",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { Aspects, CfnOutput, DockerImage, Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { LAMBDA_RECOGNIZE_VERSION_PROPS, LAMBDA_RECOGNIZE_LAYER_VERSION } from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_16_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 41,
        "104": 3,
        "193": 5,
        "194": 11,
        "196": 4,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "4aa0a4a3d07e0877470385b940bd6f92e2136ced6b31bd6cb86db7ce6b362c93"
    }
  }
}