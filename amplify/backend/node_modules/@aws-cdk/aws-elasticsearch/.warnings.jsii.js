function _aws_cdk_aws_elasticsearch_ElasticsearchVersion(p) {
}
function _aws_cdk_aws_elasticsearch_CapacityConfig(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("dataNodeInstanceType" in p)
            print("@aws-cdk/aws-elasticsearch.CapacityConfig#dataNodeInstanceType", "use opensearchservice module instead");
        if ("dataNodes" in p)
            print("@aws-cdk/aws-elasticsearch.CapacityConfig#dataNodes", "use opensearchservice module instead");
        if ("masterNodeInstanceType" in p)
            print("@aws-cdk/aws-elasticsearch.CapacityConfig#masterNodeInstanceType", "use opensearchservice module instead");
        if ("masterNodes" in p)
            print("@aws-cdk/aws-elasticsearch.CapacityConfig#masterNodes", "use opensearchservice module instead");
        if ("warmInstanceType" in p)
            print("@aws-cdk/aws-elasticsearch.CapacityConfig#warmInstanceType", "use opensearchservice module instead");
        if ("warmNodes" in p)
            print("@aws-cdk/aws-elasticsearch.CapacityConfig#warmNodes", "use opensearchservice module instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_elasticsearch_ZoneAwarenessConfig(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("availabilityZoneCount" in p)
            print("@aws-cdk/aws-elasticsearch.ZoneAwarenessConfig#availabilityZoneCount", "use opensearchservice module instead");
        if ("enabled" in p)
            print("@aws-cdk/aws-elasticsearch.ZoneAwarenessConfig#enabled", "use opensearchservice module instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_elasticsearch_EbsOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("enabled" in p)
            print("@aws-cdk/aws-elasticsearch.EbsOptions#enabled", "use opensearchservice module instead");
        if ("iops" in p)
            print("@aws-cdk/aws-elasticsearch.EbsOptions#iops", "use opensearchservice module instead");
        if ("volumeSize" in p)
            print("@aws-cdk/aws-elasticsearch.EbsOptions#volumeSize", "use opensearchservice module instead");
        if ("volumeType" in p)
            print("@aws-cdk/aws-elasticsearch.EbsOptions#volumeType", "use opensearchservice module instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_elasticsearch_LoggingOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("appLogEnabled" in p)
            print("@aws-cdk/aws-elasticsearch.LoggingOptions#appLogEnabled", "use opensearchservice module instead");
        if ("appLogGroup" in p)
            print("@aws-cdk/aws-elasticsearch.LoggingOptions#appLogGroup", "use opensearchservice module instead");
        if ("auditLogEnabled" in p)
            print("@aws-cdk/aws-elasticsearch.LoggingOptions#auditLogEnabled", "use opensearchservice module instead");
        if ("auditLogGroup" in p)
            print("@aws-cdk/aws-elasticsearch.LoggingOptions#auditLogGroup", "use opensearchservice module instead");
        if ("slowIndexLogEnabled" in p)
            print("@aws-cdk/aws-elasticsearch.LoggingOptions#slowIndexLogEnabled", "use opensearchservice module instead");
        if ("slowIndexLogGroup" in p)
            print("@aws-cdk/aws-elasticsearch.LoggingOptions#slowIndexLogGroup", "use opensearchservice module instead");
        if ("slowSearchLogEnabled" in p)
            print("@aws-cdk/aws-elasticsearch.LoggingOptions#slowSearchLogEnabled", "use opensearchservice module instead");
        if ("slowSearchLogGroup" in p)
            print("@aws-cdk/aws-elasticsearch.LoggingOptions#slowSearchLogGroup", "use opensearchservice module instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_elasticsearch_EncryptionAtRestOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("enabled" in p)
            print("@aws-cdk/aws-elasticsearch.EncryptionAtRestOptions#enabled", "use opensearchservice module instead");
        if ("kmsKey" in p)
            print("@aws-cdk/aws-elasticsearch.EncryptionAtRestOptions#kmsKey", "use opensearchservice module instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_elasticsearch_CognitoOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("identityPoolId" in p)
            print("@aws-cdk/aws-elasticsearch.CognitoOptions#identityPoolId", "use opensearchservice module instead");
        if ("role" in p)
            print("@aws-cdk/aws-elasticsearch.CognitoOptions#role", "use opensearchservice module instead");
        if ("userPoolId" in p)
            print("@aws-cdk/aws-elasticsearch.CognitoOptions#userPoolId", "use opensearchservice module instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_elasticsearch_TLSSecurityPolicy(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        print("@aws-cdk/aws-elasticsearch.TLSSecurityPolicy", "use opensearchservice module instead");
        const ns = require("./lib/domain.js");
        if (Object.values(ns.TLSSecurityPolicy).filter(x => x === p).length > 1)
            return;
        if (p === ns.TLSSecurityPolicy.TLS_1_0)
            print("@aws-cdk/aws-elasticsearch.TLSSecurityPolicy#TLS_1_0", "");
        if (p === ns.TLSSecurityPolicy.TLS_1_2)
            print("@aws-cdk/aws-elasticsearch.TLSSecurityPolicy#TLS_1_2", "");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_elasticsearch_AdvancedSecurityOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("masterUserArn" in p)
            print("@aws-cdk/aws-elasticsearch.AdvancedSecurityOptions#masterUserArn", "use opensearchservice module instead");
        if ("masterUserName" in p)
            print("@aws-cdk/aws-elasticsearch.AdvancedSecurityOptions#masterUserName", "use opensearchservice module instead");
        if ("masterUserPassword" in p)
            print("@aws-cdk/aws-elasticsearch.AdvancedSecurityOptions#masterUserPassword", "use opensearchservice module instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_elasticsearch_CustomEndpointOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("domainName" in p)
            print("@aws-cdk/aws-elasticsearch.CustomEndpointOptions#domainName", "use opensearchservice module instead");
        if ("certificate" in p)
            print("@aws-cdk/aws-elasticsearch.CustomEndpointOptions#certificate", "use opensearchservice module instead");
        if ("hostedZone" in p)
            print("@aws-cdk/aws-elasticsearch.CustomEndpointOptions#hostedZone", "use opensearchservice module instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_elasticsearch_DomainProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("version" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#version", "use opensearchservice module instead");
        if (!visitedObjects.has(p.version))
            _aws_cdk_aws_elasticsearch_ElasticsearchVersion(p.version);
        if ("accessPolicies" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#accessPolicies", "use opensearchservice module instead");
        if (!visitedObjects.has(p.accessPolicies))
            require("@aws-cdk/aws-iam/.warnings.jsii.js")._aws_cdk_aws_iam_PolicyStatement(p.accessPolicies);
        if ("advancedOptions" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#advancedOptions", "use opensearchservice module instead");
        if ("automatedSnapshotStartHour" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#automatedSnapshotStartHour", "use opensearchservice module instead");
        if ("capacity" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#capacity", "use opensearchservice module instead");
        if (!visitedObjects.has(p.capacity))
            _aws_cdk_aws_elasticsearch_CapacityConfig(p.capacity);
        if ("cognitoKibanaAuth" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#cognitoKibanaAuth", "use opensearchservice module instead");
        if (!visitedObjects.has(p.cognitoKibanaAuth))
            _aws_cdk_aws_elasticsearch_CognitoOptions(p.cognitoKibanaAuth);
        if ("customEndpoint" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#customEndpoint", "use opensearchservice module instead");
        if (!visitedObjects.has(p.customEndpoint))
            _aws_cdk_aws_elasticsearch_CustomEndpointOptions(p.customEndpoint);
        if ("domainName" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#domainName", "use opensearchservice module instead");
        if ("ebs" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#ebs", "use opensearchservice module instead");
        if (!visitedObjects.has(p.ebs))
            _aws_cdk_aws_elasticsearch_EbsOptions(p.ebs);
        if ("enableVersionUpgrade" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#enableVersionUpgrade", "use opensearchservice module instead");
        if ("encryptionAtRest" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#encryptionAtRest", "use opensearchservice module instead");
        if (!visitedObjects.has(p.encryptionAtRest))
            _aws_cdk_aws_elasticsearch_EncryptionAtRestOptions(p.encryptionAtRest);
        if ("enforceHttps" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#enforceHttps", "use opensearchservice module instead");
        if ("fineGrainedAccessControl" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#fineGrainedAccessControl", "use opensearchservice module instead");
        if (!visitedObjects.has(p.fineGrainedAccessControl))
            _aws_cdk_aws_elasticsearch_AdvancedSecurityOptions(p.fineGrainedAccessControl);
        if ("logging" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#logging", "use opensearchservice module instead");
        if (!visitedObjects.has(p.logging))
            _aws_cdk_aws_elasticsearch_LoggingOptions(p.logging);
        if ("nodeToNodeEncryption" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#nodeToNodeEncryption", "use opensearchservice module instead");
        if ("removalPolicy" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#removalPolicy", "use opensearchservice module instead");
        if ("securityGroups" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#securityGroups", "use opensearchservice module instead");
        if (!visitedObjects.has(p.securityGroups))
            require("@aws-cdk/aws-ec2/.warnings.jsii.js")._aws_cdk_aws_ec2_ISecurityGroup(p.securityGroups);
        if ("tlsSecurityPolicy" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#tlsSecurityPolicy", "use opensearchservice module instead");
        if (!visitedObjects.has(p.tlsSecurityPolicy))
            _aws_cdk_aws_elasticsearch_TLSSecurityPolicy(p.tlsSecurityPolicy);
        if ("useUnsignedBasicAuth" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#useUnsignedBasicAuth", "use opensearchservice module instead");
        if ("vpc" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#vpc", "use opensearchservice module instead");
        if ("vpcSubnets" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#vpcSubnets", "use opensearchservice module instead");
        if (!visitedObjects.has(p.vpcSubnets))
            require("@aws-cdk/aws-ec2/.warnings.jsii.js")._aws_cdk_aws_ec2_SubnetSelection(p.vpcSubnets);
        if ("zoneAwareness" in p)
            print("@aws-cdk/aws-elasticsearch.DomainProps#zoneAwareness", "use opensearchservice module instead");
        if (!visitedObjects.has(p.zoneAwareness))
            _aws_cdk_aws_elasticsearch_ZoneAwarenessConfig(p.zoneAwareness);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_elasticsearch_IDomain(p) {
}
function _aws_cdk_aws_elasticsearch_DomainAttributes(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if ("domainArn" in p)
            print("@aws-cdk/aws-elasticsearch.DomainAttributes#domainArn", "use opensearchservice module instead");
        if ("domainEndpoint" in p)
            print("@aws-cdk/aws-elasticsearch.DomainAttributes#domainEndpoint", "use opensearchservice module instead");
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_elasticsearch_Domain(p) {
}
function _aws_cdk_aws_elasticsearch_CfnDomainProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (!visitedObjects.has(p.tags))
            require("@aws-cdk/core/.warnings.jsii.js")._aws_cdk_core_CfnTag(p.tags);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_elasticsearch_CfnDomain(p) {
}
function _aws_cdk_aws_elasticsearch_CfnDomain_AdvancedSecurityOptionsInputProperty(p) {
}
function _aws_cdk_aws_elasticsearch_CfnDomain_CognitoOptionsProperty(p) {
}
function _aws_cdk_aws_elasticsearch_CfnDomain_ColdStorageOptionsProperty(p) {
}
function _aws_cdk_aws_elasticsearch_CfnDomain_DomainEndpointOptionsProperty(p) {
}
function _aws_cdk_aws_elasticsearch_CfnDomain_EBSOptionsProperty(p) {
}
function _aws_cdk_aws_elasticsearch_CfnDomain_ElasticsearchClusterConfigProperty(p) {
}
function _aws_cdk_aws_elasticsearch_CfnDomain_EncryptionAtRestOptionsProperty(p) {
}
function _aws_cdk_aws_elasticsearch_CfnDomain_LogPublishingOptionProperty(p) {
}
function _aws_cdk_aws_elasticsearch_CfnDomain_MasterUserOptionsProperty(p) {
}
function _aws_cdk_aws_elasticsearch_CfnDomain_NodeToNodeEncryptionOptionsProperty(p) {
}
function _aws_cdk_aws_elasticsearch_CfnDomain_SnapshotOptionsProperty(p) {
}
function _aws_cdk_aws_elasticsearch_CfnDomain_VPCOptionsProperty(p) {
}
function _aws_cdk_aws_elasticsearch_CfnDomain_ZoneAwarenessConfigProperty(p) {
}
function print(name, deprecationMessage) {
    const deprecated = process.env.JSII_DEPRECATED;
    const deprecationMode = ["warn", "fail", "quiet"].includes(deprecated) ? deprecated : "warn";
    const message = `${name} is deprecated.\n  ${deprecationMessage.trim()}\n  This API will be removed in the next major release.`;
    switch (deprecationMode) {
        case "fail":
            throw new DeprecationError(message);
        case "warn":
            console.warn("[WARNING]", message);
            break;
    }
}
function getPropertyDescriptor(obj, prop) {
    const descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    if (descriptor) {
        return descriptor;
    }
    const proto = Object.getPrototypeOf(obj);
    const prototypeDescriptor = proto && getPropertyDescriptor(proto, prop);
    if (prototypeDescriptor) {
        return prototypeDescriptor;
    }
    return {};
}
const visitedObjects = new Set();
class DeprecationError extends Error {
    constructor(...args) {
        super(...args);
        Object.defineProperty(this, "name", {
            configurable: false,
            enumerable: true,
            value: "DeprecationError",
            writable: false,
        });
    }
}
module.exports = { print, getPropertyDescriptor, DeprecationError, _aws_cdk_aws_elasticsearch_ElasticsearchVersion, _aws_cdk_aws_elasticsearch_CapacityConfig, _aws_cdk_aws_elasticsearch_ZoneAwarenessConfig, _aws_cdk_aws_elasticsearch_EbsOptions, _aws_cdk_aws_elasticsearch_LoggingOptions, _aws_cdk_aws_elasticsearch_EncryptionAtRestOptions, _aws_cdk_aws_elasticsearch_CognitoOptions, _aws_cdk_aws_elasticsearch_TLSSecurityPolicy, _aws_cdk_aws_elasticsearch_AdvancedSecurityOptions, _aws_cdk_aws_elasticsearch_CustomEndpointOptions, _aws_cdk_aws_elasticsearch_DomainProps, _aws_cdk_aws_elasticsearch_IDomain, _aws_cdk_aws_elasticsearch_DomainAttributes, _aws_cdk_aws_elasticsearch_Domain, _aws_cdk_aws_elasticsearch_CfnDomainProps, _aws_cdk_aws_elasticsearch_CfnDomain, _aws_cdk_aws_elasticsearch_CfnDomain_AdvancedSecurityOptionsInputProperty, _aws_cdk_aws_elasticsearch_CfnDomain_CognitoOptionsProperty, _aws_cdk_aws_elasticsearch_CfnDomain_ColdStorageOptionsProperty, _aws_cdk_aws_elasticsearch_CfnDomain_DomainEndpointOptionsProperty, _aws_cdk_aws_elasticsearch_CfnDomain_EBSOptionsProperty, _aws_cdk_aws_elasticsearch_CfnDomain_ElasticsearchClusterConfigProperty, _aws_cdk_aws_elasticsearch_CfnDomain_EncryptionAtRestOptionsProperty, _aws_cdk_aws_elasticsearch_CfnDomain_LogPublishingOptionProperty, _aws_cdk_aws_elasticsearch_CfnDomain_MasterUserOptionsProperty, _aws_cdk_aws_elasticsearch_CfnDomain_NodeToNodeEncryptionOptionsProperty, _aws_cdk_aws_elasticsearch_CfnDomain_SnapshotOptionsProperty, _aws_cdk_aws_elasticsearch_CfnDomain_VPCOptionsProperty, _aws_cdk_aws_elasticsearch_CfnDomain_ZoneAwarenessConfigProperty };
