"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertNotNull = exports.TransformerStackSythesizer = void 0;
const core_1 = require("@aws-cdk/core");
const root_stack_1 = require("./root-stack");
class TransformerStackSythesizer extends core_1.LegacyStackSynthesizer {
    constructor() {
        super(...arguments);
        this.stackAssets = new Map();
        this.mapingTemplateAssets = new Map();
    }
    bind(stack) {
        this.boundStack = stack;
        super.bind(stack);
    }
    synthesizeStackTemplate(stack, session) {
        if (stack instanceof root_stack_1.TransformerRootStack) {
            const template = stack.renderCloudFormationTemplate(session);
            const templateName = stack.node.id;
            this.setStackAsset(templateName, template);
            return;
        }
        throw new Error('Error synthesizing the template. Expected Stack to be either instance of TransformerRootStack or TransformerNestedStack');
    }
    setStackAsset(templateName, template) {
        this.stackAssets.set(templateName, JSON.parse(template));
    }
    collectStacks() {
        return new Map(this.stackAssets.entries());
    }
    setMappingTemplates(templateName, template) {
        this.mapingTemplateAssets.set(templateName, template);
    }
    collectMappingTemplates() {
        return new Map(this.mapingTemplateAssets.entries());
    }
    addFileAsset(asset) {
        assertNotNull(this.boundStack);
        const bucketName = this.deploymentBucket.valueAsString;
        const rootKey = this.deploymentRootKey.valueAsString;
        const objectKey = `${rootKey}/${asset.fileName}`;
        const httpUrl = `https://s3.${this.boundStack.region}.${this.boundStack.urlSuffix}/${bucketName}/${rootKey}/${asset.fileName}`;
        const s3ObjectUrl = `s3://${bucketName}/${rootKey}/${asset.fileName}`;
        return {
            bucketName, objectKey, httpUrl, s3ObjectUrl, s3Url: httpUrl,
        };
    }
    ensureDeployementParameters() {
        assertNotNull(this.boundStack);
        if (!this._deploymentBucket) {
            this._deploymentBucket = new core_1.CfnParameter(this.boundStack, 'S3DeploymentBucket', {
                type: 'String',
                description: 'An S3 Bucket name where assets are deployed',
            });
        }
        if (!this._deploymentRootKey) {
            this._deploymentRootKey = new core_1.CfnParameter(this.boundStack, 'S3DeploymentRootKey', {
                type: 'String',
                description: 'An S3 key relative to the S3DeploymentBucket that points to the root of the deployment directory.',
            });
        }
    }
    get deploymentBucket() {
        this.ensureDeployementParameters();
        assertNotNull(this._deploymentBucket);
        return this._deploymentBucket;
    }
    get deploymentRootKey() {
        this.ensureDeployementParameters();
        assertNotNull(this._deploymentRootKey);
        return this._deploymentRootKey;
    }
}
exports.TransformerStackSythesizer = TransformerStackSythesizer;
function assertNotNull(x) {
    if (x === null && x === undefined) {
        throw new Error('You must call bindStack() first');
    }
}
exports.assertNotNull = assertNotNull;
//# sourceMappingURL=stack-synthesizer.js.map