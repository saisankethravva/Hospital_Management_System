import { DynamoDbDataSourceOptions, MappingTemplateProvider, SearchableDataSourceOptions, TransformHostProvider } from '@aws-amplify/graphql-transformer-interfaces';
import { BaseDataSource, CfnResolver, DataSourceOptions, DynamoDbDataSource, HttpDataSource, HttpDataSourceOptions, LambdaDataSource, NoneDataSource } from '@aws-cdk/aws-appsync';
import { ITable } from '@aws-cdk/aws-dynamodb';
import { IRole } from '@aws-cdk/aws-iam';
import { IFunction, ILayerVersion, Runtime } from '@aws-cdk/aws-lambda';
import { Duration, Stack } from '@aws-cdk/core';
import { AppSyncFunctionConfiguration } from './appsync-function';
import { SearchableDataSource } from './cdk-compat/searchable-datasource';
import { GraphQLApi } from './graphql-api';
export interface DefaultTransformHostOptions {
    readonly api: GraphQLApi;
}
export declare class DefaultTransformHost implements TransformHostProvider {
    private dataSources;
    private resolvers;
    private appsyncFunctions;
    private api;
    constructor(options: DefaultTransformHostOptions);
    setAPI(api: GraphQLApi): void;
    hasDataSource(name: string): boolean;
    getDataSource: (name: string) => BaseDataSource | void;
    hasResolver: (typeName: string, fieldName: string) => boolean;
    getResolver: (typeName: string, fieldName: string) => CfnResolver | void;
    addSearchableDataSource(name: string, awsRegion: string, endpoint: string, options?: SearchableDataSourceOptions, stack?: Stack): SearchableDataSource;
    addHttpDataSource: (name: string, endpoint: string, options?: DataSourceOptions, stack?: Stack) => HttpDataSource;
    addDynamoDbDataSource: (name: string, table: ITable, options?: DynamoDbDataSourceOptions, stack?: Stack) => DynamoDbDataSource;
    addNoneDataSource: (name: string, options?: DataSourceOptions, stack?: Stack) => NoneDataSource;
    addLambdaDataSource: (name: string, lambdaFunction: IFunction, options?: DataSourceOptions, stack?: Stack) => LambdaDataSource;
    addAppSyncFunction: (name: string, requestMappingTemplate: MappingTemplateProvider, responseMappingTemplate: MappingTemplateProvider, dataSourceName: string, stack?: Stack) => AppSyncFunctionConfiguration;
    addResolver: (typeName: string, fieldName: string, requestMappingTemplate: MappingTemplateProvider, responseMappingTemplate: MappingTemplateProvider, resolverLogicalId?: string, dataSourceName?: string, pipelineConfig?: string[], stack?: Stack) => CfnResolver;
    addLambdaFunction: (functionName: string, functionKey: string, handlerName: string, filePath: string, runtime: Runtime, layers?: ILayerVersion[], role?: IRole, environment?: {
        [key: string]: string;
    } | undefined, timeout?: Duration, stack?: Stack) => IFunction;
    protected doAddNoneDataSource(id: string, options?: DataSourceOptions, stack?: Stack): NoneDataSource;
    protected doAddDynamoDbDataSource(id: string, table: ITable, options?: DynamoDbDataSourceOptions, stack?: Stack): DynamoDbDataSource;
    protected doAddHttpDataSource(id: string, endpoint: string, options?: HttpDataSourceOptions, stack?: Stack): HttpDataSource;
    protected doAddSearchableDataSource(id: string, endpoint: string, region: string, options?: SearchableDataSourceOptions, stack?: Stack): SearchableDataSource;
    protected doAddLambdaDataSource(id: string, lambdaFunction: IFunction, options?: DataSourceOptions, stack?: Stack): LambdaDataSource;
}
//# sourceMappingURL=transform-host.d.ts.map