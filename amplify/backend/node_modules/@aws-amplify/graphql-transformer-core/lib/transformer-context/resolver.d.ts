import { AppSyncFunctionConfigurationProvider, DataSourceProvider, GraphQLAPIProvider, MappingTemplateProvider, TransformerContextProvider, TransformerResolverProvider, TransformerResolversManagerProvider } from '@aws-amplify/graphql-transformer-interfaces';
import { Stack } from '@aws-cdk/core';
declare type Slot = {
    requestMappingTemplate?: MappingTemplateProvider;
    responseMappingTemplate?: MappingTemplateProvider;
    dataSource?: DataSourceProvider;
};
export declare class ResolverManager implements TransformerResolversManagerProvider {
    private resolvers;
    generateQueryResolver: (typeName: string, fieldName: string, resolverLogicalId: string, dataSource: DataSourceProvider, requestMappingTemplate: MappingTemplateProvider, responseMappingTemplate: MappingTemplateProvider) => TransformerResolver;
    generateMutationResolver: (typeName: string, fieldName: string, resolverLogicalId: string, dataSource: DataSourceProvider, requestMappingTemplate: MappingTemplateProvider, responseMappingTemplate: MappingTemplateProvider) => TransformerResolver;
    generateSubscriptionResolver: (typeName: string, fieldName: string, resolverLogicalId: string, requestMappingTemplate: MappingTemplateProvider, responseMappingTemplate: MappingTemplateProvider) => TransformerResolver;
    addResolver: (typeName: string, fieldName: string, resolver: TransformerResolverProvider) => TransformerResolverProvider;
    getResolver: (typeName: string, fieldName: string) => TransformerResolverProvider | void;
    hasResolver: (typeName: string, fieldName: string) => boolean;
    removeResolver: (typeName: string, fieldName: string) => TransformerResolverProvider;
    collectResolvers: () => Map<string, TransformerResolverProvider>;
}
export declare class TransformerResolver implements TransformerResolverProvider {
    private typeName;
    private fieldName;
    private resolverLogicalId;
    private requestMappingTemplate;
    private responseMappingTemplate;
    private requestSlots;
    private responseSlots;
    private datasource?;
    private readonly slotMap;
    private readonly slotNames;
    private stack?;
    private stackName?;
    constructor(typeName: string, fieldName: string, resolverLogicalId: string, requestMappingTemplate: MappingTemplateProvider, responseMappingTemplate: MappingTemplateProvider, requestSlots: string[], responseSlots: string[], datasource?: DataSourceProvider | undefined);
    mapToStack: (stack: Stack) => void;
    getStackName: () => string;
    addToSlot: (slotName: string, requestMappingTemplate?: MappingTemplateProvider, responseMappingTemplate?: MappingTemplateProvider, dataSource?: DataSourceProvider) => void;
    slotExists: (slotName: string, requestMappingTemplate?: MappingTemplateProvider, responseMappingTemplate?: MappingTemplateProvider) => boolean;
    findSlot: (slotName: string, requestMappingTemplate?: MappingTemplateProvider, responseMappingTemplate?: MappingTemplateProvider) => Slot | undefined;
    updateSlot: (slotName: string, requestMappingTemplate?: MappingTemplateProvider, responseMappingTemplate?: MappingTemplateProvider) => void;
    synthesize: (context: TransformerContextProvider, api: GraphQLAPIProvider) => void;
    synthesizeResolvers: (stack: Stack, api: GraphQLAPIProvider, slotsNames: string[]) => AppSyncFunctionConfigurationProvider[];
    private substitueSlotInfo;
    private ensureNoneDataSource;
}
export {};
//# sourceMappingURL=resolver.d.ts.map