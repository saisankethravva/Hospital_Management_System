import { FeatureFlagProvider, GraphQLAPIProvider, StackManagerProvider, TransformerContextOutputProvider, TransformerContextProvider, TransformerDataSourceManagerProvider, AppSyncAuthConfiguration } from '@aws-amplify/graphql-transformer-interfaces';
import { TransformerContextMetadataProvider } from '@aws-amplify/graphql-transformer-interfaces/src/transformer-context/transformer-context-provider';
import { App } from '@aws-cdk/core';
import { DocumentNode } from 'graphql';
import { ResolverConfig } from '../config/transformer-config';
import { TransformerContextProviderRegistry } from './provider-registry';
import { ResolverManager } from './resolver';
import { TransformerResourceHelper } from './resource-helper';
export { TransformerResolver } from './resolver';
export { StackManager } from './stack-manager';
export declare class TransformerContextMetadata implements TransformerContextMetadataProvider {
    private metadata;
    get<T>(key: string): T | undefined;
    set<T>(key: string, val: T): void;
    has(key: string): boolean;
}
export declare class TransformerContext implements TransformerContextProvider {
    readonly inputDocument: DocumentNode;
    readonly output: TransformerContextOutputProvider;
    readonly resolvers: ResolverManager;
    readonly dataSources: TransformerDataSourceManagerProvider;
    readonly providerRegistry: TransformerContextProviderRegistry;
    readonly stackManager: StackManagerProvider;
    readonly resourceHelper: TransformerResourceHelper;
    readonly featureFlags: FeatureFlagProvider;
    _api?: GraphQLAPIProvider;
    readonly authConfig: AppSyncAuthConfiguration;
    readonly sandboxModeEnabled: boolean;
    private resolverConfig;
    metadata: TransformerContextMetadata;
    constructor(app: App, inputDocument: DocumentNode, stackMapping: Record<string, string>, authConfig: AppSyncAuthConfiguration, sandboxModeEnabled?: boolean, featureFlags?: FeatureFlagProvider, resolverConfig?: ResolverConfig);
    get api(): GraphQLAPIProvider;
    getResolverConfig: <ResolverConfig_1>() => ResolverConfig_1 | undefined;
    isProjectUsingDataStore(): boolean;
}
//# sourceMappingURL=index.d.ts.map