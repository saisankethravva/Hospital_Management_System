export interface TransformMigrationConfig {
    V1?: {
        Resources: string[];
    };
}
export declare const enum ConflictHandlerType {
    OPTIMISTIC = "OPTIMISTIC_CONCURRENCY",
    AUTOMERGE = "AUTOMERGE",
    LAMBDA = "LAMBDA"
}
export declare type ConflictDetectionType = 'VERSION' | 'NONE';
export declare type SyncConfigOptimistic = {
    ConflictDetection: ConflictDetectionType;
    ConflictHandler: ConflictHandlerType.OPTIMISTIC;
};
export declare type SyncConfigServer = {
    ConflictDetection: ConflictDetectionType;
    ConflictHandler: ConflictHandlerType.AUTOMERGE;
};
export declare type SyncConfigLambda = {
    ConflictDetection: ConflictDetectionType;
    ConflictHandler: ConflictHandlerType.LAMBDA;
    LambdaConflictHandler: LambdaConflictHandler;
};
export declare type LambdaConflictHandler = {
    name: string;
    region?: string;
    lambdaArn?: any;
};
export declare type SyncConfig = SyncConfigOptimistic | SyncConfigServer | SyncConfigLambda;
export declare type ResolverConfig = {
    project?: SyncConfig;
    models?: Record<string, SyncConfig>;
};
export interface TransformConfig {
    StackMapping?: {
        [resourceId: string]: string;
    };
    TransformerOptions?: {
        [transformer: string]: {
            [option: string]: any;
        };
    };
    transformers?: string[];
}
//# sourceMappingURL=transformer-config.d.ts.map